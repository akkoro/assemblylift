# AssemblyLift Service
# Name: {{name}}

variable project_name {
    type = string
}

variable project_path {
    type = string
}

variable service_name {
    type = string
}

variable registry_credentials {
    type = map(string)
}

variable function_urls {
    type = map(string)
}

terraform {
    required_providers {
        kubernetes = {
          source  = "hashicorp/kubernetes"
          version = ">= 2.24.0"
        }

        docker = {
            source  = "kreuzwerker/docker"
            version = ">= 3.0.2"
        }
    }
}

resource kubernetes_namespace service_namespace {
    provider = kubernetes
    metadata {
        name = "asml-${var.project_name}-${var.service_name}"
    }
}

resource kubernetes_secret dockerconfig {
    provider = kubernetes
    metadata {
        name      = "registry-credentials"
        namespace = "asml-${var.project_name}-${var.service_name}"
    }
    data = {
        ".dockerconfigjson" = jsonencode({
            auths = {
                (var.registry_credentials.proxy_endpoint) = {
                    "username" = var.registry_credentials.username
                    "password" = var.registry_credentials.password
                    "auth"     = var.registry_credentials.auth_token
                }
            }
        })
    }
    type = "kubernetes.io/dockerconfigjson"

    depends_on = [kubernetes_namespace.service_namespace]
}

{{#if this.domain}}
resource kubernetes_manifest cert_issuer {
    provider = kubernetes
    manifest = {
        apiVersion = "cert-manager.io/v1"
        kind       = "ClusterIssuer"

        metadata = {
            name = "asml-${var.project_name}-${var.service_name}-letsencrypt"
        }

        spec = {
            acme = {
                server = "{{#if (eq this.domain.provider.options.cm_letsencrypt_env "staging")}}https://acme-staging-v02.api.letsencrypt.org/directory{{else}}https://acme-v02.api.letsencrypt.org/directory{{/if}}"
                email  = "{{this.domain.provider.options.cm_acme_email}}"

                privateKeySecretRef = {
                    name = "asml-letsencrypt"
                }

                solvers = [
                    {
                        dns01 = {
                            route53 = {
                                region = "{{this.domain.provider.platform.options.region}}"
                                {{#if this.domain.provider.options.cm_aws_credentials}}
                                accessKeyIDSecretRef = {
                                    name = "{{this.domain.provider.options.cm_aws_credentials}}"
                                    key  = "aws_access_key_id"
                                }
                                secretAccessKeySecretRef = {
                                    name = "{{this.domain.provider.options.cm_aws_credentials}}"
                                    key  = "aws_secret_access_key"
                                }
                                {{/if}}
                            }
                        }
                    }
                ]
            }
        }
    }
}
{{/if}}

{{#each functions}}
module asml_function_{{this.name}} {
    source = "./functions/{{this.name}}/infra"

    project_name        = var.project_name
    project_path        = var.project_path
    service_name        = var.service_name
    function_name       = "{{this.name}}"
    handler_name        = "{{this.handler_name}}"
    repository_url      = var.function_urls["{{this.name}}"]
    
    {{#if this.environment_variables}}env_vars = {
        {{#each this.environment_variables}}{{@key}} = "{{this}}",
        {{/each}}
    }{{/if}}

    depends_on = [kubernetes_namespace.service_namespace]
}
{{/each}}
