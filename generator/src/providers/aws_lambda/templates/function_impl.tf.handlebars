variable project_name {
    type = string
}

variable project_path {
    type = string
}

variable service_name {
    type = string
}

variable function_name {
    type = string
}

variable handler_name {
    type = string
}

variable runtime_environment {
    type = string
}

variable payload_bucket {
    type = string
    default = ""
}

variable timeout {
    type = number
    default = 5
}

variable size {
    type = number
    default = 1769
}

variable env_vars {
    type = map(string)
    default = {}
}

variable runtime_layer_arn {
    type = string
}

variable iomod_layer_arn {
    type = string
    default = ""
}

variable ruby_layer_arn {
    type    = string
    default = null
}

terraform {
    required_providers {
        aws = {
            source  = "hashicorp/aws"
            version = "~> 5.0"
        }
    }
}

locals {
    layers = var.ruby_layer_arn == null ? [var.runtime_layer_arn] : [var.runtime_layer_arn, var.ruby_layer_arn]
}

{{#if has_large_payload}}resource aws_s3_object asml_function_payload {
    provider = aws
    key      = "${var.function_name}.zip"
    bucket   = var.payload_bucket
    source   = "${var.project_path}/net/services/${var.service_name}/functions/${var.function_name}/${var.function_name}.zip"
    etag     = filemd5("${var.project_path}/net/services/${var.service_name}/functions/${var.function_name}/${var.function_name}.zip")
}{{/if}}

resource aws_lambda_function asml_function {
    provider = aws

    function_name = "asml-${var.project_name}-${var.service_name}-${var.function_name}"
    role          = aws_iam_role.asml_lambda_iam_role.arn
    runtime       = "provided"
    handler       = var.handler_name
    timeout       = var.timeout
    memory_size   = var.size

    {{#if has_large_payload}}
    s3_key    = "${var.function_name}.zip"
    s3_bucket = var.payload_bucket
    {{else}}
    filename  = "${var.project_path}/net/services/${var.service_name}/functions/${var.function_name}/${var.function_name}.zip"
    {{/if}}
  
    environment {
      variables = merge({
        ASML_FUNCTION_ENV = var.runtime_environment
      }, var.env_vars)
    }

    layers = local.layers

    source_code_hash = filebase64sha256("${var.project_path}/net/services/${var.service_name}/functions/${var.function_name}/${var.function_name}.zip")
}

resource aws_iam_role asml_lambda_iam_role {
    provider = aws
    name     = "asml-${var.project_name}-${var.service_name}-${var.function_name}"

    assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF

    inline_policy {
        name = "allow-cloudwatch-logging"
        policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:*",
      "Effect": "Allow"
    }
  ]
}
EOF
    }
}
