/// This interface allows callers to perform DNS resolution. Since the existing definition in wasi-sockets uses currently unsupported wit features, I have rewritten this interface to be usable on existing features.
///
/// First, you call resolve-name() to create a resolver descriptor. Then, you call resolve-next(resolver) in a loop to fetch the IP addresses. Finally, you destroy the resolver with close() (like for all descriptors). This structure allows for non-blocking operation in conjunction with poll-oneoff().
default interface wasi-dns {
  // TODO: use { ip-address-family, ip-address } from wasi-ip
  enum ip-address-family {
      /// Similar to `AF_INET` in POSIX.
      ipv4,

      /// Similar to `AF_INET6` in POSIX.
      ipv6,
  }
  type ipv4-address = tuple<u8, u8, u8, u8>
  type ipv6-address = tuple<u16, u16, u16, u16, u16, u16, u16, u16>
  variant ip-address {
      ipv4(ipv4-address),
      ipv6(ipv6-address),
  }

  /// Resolution flags.
  flags resolver-flags {
      /// Equivalent to `O_NONBLOCK`.
      nonblock,
  }

  /// An iterator over resolution results.
  ///
  /// In the future, this will be replaced by handle types.
  type resolver = u32

  // TODO: use { network } from wasi-net
  type network = u32

  enum resolve-name-error {
      invalid-name,
  }

  enum resolve-error {
      /// The resolve is in non-blocking mode and the request would block.
      would-block,
      /// The DNS resolver is unable to provide results.
      dns-unavailable,
  }

  /// Starts resolving an internet host name to a list of IP addresses.
  ///
  /// This function returns a new resolver on success or an error if
  /// immediately available. For example, this function fails with
  /// `invalid-name` when `name` is:
  ///   - empty
  ///   - an IP address
  ///   - a syntactically invalid domain name in another way
  resolve-name: func(
      network: network,

      /// The name to look up.
      ///
      /// IP addresses are not allowed and will fail with `invalid-name`.
      ///
      /// Unicode domain names are automatically converted to ASCII using
      /// IDNA encoding.
      name: string,

      /// If provided, limit the results the specified address family.
      address-family: option<ip-address-family>,

      /// Flags controlling the behavior of the name resolution.
      %flags: resolver-flags
  ) -> result<resolver, resolve-name-error>

  /// Get the next address from the resolver.
  ///
  /// This function should be called multiple times. On each call, it will
  /// return the next address in connection order preference. If all
  /// addresses have been exhausted, this function returns `none`. If
  /// non-blocking mode is used, this function may return `errno::again`
  /// indicating that the caller should poll for incoming data.
  /// This function never returns IPv4-mapped IPv6 addresses.
  resolve-next: func(resolver: resolver) -> result<option<ip-address>, resolve-error>

  /// Closes a handle returned by `resolve-name`.
  close-resolver: func(resolver: resolver)
}
