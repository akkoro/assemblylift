/// # WASI Poll API
///
/// WASI Poll is a poll API intended to let users wait for I/O events on
/// multiple handles at once.
default interface wasi-poll {
  use pkg.wasi-clocks.{wall-clock, monotonic-clock, datetime, instant}
  use pkg.wasi-io.{input-stream, output-stream}

  /// A "pollable" handle.
  ///
  /// This is conceptually represents a `stream<_, _>`, or in other words,
  /// a stream that one can wait on, repeatedly, but which does not itself
  /// produce any data. It's temporary scaffolding until component-model's
  /// async features are ready.
  ///
  /// And at present, it is a `u32` instead of being an actual handle, until
  /// the wit-bindgen implementation of handles and resources is ready.
  ///
  /// Waitable lifetimes are not automatically managed. Users must ensure
  /// that they do not outlive the resource they reference.
  type pollable = u32

  /// Dispose of the specified `pollable`, after which it may no longer be used.
  drop-pollable: func(f: pollable)

  /// Create a `pollable` which will resolve once either the specified stream has bytes
  /// available to read or the other end of the stream has been closed.
  subscribe-read: func(s: input-stream) -> pollable

  /// Create a `pollable` which will resolve once either the specified stream is ready
  /// to accept bytes or the other end of the stream has been closed.
  subscribe-write: func(s: output-stream) -> pollable

  /// Create a `pollable` which will resolve once the specified time has been reached.
  subscribe-monotonic-clock: func(clock: monotonic-clock, when: instant, absolute: bool) -> pollable

  /// Poll for completion on a set of pollables.
  ///
  /// The "oneoff" in the name refers to the fact that this function must do a
  /// linear scan through the entire list of subscriptions, which may be
  /// inefficient if the number is large and the same subscriptions are used
  /// many times. In the future, it may be accompanied by an API similar to
  /// Linux's `epoll` which allows sets of subscriptions to be registered and
  /// made efficiently reusable.
  ///
  /// Note that the return type would ideally be `list<bool>`, but that would
  /// be more difficult to polyfill given the current state of `wit-bindgen`.
  /// See https://github.com/bytecodealliance/preview2-prototyping/pull/11#issuecomment-1329873061
  /// for details.  For now, we use zero to mean "not ready" and non-zero to
  /// mean "ready".
  poll-oneoff: func(in: list<pollable>) -> list<u8>
}
