/// This interface represents the core of TCP networking. There are two types of TCP descriptors:
///
///  - a listener, which produces new incoming connections; and ...
///  - a connection, which actually transfers data to remote parties.
///
/// Note that this interface does not implement bind(). Binding inputs happen as part of the listen() or connect() calls.
///
/// Non-blocking connections should be supported by calling connect() with the nonblock flag. Then you poll on the resulting connection for output. Once poll returns, you can call `is-connected` to determine the connection status and receive(connection, 1) to collect the error status. This follows the existing usage under POSIX.
default interface wasi-tcp {
  use pkg.wasi-poll.{pollable}
  use pkg.wasi-io.{input-stream, output-stream}
  use pkg.wasi-net.{network}

  // TODO: Use ip-socket-address from wasi-ip.
  //use pkg.wasi-ip.{ip-socket-address}
  type ipv4-address = tuple<u8, u8, u8, u8>
  type ipv6-address = tuple<u16, u16, u16, u16, u16, u16, u16, u16>
  record ipv4-socket-address {
      address: ipv4-address,
      port: u16,
  }
  record ipv6-socket-address {
      address: ipv6-address,
      port: u16,
      flow-info: u32,
      scope-id: u32,
  }
  variant ip-socket-address {
      ipv4(ipv4-socket-address),
      ipv6(ipv6-socket-address),
  }

  /// Size of a range of bytes that may be ready to be read.
  type io-size = u64

  /// Error codes returned by functions.
  /// Not all of these error codes are returned by the functions provided by this
  /// API; some are used in higher-level library layers, and others are provided
  /// merely for alignment with POSIX.
  enum errno {
      /// Permission denied.
      access,
      /// Address in use.
      addrinuse,
      /// Address not available.
      addrnotavail,
      /// Address family not supported.
      afnosupport,
      /// Resource unavailable, or operation would block.
      again,
      /// Connection already in progress.
      already,
      /// Bad descriptor.
      badf,
      /// Device or resource busy.
      busy,
      /// Connection aborted.
      connection-aborted,
      /// Connection refused.
      connection-refused,
      /// Connection reset.
      connection-reset,
      /// Resource deadlock would occur.
      deadlock,
      /// Destination address required.
      destaddrreq,
      /// Host is unreachable.
      host-unreachable,
      /// Illegal byte sequence.
      ilseq,
      /// Operation in progress.
      inprogress,
      /// Interrupted function.
      intr,
      /// Invalid argument.
      inval,
      /// I/O error.
      io,
      /// Socket is connected.
      isconn,
      /// Message too large.
      msgsize,
      /// Multihop attempted.
      multihop,
      /// Filename too long.
      nametoolong,
      /// Network is down.
      network-down,
      /// Connection aborted by network.
      network-reset,
      /// Network unreachable.
      network-unreachable,
      /// No buffer space available.
      nobufs,
      /// No such file or directory.
      noent,
      /// Not enough space.
      nomem,
      /// Protocol not available.
      noprotoopt,
      /// Function not supported.
      nosys,
      /// State not recoverable.
      notrecoverable,
      /// Not supported, or operation not supported on socket.
      notsup,
      /// Value too large to be stored in data type.
      overflow,
      /// Operation not permitted.
      perm,
      /// Connection timed out.
      timedout,
   }

  /// Listener flags.
  flags listener-flags {
      /// Equivalent to `O_NONBLOCK`.
      nonblock,
   }

  /// Connection flags.
  flags connection-flags {
      /// Equivalent to `SO_KEEPALIVE`.
      keepalive,

      /// Equivalent to `O_NONBLOCK`.
      nonblock,

      /// Equivalent to `TCP_NODELAY`.
      nodelay,
  }

  /// A "socket" descriptor for a listener. In the future, this will be
  /// replaced by handle types.
  /// fixme: move this and related stuff into a separate wasi-socket?
  type listener = u32

  /// A "socket" descriptor for a TCP listener. In the future, this will be
  /// replaced by handle types.
  type tcp-listener = u32

  /// A "socket" descriptor for a TCP connection. In the future, this will be
  /// replaced by handle types.
  type connection = u32

  /// Creates a new listener.
  ///
  /// If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), the
  /// implementation will decide which network address to bind to.
  ///
  /// If the TCP/UDP port is zero, the socket will be bound to an
  /// unspecified free port.
  ///
  /// The listener should be destroyed with `close-tcp-listener` when no longer in use.
  listen: func(
      network: network,
      address: ip-socket-address,
      backlog: option<u32>,
      %flags: listener-flags
  ) -> result<tcp-listener, errno>

  /// Accepts a new incoming connection.
  ///
  /// When in non-blocking mode, this function will return `errno::again`
  /// when no new incoming connection is immediately available. This is an
  /// indication to poll for incoming data on the listener. Otherwise, this
  /// function will block until an incoming connection is available.
  ///
  /// Returns a tuple of a connection handle, and input stream, and an output
  /// stream for the socket.
  ///
  /// The connection should be destroyed with `close-connection` when no longer in use.
  accept: func(
      listener: listener,
      %flags: connection-flags
  ) -> result<tuple<connection, input-stream, output-stream>, errno>

  /// Accepts a new incoming connection on a TCP socket.
  ///
  /// This is the same as `accept`, but takes a `tcp-listener`
  /// and additionally returns an `ip-socket-address`.
  accept-tcp: func(
      listener: tcp-listener,
      %flags: connection-flags
  ) -> result<tuple<connection, input-stream, output-stream, ip-socket-address>, errno>

  /// Connect to a remote endpoint.
  ///
  /// If the local IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), the
  /// implementation will decide which network address to bind to.
  ///
  /// If the local TCP/UDP port is zero, the socket will be bound to an
  /// unspecified free port.
  ///
  /// The connection should be destroyed with `close-connection` when no longer in use.
  ///
  ///  References
  /// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html
  /// - https://man7.org/linux/man-pages/man2/bind.2.html
  /// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html
  /// - https://man7.org/linux/man-pages/man2/connect.2.html
  connect: func(
      network: network,
      local-address: ip-socket-address,
      remote-address: ip-socket-address,
      %flags: connection-flags,
  ) -> result<tuple<connection, input-stream, output-stream>, errno>

  /// Send bytes to the remote connection.
  ///
  /// This function may not successfully send all bytes. Check the number of
  /// bytes returned.
  ///
  /// Note: This is similar to `pwrite` in POSIX.
  send: func(connection: connection, bytes: list<u8>) -> result<io-size, errno>

  /// Receive bytes from the remote connection.
  ///
  /// This function receives **at most** `length` bytes from the remote
  /// connection.
  ///
  /// Note: This is similar to `recv` in POSIX.
  receive: func(connection: connection, length: io-size) -> result<tuple<list<u8>, bool>, errno>

  /// Get the flags set for the connection.
  get-flags: func(connection: connection) -> result<connection-flags, errno>

  /// Sets the flags for the connection.
  set-flags: func(connection: connection, %flags: connection-flags) -> result<_, errno>

  /// Gets the receive-buffer size.
  ///
  /// Note: this is only a hint. Implementations may internally handle this
  /// in any way, including ignoring it.
  ///
  /// Equivalent to `SO_RCVBUF`.
  get-receive-buffer-size: func(connection: connection) -> result<io-size, errno>

  /// Gets the receive-buffer size.
  ///
  /// Note: this is only a hint. Implementations may internally handle this
  /// in any way, including ignoring it.
  ///
  /// Equivalent to `SO_RCVBUF`.
  set-receive-buffer-size: func(connection: connection, value: io-size) -> result<_, errno>

  /// Gets the send-buffer size.
  ///
  /// Note: this is only a hint. Implementations may internally handle this
  /// in any way, including ignoring it.
  ///
  /// Equivalent to `SO_SNDBUF`.
  get-send-buffer-size: func(connection: connection) -> result<io-size, errno>

  /// Sets the send-buffer size.
  ///
  /// Note: this is only a hint. Implementations may internally handle this
  /// in any way, including ignoring it.
  ///
  /// Equivalent to `SO_SNDBUF`.
  set-send-buffer-size: func(connection: connection, value: io-size) -> result<_, errno>

  /// Query the specified `socket` for how many bytes are available to read.
  bytes-readable: func(s: connection) -> result<tuple<io-size, bool>, errno>

  /// Query the specified `socket` for the number of bytes ready to be accepted.
  bytes-writable: func(s: connection) -> result<tuple<io-size, bool>, errno>

  /// Test whether a connection is connected.
  ///
  /// In POSIX, this is typically done using `getpeername`.
  is-connected: func(connection: connection) -> bool

  /// Closes a handle returned by `listen`.
  close-tcp-listener: func(listener: tcp-listener)

  /// Closes a handle returned by `connect`, `accept`, or `accept-tcp`.
  close-connection: func(listener: tcp-listener)
}
