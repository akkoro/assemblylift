// Generated by `wit-bindgen` 0.15.0. DO NOT EDIT!
pub mod akkoro {
    pub mod opa {

        #[allow(clippy::all)]
        pub mod module {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum PolicyError {
                InvalidWasm,
                NoEntrypoint,
            }
            impl PolicyError {
                pub fn name(&self) -> &'static str {
                    match self {
                        PolicyError::InvalidWasm => "invalid-wasm",
                        PolicyError::NoEntrypoint => "no-entrypoint",
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                        PolicyError::InvalidWasm => "",
                        PolicyError::NoEntrypoint => "",
                    }
                }
            }
            impl ::core::fmt::Debug for PolicyError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("PolicyError")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for PolicyError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), *self as i32)
                }
            }

            impl std::error::Error for PolicyError {}

            impl PolicyError {
                pub(crate) unsafe fn _lift(val: u8) -> PolicyError {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => PolicyError::InvalidWasm,
                        1 => PolicyError::NoEntrypoint,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct Policy {
                pub id: wit_bindgen::rt::string::String,
                pub entrypoints: wit_bindgen::rt::vec::Vec<wit_bindgen::rt::string::String>,
            }
            impl ::core::fmt::Debug for Policy {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Policy")
                        .field("id", &self.id)
                        .field("entrypoints", &self.entrypoints)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn new_policy(bytes: &[u8]) -> Result<Policy, PolicyError> {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([u8; 20]);
                    let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                    let vec0 = bytes;
                    let ptr0 = vec0.as_ptr() as i32;
                    let len0 = vec0.len() as i32;
                    let ptr1 = ret_area.as_mut_ptr() as i32;
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "akkoro:opa/module")]
                    extern "C" {
                        #[link_name = "new-policy"]
                        fn wit_import(_: i32, _: i32, _: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i32, _: i32) {
                        unreachable!()
                    }
                    wit_import(ptr0, len0, ptr1);
                    let l2 = i32::from(*((ptr1 + 0) as *const u8));
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *((ptr1 + 4) as *const i32);
                                let l4 = *((ptr1 + 8) as *const i32);
                                let len5 = l4 as usize;
                                let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
                                let l6 = *((ptr1 + 12) as *const i32);
                                let l7 = *((ptr1 + 16) as *const i32);
                                let base11 = l6;
                                let len11 = l7;
                                let mut result11 = Vec::with_capacity(len11 as usize);
                                for i in 0..len11 {
                                    let base = base11 + i * 8;
                                    let e11 = {
                                        let l8 = *((base + 0) as *const i32);
                                        let l9 = *((base + 4) as *const i32);
                                        let len10 = l9 as usize;
                                        let bytes10 =
                                            Vec::from_raw_parts(l8 as *mut _, len10, len10);

                                        wit_bindgen::rt::string_lift(bytes10)
                                    };
                                    result11.push(e11);
                                }
                                wit_bindgen::rt::dealloc(base11, (len11 as usize) * 8, 4);

                                Policy {
                                    id: wit_bindgen::rt::string_lift(bytes5),
                                    entrypoints: result11,
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l12 = i32::from(*((ptr1 + 4) as *const u8));

                                PolicyError::_lift(l12 as u8)
                            };
                            Err(e)
                        }
                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn eval(id: &str, data: &str, input: &str) -> wit_bindgen::rt::string::String {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([u8; 8]);
                    let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                    let vec0 = id;
                    let ptr0 = vec0.as_ptr() as i32;
                    let len0 = vec0.len() as i32;
                    let vec1 = data;
                    let ptr1 = vec1.as_ptr() as i32;
                    let len1 = vec1.len() as i32;
                    let vec2 = input;
                    let ptr2 = vec2.as_ptr() as i32;
                    let len2 = vec2.len() as i32;
                    let ptr3 = ret_area.as_mut_ptr() as i32;
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "akkoro:opa/module")]
                    extern "C" {
                        #[link_name = "eval"]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32) {
                        unreachable!()
                    }
                    wit_import(ptr0, len0, ptr1, len1, ptr2, len2, ptr3);
                    let l4 = *((ptr3 + 0) as *const i32);
                    let l5 = *((ptr3 + 4) as *const i32);
                    let len6 = l5 as usize;
                    let bytes6 = Vec::from_raw_parts(l4 as *mut _, len6, len6);
                    wit_bindgen::rt::string_lift(bytes6)
                }
            }
        }
    }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:opa"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 513] = [
    3, 0, 3, 111, 112, 97, 0, 97, 115, 109, 13, 0, 1, 0, 7, 178, 1, 1, 65, 2, 1, 66, 11, 1, 109, 2,
    12, 105, 110, 118, 97, 108, 105, 100, 45, 119, 97, 115, 109, 13, 110, 111, 45, 101, 110, 116,
    114, 121, 112, 111, 105, 110, 116, 4, 0, 12, 112, 111, 108, 105, 99, 121, 45, 101, 114, 114,
    111, 114, 3, 0, 0, 1, 112, 115, 1, 114, 2, 2, 105, 100, 115, 11, 101, 110, 116, 114, 121, 112,
    111, 105, 110, 116, 115, 2, 4, 0, 6, 112, 111, 108, 105, 99, 121, 3, 0, 3, 1, 112, 125, 1, 106,
    1, 4, 1, 1, 1, 64, 1, 5, 98, 121, 116, 101, 115, 5, 0, 6, 4, 0, 10, 110, 101, 119, 45, 112,
    111, 108, 105, 99, 121, 1, 7, 1, 64, 3, 2, 105, 100, 115, 4, 100, 97, 116, 97, 115, 5, 105,
    110, 112, 117, 116, 115, 0, 115, 4, 0, 4, 101, 118, 97, 108, 1, 8, 4, 1, 17, 97, 107, 107, 111,
    114, 111, 58, 111, 112, 97, 47, 109, 111, 100, 117, 108, 101, 5, 0, 11, 12, 1, 0, 6, 109, 111,
    100, 117, 108, 101, 3, 0, 0, 7, 200, 1, 1, 65, 2, 1, 65, 2, 1, 66, 11, 1, 109, 2, 12, 105, 110,
    118, 97, 108, 105, 100, 45, 119, 97, 115, 109, 13, 110, 111, 45, 101, 110, 116, 114, 121, 112,
    111, 105, 110, 116, 4, 0, 12, 112, 111, 108, 105, 99, 121, 45, 101, 114, 114, 111, 114, 3, 0,
    0, 1, 112, 115, 1, 114, 2, 2, 105, 100, 115, 11, 101, 110, 116, 114, 121, 112, 111, 105, 110,
    116, 115, 2, 4, 0, 6, 112, 111, 108, 105, 99, 121, 3, 0, 3, 1, 112, 125, 1, 106, 1, 4, 1, 1, 1,
    64, 1, 5, 98, 121, 116, 101, 115, 5, 0, 6, 4, 0, 10, 110, 101, 119, 45, 112, 111, 108, 105, 99,
    121, 1, 7, 1, 64, 3, 2, 105, 100, 115, 4, 100, 97, 116, 97, 115, 5, 105, 110, 112, 117, 116,
    115, 0, 115, 4, 0, 4, 101, 118, 97, 108, 1, 8, 3, 1, 17, 97, 107, 107, 111, 114, 111, 58, 111,
    112, 97, 47, 109, 111, 100, 117, 108, 101, 5, 0, 4, 1, 14, 97, 107, 107, 111, 114, 111, 58,
    111, 112, 97, 47, 111, 112, 97, 4, 0, 11, 9, 1, 0, 3, 111, 112, 97, 3, 2, 0, 0, 16, 12, 112,
    97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100,
    117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13,
    119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16,
    119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 53,
    46, 48,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
