// Generated by `wit-bindgen` 0.4.0. DO NOT EDIT!

#[allow(clippy::all)]
pub mod wall_clock {
    /// A wall clock is a clock which measures the date and time according to
    /// some external reference.
    ///
    /// External references may be reset, so this clock is not necessarily
    /// monotonic, making it unsuitable for measuring elapsed time.
    ///
    /// It is intended for reporting the current date and time for humans.
    ///
    /// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
    pub type WallClock = u32;
    /// A time and date in seconds plus nanoseconds.
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct Datetime {
        pub seconds: u64,
        pub nanoseconds: u32,
    }
    impl core::fmt::Debug for Datetime {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("Datetime")
                .field("seconds", &self.seconds)
                .field("nanoseconds", &self.nanoseconds)
                .finish()
        }
    }
    #[allow(clippy::all)]
    /// Read the current value of the clock.
    ///
    /// This clock is not monotonic, therefore calling this function repeatedly
    /// will not necessarily produce a sequence of non-decreasing values.
    ///
    /// The returned timestamps represent the number of seconds since
    /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
    /// also known as [Unix Time].
    ///
    /// The nanoseconds field of the output is always less than 1000000000.
    ///
    /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
    /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
    pub fn now(this: WallClock) -> Datetime {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "wall-clock")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "now")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "wall-clock_now")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            Datetime {
                seconds: *((ptr0 + 0) as *const i64) as u64,
                nanoseconds: *((ptr0 + 8) as *const i32) as u32,
            }
        }
    }
    #[allow(clippy::all)]
    /// Query the resolution of the clock.
    ///
    /// The nanoseconds field of the output is always less than 1000000000.
    pub fn resolution(this: WallClock) -> Datetime {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "wall-clock")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "resolution")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "wall-clock_resolution")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            Datetime {
                seconds: *((ptr0 + 0) as *const i64) as u64,
                nanoseconds: *((ptr0 + 8) as *const i32) as u32,
            }
        }
    }
    #[allow(clippy::all)]
    /// Dispose of the specified `wall-clock`, after which it may no longer
    /// be used.
    pub fn drop_wall_clock(this: WallClock) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "wall-clock")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "drop-wall-clock")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "wall-clock_drop-wall-clock")]
                fn wit_import(_: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this));
        }
    }
}

#[allow(clippy::all)]
pub mod poll {
    /// A "pollable" handle.
    ///
    /// This is conceptually represents a `stream<_, _>`, or in other words,
    /// a stream that one can wait on, repeatedly, but which does not itself
    /// produce any data. It's temporary scaffolding until component-model's
    /// async features are ready.
    ///
    /// And at present, it is a `u32` instead of being an actual handle, until
    /// the wit-bindgen implementation of handles and resources is ready.
    ///
    /// `pollable` lifetimes are not automatically managed. Users must ensure
    /// that they do not outlive the resource they reference.
    ///
    /// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
    pub type Pollable = u32;
    #[allow(clippy::all)]
    /// Dispose of the specified `pollable`, after which it may no longer
    /// be used.
    pub fn drop_pollable(this: Pollable) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "poll")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "drop-pollable")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "poll_drop-pollable")]
                fn wit_import(_: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this));
        }
    }
    #[allow(clippy::all)]
    /// Poll for completion on a set of pollables.
    ///
    /// The "oneoff" in the name refers to the fact that this function must do a
    /// linear scan through the entire list of subscriptions, which may be
    /// inefficient if the number is large and the same subscriptions are used
    /// many times. In the future, this is expected to be obsoleted by the
    /// component model async proposal, which will include a scalable waiting
    /// facility.
    ///
    /// Note that the return type would ideally be `list<bool>`, but that would
    /// be more difficult to polyfill given the current state of `wit-bindgen`.
    /// See <https://github.com/bytecodealliance/preview2-prototyping/pull/11#issuecomment-1329873061>
    /// for details.  For now, we use zero to mean "not ready" and non-zero to
    /// mean "ready".
    pub fn poll_oneoff(in_: &[Pollable]) -> wit_bindgen::rt::vec::Vec<u8> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 8]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = in_;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "poll")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "poll-oneoff")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "poll_poll-oneoff")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(ptr0, len0, ptr1);
            let len2 = *((ptr1 + 4) as *const i32) as usize;
            Vec::from_raw_parts(*((ptr1 + 0) as *const i32) as *mut _, len2, len2)
        }
    }
}

#[allow(clippy::all)]
pub mod monotonic_clock {
    pub type Pollable = super::poll::Pollable;
    /// A monotonic clock is a clock which has an unspecified initial value, and
    /// successive reads of the clock will produce non-decreasing values.
    ///
    /// It is intended for measuring elapsed time.
    ///
    /// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
    pub type MonotonicClock = u32;
    /// A timestamp in nanoseconds.
    pub type Instant = u64;
    #[allow(clippy::all)]
    /// Read the current value of the clock.
    ///
    /// The clock is monotonic, therefore calling this function repeatedly will
    /// produce a sequence of non-decreasing values.
    pub fn now(this: MonotonicClock) -> Instant {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "monotonic-clock")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "now")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "monotonic-clock_now")]
                fn wit_import(_: i32) -> i64;
            }
            let ret = wit_import(wit_bindgen::rt::as_i32(this));
            ret as u64
        }
    }
    #[allow(clippy::all)]
    /// Query the resolution of the clock.
    pub fn resolution(this: MonotonicClock) -> Instant {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "monotonic-clock")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "resolution")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "monotonic-clock_resolution")]
                fn wit_import(_: i32) -> i64;
            }
            let ret = wit_import(wit_bindgen::rt::as_i32(this));
            ret as u64
        }
    }
    #[allow(clippy::all)]
    /// Create a `pollable` which will resolve once the specified time has been
    /// reached.
    pub fn subscribe(this: MonotonicClock, when: Instant, absolute: bool) -> Pollable {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "monotonic-clock")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "subscribe")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "monotonic-clock_subscribe")]
                fn wit_import(_: i32, _: i64, _: i32) -> i32;
            }
            let ret = wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(when),
                match absolute {
                    true => 1,
                    false => 0,
                },
            );
            ret as u32
        }
    }
    #[allow(clippy::all)]
    /// Dispose of the specified `monotonic-clock`, after which it may no longer
    /// be used.
    pub fn drop_monotonic_clock(this: MonotonicClock) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "monotonic-clock")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "drop-monotonic-clock")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "monotonic-clock_drop-monotonic-clock"
                )]
                fn wit_import(_: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this));
        }
    }
}

#[allow(clippy::all)]
pub mod instance_wall_clock {
    pub type WallClock = super::wall_clock::WallClock;
    #[allow(clippy::all)]
    /// Return a handle to a wall clock, suitable for general-purpose
    /// application needs.
    ///
    /// This allocates a new handle, so applications with frequent need of a
    /// clock handle should call this function once and reuse the handle
    /// instead of calling this function each time.
    ///
    /// This [represents a value import](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Value_Imports).
    pub fn instance_wall_clock() -> WallClock {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "instance-wall-clock")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "instance-wall-clock")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "instance-wall-clock_instance-wall-clock"
                )]
                fn wit_import() -> i32;
            }
            let ret = wit_import();
            ret as u32
        }
    }
}

#[allow(clippy::all)]
pub mod instance_monotonic_clock {
    pub type MonotonicClock = super::monotonic_clock::MonotonicClock;
    #[allow(clippy::all)]
    /// Return a handle to a monotonic clock, suitable for general-purpose
    /// application needs.
    ///
    /// This allocates a new handle, so applications with frequent need of a
    /// clock handle should call this function once and reuse the handle
    /// instead of calling this function each time.
    ///
    /// This [represents a value import](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Value_Imports).
    pub fn instance_monotonic_clock() -> MonotonicClock {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "instance-monotonic-clock")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "instance-monotonic-clock")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "instance-monotonic-clock_instance-monotonic-clock"
                )]
                fn wit_import() -> i32;
            }
            let ret = wit_import();
            ret as u32
        }
    }
}

#[allow(clippy::all)]
pub mod timezone {
    pub type Datetime = super::wall_clock::Datetime;
    /// Information useful for displaying the timezone of a specific `datetime`.
    ///
    /// This information may vary within a single `timezone` to reflect daylight
    /// saving time adjustments.
    #[derive(Clone)]
    pub struct TimezoneDisplay {
        /// The number of seconds difference between UTC time and the local
        /// time of the timezone.
        ///
        /// The returned value will always be less than 86400 which is the
        /// number of seconds in a day (24*60*60).
        ///
        /// In implementations that do not expose an actual time zone, this
        /// should return 0.
        pub utc_offset: i32,
        /// The abbreviated name of the timezone to display to a user. The name
        /// `UTC` indicates Coordinated Universal Time. Otherwise, this should
        /// reference local standards for the name of the time zone.
        ///
        /// In implementations that do not expose an actual time zone, this
        /// should be the string `UTC`.
        ///
        /// In time zones that do not have an applicable name, a formatted
        /// representation of the UTC offset may be returned, such as `-04:00`.
        pub name: wit_bindgen::rt::string::String,
        /// Whether daylight saving time is active.
        ///
        /// In implementations that do not expose an actual time zone, this
        /// should return false.
        pub in_daylight_saving_time: bool,
    }
    impl core::fmt::Debug for TimezoneDisplay {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("TimezoneDisplay")
                .field("utc-offset", &self.utc_offset)
                .field("name", &self.name)
                .field("in-daylight-saving-time", &self.in_daylight_saving_time)
                .finish()
        }
    }
    /// A timezone.
    ///
    /// In timezones that recognize daylight saving time, also known as daylight
    /// time and summer time, the information returned from the functions varies
    /// over time to reflect these adjustments.
    ///
    /// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
    pub type Timezone = u32;
    #[allow(clippy::all)]
    /// Return information needed to display the given `datetime`. This includes
    /// the UTC offset, the time zone name, and a flag indicating whether
    /// daylight saving time is active.
    ///
    /// If the timezone cannot be determined for the given `datetime`, return a
    /// `timezone-display` for `UTC` with a `utc-offset` of 0 and no daylight
    /// saving time.
    pub fn display(this: Timezone, when: Datetime) -> TimezoneDisplay {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let super::wall_clock::Datetime {
                seconds: seconds0,
                nanoseconds: nanoseconds0,
            } = when;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "timezone")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "display")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "timezone_display")]
                fn wit_import(_: i32, _: i64, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(seconds0),
                wit_bindgen::rt::as_i32(nanoseconds0),
                ptr1,
            );
            let len2 = *((ptr1 + 8) as *const i32) as usize;
            TimezoneDisplay {
                utc_offset: *((ptr1 + 0) as *const i32),
                name: {
                    #[cfg(not(debug_assertions))]
                    {
                        String::from_utf8_unchecked(Vec::from_raw_parts(
                            *((ptr1 + 4) as *const i32) as *mut _,
                            len2,
                            len2,
                        ))
                    }
                    #[cfg(debug_assertions)]
                    {
                        String::from_utf8(Vec::from_raw_parts(
                            *((ptr1 + 4) as *const i32) as *mut _,
                            len2,
                            len2,
                        ))
                        .unwrap()
                    }
                },
                in_daylight_saving_time: {
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<u8, bool>(
                            i32::from(*((ptr1 + 12) as *const u8)) as u8
                        )
                    }
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr1 + 12) as *const u8)) {
                            0 => false,
                            1 => true,
                            _ => panic!("invalid bool discriminant"),
                        }
                    }
                },
            }
        }
    }
    #[allow(clippy::all)]
    /// The same as `display`, but only return the UTC offset.
    pub fn utc_offset(this: Timezone, when: Datetime) -> i32 {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            let super::wall_clock::Datetime {
                seconds: seconds0,
                nanoseconds: nanoseconds0,
            } = when;

            #[link(wasm_import_module = "timezone")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "utc-offset")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "timezone_utc-offset")]
                fn wit_import(_: i32, _: i64, _: i32) -> i32;
            }
            let ret = wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(seconds0),
                wit_bindgen::rt::as_i32(nanoseconds0),
            );
            ret
        }
    }
    #[allow(clippy::all)]
    /// Dispose of the specified input-stream, after which it may no longer
    /// be used.
    pub fn drop_timezone(this: Timezone) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "timezone")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "drop-timezone")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "timezone_drop-timezone")]
                fn wit_import(_: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this));
        }
    }
}

#[allow(clippy::all)]
pub mod streams {
    pub type Pollable = super::poll::Pollable;
    /// An error type returned from a stream operation. Currently this
    /// doesn't provide any additional information.
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct StreamError {}
    impl core::fmt::Debug for StreamError {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("StreamError").finish()
        }
    }
    impl core::fmt::Display for StreamError {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{:?}", self)
        }
    }
    impl std::error::Error for StreamError {}
    /// An output bytestream. In the future, this will be replaced by handle
    /// types.
    ///
    /// This conceptually represents a `stream<u8, _>`. It's temporary
    /// scaffolding until component-model's async features are ready.
    ///
    /// `output-stream`s are *non-blocking* to the extent practical on
    /// underlying platforms. Except where specified otherwise, I/O operations also
    /// always return promptly, after the number of bytes that can be written
    /// promptly, which could even be zero. To wait for the stream to be ready to
    /// accept data, the `subscribe-to-output-stream` function to obtain a
    /// `pollable` which can be polled for using `wasi_poll`.
    ///
    /// And at present, it is a `u32` instead of being an actual handle, until
    /// the wit-bindgen implementation of handles and resources is ready.
    ///
    /// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
    pub type OutputStream = u32;
    /// An input bytestream. In the future, this will be replaced by handle
    /// types.
    ///
    /// This conceptually represents a `stream<u8, _>`. It's temporary
    /// scaffolding until component-model's async features are ready.
    ///
    /// `input-stream`s are *non-blocking* to the extent practical on underlying
    /// platforms. I/O operations always return promptly; if fewer bytes are
    /// promptly available than requested, they return the number of bytes promptly
    /// available, which could even be zero. To wait for data to be available,
    /// use the `subscribe-to-input-stream` function to obtain a `pollable` which
    /// can be polled for using `wasi_poll`.
    ///
    /// And at present, it is a `u32` instead of being an actual handle, until
    /// the wit-bindgen implementation of handles and resources is ready.
    ///
    /// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
    pub type InputStream = u32;
    #[allow(clippy::all)]
    /// Read bytes from a stream.
    ///
    /// This function returns a list of bytes containing the data that was
    /// read, along with a bool which, when true, indicates that the end of the
    /// stream was reached. The returned list will contain up to `len` bytes; it
    /// may return fewer than requested, but not more.
    ///
    /// Once a stream has reached the end, subsequent calls to read or
    /// `skip` will always report end-of-stream rather than producing more
    /// data.
    ///
    /// If `len` is 0, it represents a request to read 0 bytes, which should
    /// always succeed, assuming the stream hasn't reached its end yet, and
    /// return an empty list.
    ///
    /// The len here is a `u64`, but some callees may not be able to allocate
    /// a buffer as large as that would imply.
    /// FIXME: describe what happens if allocation fails.
    pub fn read(
        this: InputStream,
        len: u64,
    ) -> Result<(wit_bindgen::rt::vec::Vec<u8>, bool), StreamError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "read")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_read")]
                fn wit_import(_: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(len),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    let len1 = *((ptr0 + 8) as *const i32) as usize;

                    (
                        Vec::from_raw_parts(*((ptr0 + 4) as *const i32) as *mut _, len1, len1),
                        {
                            #[cfg(not(debug_assertions))]
                            {
                                core::mem::transmute::<u8, bool>(i32::from(
                                    *((ptr0 + 12) as *const u8),
                                )
                                    as u8)
                            }
                            #[cfg(debug_assertions)]
                            {
                                match i32::from(*((ptr0 + 12) as *const u8)) {
                                    0 => false,
                                    1 => true,
                                    _ => panic!("invalid bool discriminant"),
                                }
                            }
                        },
                    )
                }),
                1 => Err(StreamError {}),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Read bytes from a stream, with blocking.
    ///
    /// This is similar to `read`, except that it blocks until at least one
    /// byte can be read.
    pub fn blocking_read(
        this: InputStream,
        len: u64,
    ) -> Result<(wit_bindgen::rt::vec::Vec<u8>, bool), StreamError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "blocking-read")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_blocking-read")]
                fn wit_import(_: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(len),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    let len1 = *((ptr0 + 8) as *const i32) as usize;

                    (
                        Vec::from_raw_parts(*((ptr0 + 4) as *const i32) as *mut _, len1, len1),
                        {
                            #[cfg(not(debug_assertions))]
                            {
                                core::mem::transmute::<u8, bool>(i32::from(
                                    *((ptr0 + 12) as *const u8),
                                )
                                    as u8)
                            }
                            #[cfg(debug_assertions)]
                            {
                                match i32::from(*((ptr0 + 12) as *const u8)) {
                                    0 => false,
                                    1 => true,
                                    _ => panic!("invalid bool discriminant"),
                                }
                            }
                        },
                    )
                }),
                1 => Err(StreamError {}),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Skip bytes from a stream.
    ///
    /// This is similar to the `read` function, but avoids copying the
    /// bytes into the instance.
    ///
    /// Once a stream has reached the end, subsequent calls to read or
    /// `skip` will always report end-of-stream rather than producing more
    /// data.
    ///
    /// This function returns the number of bytes skipped, along with a bool
    /// indicating whether the end of the stream was reached. The returned
    /// value will be at most `len`; it may be less.
    pub fn skip(this: InputStream, len: u64) -> Result<(u64, bool), StreamError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 24]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "skip")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_skip")]
                fn wit_import(_: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(len),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok((*((ptr0 + 8) as *const i64) as u64, {
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<u8, bool>(
                            i32::from(*((ptr0 + 16) as *const u8)) as u8
                        )
                    }
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 16) as *const u8)) {
                            0 => false,
                            1 => true,
                            _ => panic!("invalid bool discriminant"),
                        }
                    }
                })),
                1 => Err(StreamError {}),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Skip bytes from a stream, with blocking.
    ///
    /// This is similar to `skip`, except that it blocks until at least one
    /// byte can be consumed.
    pub fn blocking_skip(this: InputStream, len: u64) -> Result<(u64, bool), StreamError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 24]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "blocking-skip")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_blocking-skip")]
                fn wit_import(_: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(len),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok((*((ptr0 + 8) as *const i64) as u64, {
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<u8, bool>(
                            i32::from(*((ptr0 + 16) as *const u8)) as u8
                        )
                    }
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 16) as *const u8)) {
                            0 => false,
                            1 => true,
                            _ => panic!("invalid bool discriminant"),
                        }
                    }
                })),
                1 => Err(StreamError {}),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Create a `pollable` which will resolve once either the specified stream
    /// has bytes available to read or the other end of the stream has been
    /// closed.
    pub fn subscribe_to_input_stream(this: InputStream) -> Pollable {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "subscribe-to-input-stream")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "streams_subscribe-to-input-stream"
                )]
                fn wit_import(_: i32) -> i32;
            }
            let ret = wit_import(wit_bindgen::rt::as_i32(this));
            ret as u32
        }
    }
    #[allow(clippy::all)]
    /// Dispose of the specified `input-stream`, after which it may no longer
    /// be used.
    pub fn drop_input_stream(this: InputStream) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "drop-input-stream")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_drop-input-stream")]
                fn wit_import(_: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this));
        }
    }
    #[allow(clippy::all)]
    /// Write bytes to a stream.
    ///
    /// This function returns a `u64` indicating the number of bytes from
    /// `buf` that were written; it may be less than the full list.
    pub fn write(this: OutputStream, buf: &[u8]) -> Result<u64, StreamError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = buf;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "write")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_write")]
                fn wit_import(_: i32, _: i32, _: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0, len0, ptr1);
            match i32::from(*((ptr1 + 0) as *const u8)) {
                0 => Ok(*((ptr1 + 8) as *const i64) as u64),
                1 => Err(StreamError {}),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Write bytes to a stream, with blocking.
    ///
    /// This is similar to `write`, except that it blocks until at least one
    /// byte can be written.
    pub fn blocking_write(this: OutputStream, buf: &[u8]) -> Result<u64, StreamError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = buf;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "blocking-write")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_blocking-write")]
                fn wit_import(_: i32, _: i32, _: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0, len0, ptr1);
            match i32::from(*((ptr1 + 0) as *const u8)) {
                0 => Ok(*((ptr1 + 8) as *const i64) as u64),
                1 => Err(StreamError {}),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Write multiple zero bytes to a stream.
    ///
    /// This function returns a `u64` indicating the number of zero bytes
    /// that were written; it may be less than `len`.
    pub fn write_zeroes(this: OutputStream, len: u64) -> Result<u64, StreamError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "write-zeroes")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_write-zeroes")]
                fn wit_import(_: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(len),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(*((ptr0 + 8) as *const i64) as u64),
                1 => Err(StreamError {}),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Write multiple zero bytes to a stream, with blocking.
    ///
    /// This is similar to `write-zeroes`, except that it blocks until at least
    /// one byte can be written.
    pub fn blocking_write_zeroes(this: OutputStream, len: u64) -> Result<u64, StreamError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "blocking-write-zeroes")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "streams_blocking-write-zeroes"
                )]
                fn wit_import(_: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(len),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(*((ptr0 + 8) as *const i64) as u64),
                1 => Err(StreamError {}),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Read from one stream and write to another.
    ///
    /// This function returns the number of bytes transferred; it may be less
    /// than `len`.
    ///
    /// Unlike other I/O functions, this function blocks until all the data
    /// read from the input stream has been written to the output stream.
    pub fn splice(
        this: OutputStream,
        src: InputStream,
        len: u64,
    ) -> Result<(u64, bool), StreamError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 24]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "splice")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_splice")]
                fn wit_import(_: i32, _: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i32(src),
                wit_bindgen::rt::as_i64(len),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok((*((ptr0 + 8) as *const i64) as u64, {
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<u8, bool>(
                            i32::from(*((ptr0 + 16) as *const u8)) as u8
                        )
                    }
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 16) as *const u8)) {
                            0 => false,
                            1 => true,
                            _ => panic!("invalid bool discriminant"),
                        }
                    }
                })),
                1 => Err(StreamError {}),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Read from one stream and write to another, with blocking.
    ///
    /// This is similar to `splice`, except that it blocks until at least
    /// one byte can be read.
    pub fn blocking_splice(
        this: OutputStream,
        src: InputStream,
        len: u64,
    ) -> Result<(u64, bool), StreamError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 24]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "blocking-splice")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_blocking-splice")]
                fn wit_import(_: i32, _: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i32(src),
                wit_bindgen::rt::as_i64(len),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok((*((ptr0 + 8) as *const i64) as u64, {
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<u8, bool>(
                            i32::from(*((ptr0 + 16) as *const u8)) as u8
                        )
                    }
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 16) as *const u8)) {
                            0 => false,
                            1 => true,
                            _ => panic!("invalid bool discriminant"),
                        }
                    }
                })),
                1 => Err(StreamError {}),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Forward the entire contents of an input stream to an output stream.
    ///
    /// This function repeatedly reads from the input stream and writes
    /// the data to the output stream, until the end of the input stream
    /// is reached, or an error is encountered.
    ///
    /// Unlike other I/O functions, this function blocks until the end
    /// of the input stream is seen and all the data has been written to
    /// the output stream.
    ///
    /// This function returns the number of bytes transferred.
    pub fn forward(this: OutputStream, src: InputStream) -> Result<u64, StreamError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "forward")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_forward")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i32(src),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(*((ptr0 + 8) as *const i64) as u64),
                1 => Err(StreamError {}),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Create a `pollable` which will resolve once either the specified stream
    /// is ready to accept bytes or the other end of the stream has been closed.
    pub fn subscribe_to_output_stream(this: OutputStream) -> Pollable {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "subscribe-to-output-stream")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "streams_subscribe-to-output-stream"
                )]
                fn wit_import(_: i32) -> i32;
            }
            let ret = wit_import(wit_bindgen::rt::as_i32(this));
            ret as u32
        }
    }
    #[allow(clippy::all)]
    /// Dispose of the specified `output-stream`, after which it may no longer
    /// be used.
    pub fn drop_output_stream(this: OutputStream) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "streams")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "drop-output-stream")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "streams_drop-output-stream")]
                fn wit_import(_: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this));
        }
    }
}

#[allow(clippy::all)]
pub mod filesystem {
    pub type InputStream = super::streams::InputStream;
    pub type OutputStream = super::streams::OutputStream;
    pub type Datetime = super::wall_clock::Datetime;
    wit_bindgen::bitflags::bitflags! {
      /// Flags determining the method of how paths are resolved.
      pub struct PathFlags: u8 {
        /// As long as the resolved path corresponds to a symbolic link, it is
        /// expanded.
        const SYMLINK_FOLLOW = 1 << 0;
      }
    }
    impl PathFlags {
        /// Convert from a raw integer, preserving any unknown bits. See
        /// <https://github.com/bitflags/bitflags/issues/263#issuecomment-957088321>
        pub fn from_bits_preserve(bits: u8) -> Self {
            Self { bits }
        }
    }
    wit_bindgen::bitflags::bitflags! {
      /// Open flags used by `open-at`.
      pub struct OpenFlags: u8 {
        /// Create file if it does not exist, similar to `O_CREAT` in POSIX.
        const CREATE = 1 << 0;
        /// Fail if not a directory, similar to `O_DIRECTORY` in POSIX.
        const DIRECTORY = 1 << 1;
        /// Fail if file already exists, similar to `O_EXCL` in POSIX.
        const EXCLUSIVE = 1 << 2;
        /// Truncate file to size 0, similar to `O_TRUNC` in POSIX.
        const TRUNCATE = 1 << 3;
      }
    }
    impl OpenFlags {
        /// Convert from a raw integer, preserving any unknown bits. See
        /// <https://github.com/bitflags/bitflags/issues/263#issuecomment-957088321>
        pub fn from_bits_preserve(bits: u8) -> Self {
            Self { bits }
        }
    }
    wit_bindgen::bitflags::bitflags! {
      /// Permissions mode used by `open-at`, `change-file-permissions-at`, and
      /// similar.
      pub struct Modes: u8 {
        /// True if the resource is considered readable by the containing
        /// filesystem.
        const READABLE = 1 << 0;
        /// True if the resource is considered writeable by the containing
        /// filesystem.
        const WRITEABLE = 1 << 1;
        /// True if the resource is considered executable by the containing
        /// filesystem. This does not apply to directories.
        const EXECUTABLE = 1 << 2;
      }
    }
    impl Modes {
        /// Convert from a raw integer, preserving any unknown bits. See
        /// <https://github.com/bitflags/bitflags/issues/263#issuecomment-957088321>
        pub fn from_bits_preserve(bits: u8) -> Self {
            Self { bits }
        }
    }
    /// Number of hard links to an inode.
    pub type LinkCount = u64;
    /// Filesystem object serial number that is unique within its file system.
    pub type Inode = u64;
    /// File size or length of a region within a file.
    pub type Filesize = u64;
    /// Error codes returned by functions, similar to `errno` in POSIX.
    /// Not all of these error codes are returned by the functions provided by this
    /// API; some are used in higher-level library layers, and others are provided
    /// merely for alignment with POSIX.
    #[repr(u8)]
    #[derive(Clone, Copy, PartialEq, Eq)]
    pub enum ErrorCode {
        /// Permission denied, similar to `EACCES` in POSIX.
        Access,
        /// Resource unavailable, or operation would block, similar to `EAGAIN` and `EWOULDBLOCK` in POSIX.
        WouldBlock,
        /// Connection already in progress, similar to `EALREADY` in POSIX.
        Already,
        /// Bad descriptor, similar to `EBADF` in POSIX.
        BadDescriptor,
        /// Device or resource busy, similar to `EBUSY` in POSIX.
        Busy,
        /// Resource deadlock would occur, similar to `EDEADLK` in POSIX.
        Deadlock,
        /// Storage quota exceeded, similar to `EDQUOT` in POSIX.
        Quota,
        /// File exists, similar to `EEXIST` in POSIX.
        Exist,
        /// File too large, similar to `EFBIG` in POSIX.
        FileTooLarge,
        /// Illegal byte sequence, similar to `EILSEQ` in POSIX.
        IllegalByteSequence,
        /// Operation in progress, similar to `EINPROGRESS` in POSIX.
        InProgress,
        /// Interrupted function, similar to `EINTR` in POSIX.
        Interrupted,
        /// Invalid argument, similar to `EINVAL` in POSIX.
        Invalid,
        /// I/O error, similar to `EIO` in POSIX.
        Io,
        /// Is a directory, similar to `EISDIR` in POSIX.
        IsDirectory,
        /// Too many levels of symbolic links, similar to `ELOOP` in POSIX.
        Loop,
        /// Too many links, similar to `EMLINK` in POSIX.
        TooManyLinks,
        /// Message too large, similar to `EMSGSIZE` in POSIX.
        MessageSize,
        /// Filename too long, similar to `ENAMETOOLONG` in POSIX.
        NameTooLong,
        /// No such device, similar to `ENODEV` in POSIX.
        NoDevice,
        /// No such file or directory, similar to `ENOENT` in POSIX.
        NoEntry,
        /// No locks available, similar to `ENOLCK` in POSIX.
        NoLock,
        /// Not enough space, similar to `ENOMEM` in POSIX.
        InsufficientMemory,
        /// No space left on device, similar to `ENOSPC` in POSIX.
        InsufficientSpace,
        /// Not a directory or a symbolic link to a directory, similar to `ENOTDIR` in POSIX.
        NotDirectory,
        /// Directory not empty, similar to `ENOTEMPTY` in POSIX.
        NotEmpty,
        /// State not recoverable, similar to `ENOTRECOVERABLE` in POSIX.
        NotRecoverable,
        /// Not supported, similar to `ENOTSUP` and `ENOSYS` in POSIX.
        Unsupported,
        /// Inappropriate I/O control operation, similar to `ENOTTY` in POSIX.
        NoTty,
        /// No such device or address, similar to `ENXIO` in POSIX.
        NoSuchDevice,
        /// Value too large to be stored in data type, similar to `EOVERFLOW` in POSIX.
        Overflow,
        /// Operation not permitted, similar to `EPERM` in POSIX.
        NotPermitted,
        /// Broken pipe, similar to `EPIPE` in POSIX.
        Pipe,
        /// Read-only file system, similar to `EROFS` in POSIX.
        ReadOnly,
        /// Invalid seek, similar to `ESPIPE` in POSIX.
        InvalidSeek,
        /// Text file busy, similar to `ETXTBSY` in POSIX.
        TextFileBusy,
        /// Cross-device link, similar to `EXDEV` in POSIX.
        CrossDevice,
    }
    impl ErrorCode {
        pub fn name(&self) -> &'static str {
            match self {
                ErrorCode::Access => "access",
                ErrorCode::WouldBlock => "would-block",
                ErrorCode::Already => "already",
                ErrorCode::BadDescriptor => "bad-descriptor",
                ErrorCode::Busy => "busy",
                ErrorCode::Deadlock => "deadlock",
                ErrorCode::Quota => "quota",
                ErrorCode::Exist => "exist",
                ErrorCode::FileTooLarge => "file-too-large",
                ErrorCode::IllegalByteSequence => "illegal-byte-sequence",
                ErrorCode::InProgress => "in-progress",
                ErrorCode::Interrupted => "interrupted",
                ErrorCode::Invalid => "invalid",
                ErrorCode::Io => "io",
                ErrorCode::IsDirectory => "is-directory",
                ErrorCode::Loop => "loop",
                ErrorCode::TooManyLinks => "too-many-links",
                ErrorCode::MessageSize => "message-size",
                ErrorCode::NameTooLong => "name-too-long",
                ErrorCode::NoDevice => "no-device",
                ErrorCode::NoEntry => "no-entry",
                ErrorCode::NoLock => "no-lock",
                ErrorCode::InsufficientMemory => "insufficient-memory",
                ErrorCode::InsufficientSpace => "insufficient-space",
                ErrorCode::NotDirectory => "not-directory",
                ErrorCode::NotEmpty => "not-empty",
                ErrorCode::NotRecoverable => "not-recoverable",
                ErrorCode::Unsupported => "unsupported",
                ErrorCode::NoTty => "no-tty",
                ErrorCode::NoSuchDevice => "no-such-device",
                ErrorCode::Overflow => "overflow",
                ErrorCode::NotPermitted => "not-permitted",
                ErrorCode::Pipe => "pipe",
                ErrorCode::ReadOnly => "read-only",
                ErrorCode::InvalidSeek => "invalid-seek",
                ErrorCode::TextFileBusy => "text-file-busy",
                ErrorCode::CrossDevice => "cross-device",
            }
        }
        pub fn message(&self) -> &'static str {
            match self {
        ErrorCode::Access => "Permission denied, similar to `EACCES` in POSIX.",
        ErrorCode::WouldBlock => "Resource unavailable, or operation would block, similar to `EAGAIN` and `EWOULDBLOCK` in POSIX.",
        ErrorCode::Already => "Connection already in progress, similar to `EALREADY` in POSIX.",
        ErrorCode::BadDescriptor => "Bad descriptor, similar to `EBADF` in POSIX.",
        ErrorCode::Busy => "Device or resource busy, similar to `EBUSY` in POSIX.",
        ErrorCode::Deadlock => "Resource deadlock would occur, similar to `EDEADLK` in POSIX.",
        ErrorCode::Quota => "Storage quota exceeded, similar to `EDQUOT` in POSIX.",
        ErrorCode::Exist => "File exists, similar to `EEXIST` in POSIX.",
        ErrorCode::FileTooLarge => "File too large, similar to `EFBIG` in POSIX.",
        ErrorCode::IllegalByteSequence => "Illegal byte sequence, similar to `EILSEQ` in POSIX.",
        ErrorCode::InProgress => "Operation in progress, similar to `EINPROGRESS` in POSIX.",
        ErrorCode::Interrupted => "Interrupted function, similar to `EINTR` in POSIX.",
        ErrorCode::Invalid => "Invalid argument, similar to `EINVAL` in POSIX.",
        ErrorCode::Io => "I/O error, similar to `EIO` in POSIX.",
        ErrorCode::IsDirectory => "Is a directory, similar to `EISDIR` in POSIX.",
        ErrorCode::Loop => "Too many levels of symbolic links, similar to `ELOOP` in POSIX.",
        ErrorCode::TooManyLinks => "Too many links, similar to `EMLINK` in POSIX.",
        ErrorCode::MessageSize => "Message too large, similar to `EMSGSIZE` in POSIX.",
        ErrorCode::NameTooLong => "Filename too long, similar to `ENAMETOOLONG` in POSIX.",
        ErrorCode::NoDevice => "No such device, similar to `ENODEV` in POSIX.",
        ErrorCode::NoEntry => "No such file or directory, similar to `ENOENT` in POSIX.",
        ErrorCode::NoLock => "No locks available, similar to `ENOLCK` in POSIX.",
        ErrorCode::InsufficientMemory => "Not enough space, similar to `ENOMEM` in POSIX.",
        ErrorCode::InsufficientSpace => "No space left on device, similar to `ENOSPC` in POSIX.",
        ErrorCode::NotDirectory => "Not a directory or a symbolic link to a directory, similar to `ENOTDIR` in POSIX.",
        ErrorCode::NotEmpty => "Directory not empty, similar to `ENOTEMPTY` in POSIX.",
        ErrorCode::NotRecoverable => "State not recoverable, similar to `ENOTRECOVERABLE` in POSIX.",
        ErrorCode::Unsupported => "Not supported, similar to `ENOTSUP` and `ENOSYS` in POSIX.",
        ErrorCode::NoTty => "Inappropriate I/O control operation, similar to `ENOTTY` in POSIX.",
        ErrorCode::NoSuchDevice => "No such device or address, similar to `ENXIO` in POSIX.",
        ErrorCode::Overflow => "Value too large to be stored in data type, similar to `EOVERFLOW` in POSIX.",
        ErrorCode::NotPermitted => "Operation not permitted, similar to `EPERM` in POSIX.",
        ErrorCode::Pipe => "Broken pipe, similar to `EPIPE` in POSIX.",
        ErrorCode::ReadOnly => "Read-only file system, similar to `EROFS` in POSIX.",
        ErrorCode::InvalidSeek => "Invalid seek, similar to `ESPIPE` in POSIX.",
        ErrorCode::TextFileBusy => "Text file busy, similar to `ETXTBSY` in POSIX.",
        ErrorCode::CrossDevice => "Cross-device link, similar to `EXDEV` in POSIX.",
      }
        }
    }
    impl core::fmt::Debug for ErrorCode {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("ErrorCode")
                .field("code", &(*self as i32))
                .field("name", &self.name())
                .field("message", &self.message())
                .finish()
        }
    }
    impl core::fmt::Display for ErrorCode {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} (error {})", self.name(), *self as i32)
        }
    }

    impl std::error::Error for ErrorCode {}
    /// A stream of directory entries.
    ///
    /// This [represents a stream of `dir-entry`](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Streams).
    pub type DirectoryEntryStream = u32;
    /// Identifier for a device containing a file system. Can be used in
    /// combination with `inode` to uniquely identify a file or directory in
    /// the filesystem.
    pub type Device = u64;
    /// The type of a filesystem object referenced by a descriptor.
    ///
    /// Note: This was called `filetype` in earlier versions of WASI.
    #[repr(u8)]
    #[derive(Clone, Copy, PartialEq, Eq)]
    pub enum DescriptorType {
        /// The type of the descriptor or file is unknown or is different from
        /// any of the other types specified.
        Unknown,
        /// The descriptor refers to a block device inode.
        BlockDevice,
        /// The descriptor refers to a character device inode.
        CharacterDevice,
        /// The descriptor refers to a directory inode.
        Directory,
        /// The descriptor refers to a named pipe.
        Fifo,
        /// The file refers to a symbolic link inode.
        SymbolicLink,
        /// The descriptor refers to a regular file inode.
        RegularFile,
        /// The descriptor refers to a socket.
        Socket,
    }
    impl core::fmt::Debug for DescriptorType {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            match self {
                DescriptorType::Unknown => f.debug_tuple("DescriptorType::Unknown").finish(),
                DescriptorType::BlockDevice => {
                    f.debug_tuple("DescriptorType::BlockDevice").finish()
                }
                DescriptorType::CharacterDevice => {
                    f.debug_tuple("DescriptorType::CharacterDevice").finish()
                }
                DescriptorType::Directory => f.debug_tuple("DescriptorType::Directory").finish(),
                DescriptorType::Fifo => f.debug_tuple("DescriptorType::Fifo").finish(),
                DescriptorType::SymbolicLink => {
                    f.debug_tuple("DescriptorType::SymbolicLink").finish()
                }
                DescriptorType::RegularFile => {
                    f.debug_tuple("DescriptorType::RegularFile").finish()
                }
                DescriptorType::Socket => f.debug_tuple("DescriptorType::Socket").finish(),
            }
        }
    }
    /// A directory entry.
    #[derive(Clone)]
    pub struct DirectoryEntry {
        /// The serial number of the object referred to by this directory entry.
        /// May be none if the inode value is not known.
        ///
        /// When this is none, libc implementations might do an extra `stat-at`
        /// call to retrieve the inode number to fill their `d_ino` fields, so
        /// implementations which can set this to a non-none value should do so.
        pub inode: Option<Inode>,
        /// The type of the file referred to by this directory entry.
        pub type_: DescriptorType,
        /// The name of the object.
        pub name: wit_bindgen::rt::string::String,
    }
    impl core::fmt::Debug for DirectoryEntry {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("DirectoryEntry")
                .field("inode", &self.inode)
                .field("type", &self.type_)
                .field("name", &self.name)
                .finish()
        }
    }
    wit_bindgen::bitflags::bitflags! {
      /// Descriptor flags.
      ///
      /// Note: This was called `fdflags` in earlier versions of WASI.
      pub struct DescriptorFlags: u8 {
        /// Read mode: Data can be read.
        const READ = 1 << 0;
        /// Write mode: Data can be written to.
        const WRITE = 1 << 1;
        /// Requests non-blocking operation.
        ///
        /// When this flag is enabled, functions may return immediately with an
        /// `error-code::would-block` error code in situations where they would
        /// otherwise block. However, this non-blocking behavior is not
        /// required. Implementations are permitted to ignore this flag and
        /// block. This is similar to `O_NONBLOCK` in POSIX.
        const NON_BLOCKING = 1 << 2;
        /// Request that writes be performed according to synchronized I/O file
        /// integrity completion. The data stored in the file and the file's
        /// metadata are synchronized. This is similar to `O_SYNC` in POSIX.
        ///
        /// The precise semantics of this operation have not yet been defined for
        /// WASI. At this time, it should be interpreted as a request, and not a
        /// requirement.
        const FILE_INTEGRITY_SYNC = 1 << 3;
        /// Request that writes be performed according to synchronized I/O data
        /// integrity completion. Only the data stored in the file is
        /// synchronized. This is similar to `O_DSYNC` in POSIX.
        ///
        /// The precise semantics of this operation have not yet been defined for
        /// WASI. At this time, it should be interpreted as a request, and not a
        /// requirement.
        const DATA_INTEGRITY_SYNC = 1 << 4;
        /// Requests that reads be performed at the same level of integrety
        /// requested for writes. This is similar to `O_RSYNC` in POSIX.
        ///
        /// The precise semantics of this operation have not yet been defined for
        /// WASI. At this time, it should be interpreted as a request, and not a
        /// requirement.
        const REQUESTED_WRITE_SYNC = 1 << 5;
        /// Mutating directories mode: Directory contents may be mutated.
        ///
        /// When this flag is unset on a descriptor, operations using the
        /// descriptor which would create, rename, delete, modify the data or
        /// metadata of filesystem objects, or obtain another handle which
        /// would permit any of those, shall fail with `error-code::read-only` if
        /// they would otherwise succeed.
        ///
        /// This may only be set on directories.
        const MUTATE_DIRECTORY = 1 << 6;
      }
    }
    impl DescriptorFlags {
        /// Convert from a raw integer, preserving any unknown bits. See
        /// <https://github.com/bitflags/bitflags/issues/263#issuecomment-957088321>
        pub fn from_bits_preserve(bits: u8) -> Self {
            Self { bits }
        }
    }
    /// A descriptor is a reference to a filesystem object, which may be a file,
    /// directory, named pipe, special file, or other object on which filesystem
    /// calls may be made.
    ///
    /// This [represents a resource](https://github.com/WebAssembly/WASI/blob/main/docs/WitInWasi.md#Resources).
    pub type Descriptor = u32;
    /// When setting a timestamp, this gives the value to set it to.
    #[derive(Clone, Copy)]
    pub enum NewTimestamp {
        /// Leave the timestamp set to its previous value.
        NoChange,
        /// Set the timestamp to the current time of the system clock associated
        /// with the filesystem.
        Now,
        /// Set the timestamp to the given value.
        Timestamp(Datetime),
    }
    impl core::fmt::Debug for NewTimestamp {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            match self {
                NewTimestamp::NoChange => f.debug_tuple("NewTimestamp::NoChange").finish(),
                NewTimestamp::Now => f.debug_tuple("NewTimestamp::Now").finish(),
                NewTimestamp::Timestamp(e) => {
                    f.debug_tuple("NewTimestamp::Timestamp").field(e).finish()
                }
            }
        }
    }
    /// File attributes.
    ///
    /// Note: This was called `filestat` in earlier versions of WASI.
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct DescriptorStat {
        /// Device ID of device containing the file.
        pub device: Device,
        /// File serial number.
        pub inode: Inode,
        /// File type.
        pub type_: DescriptorType,
        /// Number of hard links to the file.
        pub link_count: LinkCount,
        /// For regular files, the file size in bytes. For symbolic links, the
        /// length in bytes of the pathname contained in the symbolic link.
        pub size: Filesize,
        /// Last data access timestamp.
        pub data_access_timestamp: Datetime,
        /// Last data modification timestamp.
        pub data_modification_timestamp: Datetime,
        /// Last file status change timestamp.
        pub status_change_timestamp: Datetime,
    }
    impl core::fmt::Debug for DescriptorStat {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("DescriptorStat")
                .field("device", &self.device)
                .field("inode", &self.inode)
                .field("type", &self.type_)
                .field("link-count", &self.link_count)
                .field("size", &self.size)
                .field("data-access-timestamp", &self.data_access_timestamp)
                .field(
                    "data-modification-timestamp",
                    &self.data_modification_timestamp,
                )
                .field("status-change-timestamp", &self.status_change_timestamp)
                .finish()
        }
    }
    /// File or memory access pattern advisory information.
    #[repr(u8)]
    #[derive(Clone, Copy, PartialEq, Eq)]
    pub enum Advice {
        /// The application has no advice to give on its behavior with respect
        /// to the specified data.
        Normal,
        /// The application expects to access the specified data sequentially
        /// from lower offsets to higher offsets.
        Sequential,
        /// The application expects to access the specified data in a random
        /// order.
        Random,
        /// The application expects to access the specified data in the near
        /// future.
        WillNeed,
        /// The application expects that it will not access the specified data
        /// in the near future.
        DontNeed,
        /// The application expects to access the specified data once and then
        /// not reuse it thereafter.
        NoReuse,
    }
    impl core::fmt::Debug for Advice {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            match self {
                Advice::Normal => f.debug_tuple("Advice::Normal").finish(),
                Advice::Sequential => f.debug_tuple("Advice::Sequential").finish(),
                Advice::Random => f.debug_tuple("Advice::Random").finish(),
                Advice::WillNeed => f.debug_tuple("Advice::WillNeed").finish(),
                Advice::DontNeed => f.debug_tuple("Advice::DontNeed").finish(),
                Advice::NoReuse => f.debug_tuple("Advice::NoReuse").finish(),
            }
        }
    }
    #[allow(clippy::all)]
    /// Return a stream for reading from a file.
    ///
    /// Multiple read, write, and append streams may be active on the same open
    /// file and they do not interfere with each other.
    ///
    /// Note: This allows using `read-stream`, which is similar to `read` in POSIX.
    pub fn read_via_stream(this: Descriptor, offset: Filesize) -> InputStream {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "read-via-stream")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_read-via-stream")]
                fn wit_import(_: i32, _: i64) -> i32;
            }
            let ret = wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(offset),
            );
            ret as u32
        }
    }
    #[allow(clippy::all)]
    /// Return a stream for writing to a file.
    ///
    /// Note: This allows using `write-stream`, which is similar to `write` in
    /// POSIX.
    pub fn write_via_stream(this: Descriptor, offset: Filesize) -> OutputStream {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "write-via-stream")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_write-via-stream")]
                fn wit_import(_: i32, _: i64) -> i32;
            }
            let ret = wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(offset),
            );
            ret as u32
        }
    }
    #[allow(clippy::all)]
    /// Return a stream for appending to a file.
    ///
    /// Note: This allows using `write-stream`, which is similar to `write` with
    /// `O_APPEND` in in POSIX.
    pub fn append_via_stream(this: Descriptor) -> OutputStream {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "append-via-stream")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "filesystem_append-via-stream"
                )]
                fn wit_import(_: i32) -> i32;
            }
            let ret = wit_import(wit_bindgen::rt::as_i32(this));
            ret as u32
        }
    }
    #[allow(clippy::all)]
    /// Provide file advisory information on a descriptor.
    ///
    /// This is similar to `posix_fadvise` in POSIX.
    pub fn advise(
        this: Descriptor,
        offset: Filesize,
        length: Filesize,
        advice: Advice,
    ) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "advise")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_advise")]
                fn wit_import(_: i32, _: i64, _: i64, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(offset),
                wit_bindgen::rt::as_i64(length),
                match advice {
                    Advice::Normal => 0,
                    Advice::Sequential => 1,
                    Advice::Random => 2,
                    Advice::WillNeed => 3,
                    Advice::DontNeed => 4,
                    Advice::NoReuse => 5,
                },
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Synchronize the data of a file to disk.
    ///
    /// This function succeeds with no effect if the file descriptor is not
    /// opened for writing.
    ///
    /// Note: This is similar to `fdatasync` in POSIX.
    pub fn sync_data(this: Descriptor) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "sync-data")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_sync-data")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Get flags associated with a descriptor.
    ///
    /// Note: This returns similar flags to `fcntl(fd, F_GETFL)` in POSIX.
    ///
    /// Note: This returns the value that was the `fs_flags` value returned
    /// from `fdstat_get` in earlier versions of WASI.
    pub fn get_flags(this: Descriptor) -> Result<DescriptorFlags, ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "get-flags")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_get-flags")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(DescriptorFlags::empty()
                    | DescriptorFlags::from_bits_preserve(
                        ((i32::from(*((ptr0 + 1) as *const u8)) as u8) << 0) as _,
                    )),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Get the dynamic type of a descriptor.
    ///
    /// Note: This returns the same value as the `type` field of the `fd-stat`
    /// returned by `stat`, `stat-at` and similar.
    ///
    /// Note: This returns similar flags to the `st_mode & S_IFMT` value provided
    /// by `fstat` in POSIX.
    ///
    /// Note: This returns the value that was the `fs_filetype` value returned
    /// from `fdstat_get` in earlier versions of WASI.
    pub fn get_type(this: Descriptor) -> Result<DescriptorType, ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "get-type")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_get-type")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => DescriptorType::Unknown,
                            1 => DescriptorType::BlockDevice,
                            2 => DescriptorType::CharacterDevice,
                            3 => DescriptorType::Directory,
                            4 => DescriptorType::Fifo,
                            5 => DescriptorType::SymbolicLink,
                            6 => DescriptorType::RegularFile,
                            7 => DescriptorType::Socket,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, DescriptorType>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        ) as u8)
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Set status flags associated with a descriptor.
    ///
    /// This function may only change the `non-blocking` flag.
    ///
    /// Note: This is similar to `fcntl(fd, F_SETFL, flags)` in POSIX.
    ///
    /// Note: This was called `fd_fdstat_set_flags` in earlier versions of WASI.
    pub fn set_flags(this: Descriptor, flags: DescriptorFlags) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let flags0 = flags;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-flags")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_set-flags")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                (flags0.bits() >> 0) as i32,
                ptr1,
            );
            match i32::from(*((ptr1 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr1 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr1 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Adjust the size of an open file. If this increases the file's size, the
    /// extra bytes are filled with zeros.
    ///
    /// Note: This was called `fd_filestat_set_size` in earlier versions of WASI.
    pub fn set_size(this: Descriptor, size: Filesize) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-size")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_set-size")]
                fn wit_import(_: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(size),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Adjust the timestamps of an open file or directory.
    ///
    /// Note: This is similar to `futimens` in POSIX.
    ///
    /// Note: This was called `fd_filestat_set_times` in earlier versions of WASI.
    pub fn set_times(
        this: Descriptor,
        data_access_timestamp: NewTimestamp,
        data_modification_timestamp: NewTimestamp,
    ) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let (result1_0, result1_1, result1_2) = match data_access_timestamp {
                NewTimestamp::NoChange => (0i32, 0i64, 0i32),
                NewTimestamp::Now => (1i32, 0i64, 0i32),
                NewTimestamp::Timestamp(e) => {
                    let super::wall_clock::Datetime {
                        seconds: seconds0,
                        nanoseconds: nanoseconds0,
                    } = e;

                    (
                        2i32,
                        wit_bindgen::rt::as_i64(seconds0),
                        wit_bindgen::rt::as_i32(nanoseconds0),
                    )
                }
            };
            let (result3_0, result3_1, result3_2) = match data_modification_timestamp {
                NewTimestamp::NoChange => (0i32, 0i64, 0i32),
                NewTimestamp::Now => (1i32, 0i64, 0i32),
                NewTimestamp::Timestamp(e) => {
                    let super::wall_clock::Datetime {
                        seconds: seconds2,
                        nanoseconds: nanoseconds2,
                    } = e;

                    (
                        2i32,
                        wit_bindgen::rt::as_i64(seconds2),
                        wit_bindgen::rt::as_i32(nanoseconds2),
                    )
                }
            };
            let ptr4 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-times")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_set-times")]
                fn wit_import(_: i32, _: i32, _: i64, _: i32, _: i32, _: i64, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                result1_0,
                result1_1,
                result1_2,
                result3_0,
                result3_1,
                result3_2,
                ptr4,
            );
            match i32::from(*((ptr4 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr4 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr4 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Read from a descriptor, without using and updating the descriptor's offset.
    ///
    /// This function returns a list of bytes containing the data that was
    /// read, along with a bool which, when true, indicates that the end of the
    /// file was reached. The returned list will contain up to `length` bytes; it
    /// may return fewer than requested, if the end of the file is reached or
    /// if the I/O operation is interrupted.
    ///
    /// In the future, this may change to return a `stream<u8, error-code>`.
    ///
    /// Note: This is similar to `pread` in POSIX.
    pub fn read(
        this: Descriptor,
        length: Filesize,
        offset: Filesize,
    ) -> Result<(wit_bindgen::rt::vec::Vec<u8>, bool), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "read")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_read")]
                fn wit_import(_: i32, _: i64, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(length),
                wit_bindgen::rt::as_i64(offset),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    let len1 = *((ptr0 + 8) as *const i32) as usize;

                    (
                        Vec::from_raw_parts(*((ptr0 + 4) as *const i32) as *mut _, len1, len1),
                        {
                            #[cfg(not(debug_assertions))]
                            {
                                core::mem::transmute::<u8, bool>(i32::from(
                                    *((ptr0 + 12) as *const u8),
                                )
                                    as u8)
                            }
                            #[cfg(debug_assertions)]
                            {
                                match i32::from(*((ptr0 + 12) as *const u8)) {
                                    0 => false,
                                    1 => true,
                                    _ => panic!("invalid bool discriminant"),
                                }
                            }
                        },
                    )
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 4) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Write to a descriptor, without using and updating the descriptor's offset.
    ///
    /// It is valid to write past the end of a file; the file is extended to the
    /// extent of the write, with bytes between the previous end and the start of
    /// the write set to zero.
    ///
    /// In the future, this may change to take a `stream<u8, error-code>`.
    ///
    /// Note: This is similar to `pwrite` in POSIX.
    pub fn write(this: Descriptor, buffer: &[u8], offset: Filesize) -> Result<Filesize, ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = buffer;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "write")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_write")]
                fn wit_import(_: i32, _: i32, _: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                ptr0,
                len0,
                wit_bindgen::rt::as_i64(offset),
                ptr1,
            );
            match i32::from(*((ptr1 + 0) as *const u8)) {
                0 => Ok(*((ptr1 + 8) as *const i64) as u64),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr1 + 8) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr1 + 8) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Read directory entries from a directory.
    ///
    /// On filesystems where directories contain entries referring to themselves
    /// and their parents, often named `.` and `..` respectively, these entries
    /// are omitted.
    ///
    /// This always returns a new stream which starts at the beginning of the
    /// directory. Multiple streams may be active on the same directory, and they
    /// do not interfere with each other.
    pub fn read_directory(this: Descriptor) -> Result<DirectoryEntryStream, ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 8]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "read-directory")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_read-directory")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(*((ptr0 + 4) as *const i32) as u32),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 4) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Synchronize the data and metadata of a file to disk.
    ///
    /// This function succeeds with no effect if the file descriptor is not
    /// opened for writing.
    ///
    /// Note: This is similar to `fsync` in POSIX.
    pub fn sync(this: Descriptor) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "sync")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_sync")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Create a directory.
    ///
    /// Note: This is similar to `mkdirat` in POSIX.
    pub fn create_directory_at(this: Descriptor, path: &str) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = path;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "create-directory-at")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "filesystem_create-directory-at"
                )]
                fn wit_import(_: i32, _: i32, _: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0, len0, ptr1);
            match i32::from(*((ptr1 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr1 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr1 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Return the attributes of an open file or directory.
    ///
    /// Note: This is similar to `fstat` in POSIX.
    ///
    /// Note: This was called `fd_filestat_get` in earlier versions of WASI.
    pub fn stat(this: Descriptor) -> Result<DescriptorStat, ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 96]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "stat")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_stat")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(DescriptorStat {
                    device: *((ptr0 + 8) as *const i64) as u64,
                    inode: *((ptr0 + 16) as *const i64) as u64,
                    type_: {
                        #[cfg(debug_assertions)]
                        {
                            match i32::from(*((ptr0 + 24) as *const u8)) {
                                0 => DescriptorType::Unknown,
                                1 => DescriptorType::BlockDevice,
                                2 => DescriptorType::CharacterDevice,
                                3 => DescriptorType::Directory,
                                4 => DescriptorType::Fifo,
                                5 => DescriptorType::SymbolicLink,
                                6 => DescriptorType::RegularFile,
                                7 => DescriptorType::Socket,
                                _ => panic!("invalid enum discriminant"),
                            }
                        }
                        #[cfg(not(debug_assertions))]
                        {
                            core::mem::transmute::<_, DescriptorType>(i32::from(
                                *((ptr0 + 24) as *const u8),
                            )
                                as u8)
                        }
                    },
                    link_count: *((ptr0 + 32) as *const i64) as u64,
                    size: *((ptr0 + 40) as *const i64) as u64,
                    data_access_timestamp: super::wall_clock::Datetime {
                        seconds: *((ptr0 + 48) as *const i64) as u64,
                        nanoseconds: *((ptr0 + 56) as *const i32) as u32,
                    },
                    data_modification_timestamp: super::wall_clock::Datetime {
                        seconds: *((ptr0 + 64) as *const i64) as u64,
                        nanoseconds: *((ptr0 + 72) as *const i32) as u32,
                    },
                    status_change_timestamp: super::wall_clock::Datetime {
                        seconds: *((ptr0 + 80) as *const i64) as u64,
                        nanoseconds: *((ptr0 + 88) as *const i32) as u32,
                    },
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 8) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 8) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Return the attributes of a file or directory.
    ///
    /// Note: This is similar to `fstatat` in POSIX.
    ///
    /// Note: This was called `path_filestat_get` in earlier versions of WASI.
    pub fn stat_at(
        this: Descriptor,
        path_flags: PathFlags,
        path: &str,
    ) -> Result<DescriptorStat, ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 96]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let flags0 = path_flags;
            let vec1 = path;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            let ptr2 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "stat-at")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_stat-at")]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                (flags0.bits() >> 0) as i32,
                ptr1,
                len1,
                ptr2,
            );
            match i32::from(*((ptr2 + 0) as *const u8)) {
                0 => Ok(DescriptorStat {
                    device: *((ptr2 + 8) as *const i64) as u64,
                    inode: *((ptr2 + 16) as *const i64) as u64,
                    type_: {
                        #[cfg(debug_assertions)]
                        {
                            match i32::from(*((ptr2 + 24) as *const u8)) {
                                0 => DescriptorType::Unknown,
                                1 => DescriptorType::BlockDevice,
                                2 => DescriptorType::CharacterDevice,
                                3 => DescriptorType::Directory,
                                4 => DescriptorType::Fifo,
                                5 => DescriptorType::SymbolicLink,
                                6 => DescriptorType::RegularFile,
                                7 => DescriptorType::Socket,
                                _ => panic!("invalid enum discriminant"),
                            }
                        }
                        #[cfg(not(debug_assertions))]
                        {
                            core::mem::transmute::<_, DescriptorType>(i32::from(
                                *((ptr2 + 24) as *const u8),
                            )
                                as u8)
                        }
                    },
                    link_count: *((ptr2 + 32) as *const i64) as u64,
                    size: *((ptr2 + 40) as *const i64) as u64,
                    data_access_timestamp: super::wall_clock::Datetime {
                        seconds: *((ptr2 + 48) as *const i64) as u64,
                        nanoseconds: *((ptr2 + 56) as *const i32) as u32,
                    },
                    data_modification_timestamp: super::wall_clock::Datetime {
                        seconds: *((ptr2 + 64) as *const i64) as u64,
                        nanoseconds: *((ptr2 + 72) as *const i32) as u32,
                    },
                    status_change_timestamp: super::wall_clock::Datetime {
                        seconds: *((ptr2 + 80) as *const i64) as u64,
                        nanoseconds: *((ptr2 + 88) as *const i32) as u32,
                    },
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr2 + 8) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr2 + 8) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Adjust the timestamps of a file or directory.
    ///
    /// Note: This is similar to `utimensat` in POSIX.
    ///
    /// Note: This was called `path_filestat_set_times` in earlier versions of
    /// WASI.
    pub fn set_times_at(
        this: Descriptor,
        path_flags: PathFlags,
        path: &str,
        data_access_timestamp: NewTimestamp,
        data_modification_timestamp: NewTimestamp,
    ) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let flags0 = path_flags;
            let vec1 = path;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            let (result3_0, result3_1, result3_2) = match data_access_timestamp {
                NewTimestamp::NoChange => (0i32, 0i64, 0i32),
                NewTimestamp::Now => (1i32, 0i64, 0i32),
                NewTimestamp::Timestamp(e) => {
                    let super::wall_clock::Datetime {
                        seconds: seconds2,
                        nanoseconds: nanoseconds2,
                    } = e;

                    (
                        2i32,
                        wit_bindgen::rt::as_i64(seconds2),
                        wit_bindgen::rt::as_i32(nanoseconds2),
                    )
                }
            };
            let (result5_0, result5_1, result5_2) = match data_modification_timestamp {
                NewTimestamp::NoChange => (0i32, 0i64, 0i32),
                NewTimestamp::Now => (1i32, 0i64, 0i32),
                NewTimestamp::Timestamp(e) => {
                    let super::wall_clock::Datetime {
                        seconds: seconds4,
                        nanoseconds: nanoseconds4,
                    } = e;

                    (
                        2i32,
                        wit_bindgen::rt::as_i64(seconds4),
                        wit_bindgen::rt::as_i32(nanoseconds4),
                    )
                }
            };
            let ptr6 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-times-at")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_set-times-at")]
                fn wit_import(
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i64,
                    _: i32,
                    _: i32,
                    _: i64,
                    _: i32,
                    _: i32,
                );
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                (flags0.bits() >> 0) as i32,
                ptr1,
                len1,
                result3_0,
                result3_1,
                result3_2,
                result5_0,
                result5_1,
                result5_2,
                ptr6,
            );
            match i32::from(*((ptr6 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr6 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr6 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Create a hard link.
    ///
    /// Note: This is similar to `linkat` in POSIX.
    pub fn link_at(
        this: Descriptor,
        old_path_flags: PathFlags,
        old_path: &str,
        new_descriptor: Descriptor,
        new_path: &str,
    ) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let flags0 = old_path_flags;
            let vec1 = old_path;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            let vec2 = new_path;
            let ptr2 = vec2.as_ptr() as i32;
            let len2 = vec2.len() as i32;
            let ptr3 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "link-at")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_link-at")]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                (flags0.bits() >> 0) as i32,
                ptr1,
                len1,
                wit_bindgen::rt::as_i32(new_descriptor),
                ptr2,
                len2,
                ptr3,
            );
            match i32::from(*((ptr3 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr3 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr3 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Open a file or directory.
    ///
    /// The returned descriptor is not guaranteed to be the lowest-numbered
    /// descriptor not currently open/ it is randomized to prevent applications
    /// from depending on making assumptions about indexes, since this is
    /// error-prone in multi-threaded contexts. The returned descriptor is
    /// guaranteed to be less than 2**31.
    ///
    /// If `flags` contains `descriptor-flags::mutate-directory`, and the base
    /// descriptor doesn't have `descriptor-flags::mutate-directory` set,
    /// `open-at` fails with `error-code::read-only`.
    ///
    /// If `flags` contains `write` or `mutate-directory`, or `open-flags`
    /// contains `truncate` or `create`, and the base descriptor doesn't have
    /// `descriptor-flags::mutate-directory` set, `open-at` fails with
    /// `error-code::read-only`.
    ///
    /// Note: This is similar to `openat` in POSIX.
    pub fn open_at(
        this: Descriptor,
        path_flags: PathFlags,
        path: &str,
        open_flags: OpenFlags,
        flags: DescriptorFlags,
        modes: Modes,
    ) -> Result<Descriptor, ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 8]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let flags0 = path_flags;
            let vec1 = path;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            let flags2 = open_flags;
            let flags3 = flags;
            let flags4 = modes;
            let ptr5 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "open-at")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_open-at")]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                (flags0.bits() >> 0) as i32,
                ptr1,
                len1,
                (flags2.bits() >> 0) as i32,
                (flags3.bits() >> 0) as i32,
                (flags4.bits() >> 0) as i32,
                ptr5,
            );
            match i32::from(*((ptr5 + 0) as *const u8)) {
                0 => Ok(*((ptr5 + 4) as *const i32) as u32),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr5 + 4) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr5 + 4) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Read the contents of a symbolic link.
    ///
    /// If the contents contain an absolute or rooted path in the underlying
    /// filesystem, this function fails with `error-code::not-permitted`.
    ///
    /// Note: This is similar to `readlinkat` in POSIX.
    pub fn readlink_at(
        this: Descriptor,
        path: &str,
    ) -> Result<wit_bindgen::rt::string::String, ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = path;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "readlink-at")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_readlink-at")]
                fn wit_import(_: i32, _: i32, _: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0, len0, ptr1);
            match i32::from(*((ptr1 + 0) as *const u8)) {
                0 => Ok({
                    let len2 = *((ptr1 + 8) as *const i32) as usize;

                    {
                        #[cfg(not(debug_assertions))]
                        {
                            String::from_utf8_unchecked(Vec::from_raw_parts(
                                *((ptr1 + 4) as *const i32) as *mut _,
                                len2,
                                len2,
                            ))
                        }
                        #[cfg(debug_assertions)]
                        {
                            String::from_utf8(Vec::from_raw_parts(
                                *((ptr1 + 4) as *const i32) as *mut _,
                                len2,
                                len2,
                            ))
                            .unwrap()
                        }
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr1 + 4) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr1 + 4) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Remove a directory.
    ///
    /// Return `error-code::not-empty` if the directory is not empty.
    ///
    /// Note: This is similar to `unlinkat(fd, path, AT_REMOVEDIR)` in POSIX.
    pub fn remove_directory_at(this: Descriptor, path: &str) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = path;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "remove-directory-at")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "filesystem_remove-directory-at"
                )]
                fn wit_import(_: i32, _: i32, _: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0, len0, ptr1);
            match i32::from(*((ptr1 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr1 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr1 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Rename a filesystem object.
    ///
    /// Note: This is similar to `renameat` in POSIX.
    pub fn rename_at(
        this: Descriptor,
        old_path: &str,
        new_descriptor: Descriptor,
        new_path: &str,
    ) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = old_path;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let vec1 = new_path;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            let ptr2 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "rename-at")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_rename-at")]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                ptr0,
                len0,
                wit_bindgen::rt::as_i32(new_descriptor),
                ptr1,
                len1,
                ptr2,
            );
            match i32::from(*((ptr2 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr2 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr2 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Create a symbolic link (also known as a "symlink").
    ///
    /// If `old-path` starts with `/`, the function fails with
    /// `error-code::not-permitted`.
    ///
    /// Note: This is similar to `symlinkat` in POSIX.
    pub fn symlink_at(this: Descriptor, old_path: &str, new_path: &str) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = old_path;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let vec1 = new_path;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            let ptr2 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "symlink-at")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_symlink-at")]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0, len0, ptr1, len1, ptr2);
            match i32::from(*((ptr2 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr2 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr2 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Unlink a filesystem object that is not a directory.
    ///
    /// Return `error-code::is-directory` if the path refers to a directory.
    /// Note: This is similar to `unlinkat(fd, path, 0)` in POSIX.
    pub fn unlink_file_at(this: Descriptor, path: &str) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = path;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "unlink-file-at")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_unlink-file-at")]
                fn wit_import(_: i32, _: i32, _: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0, len0, ptr1);
            match i32::from(*((ptr1 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr1 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr1 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Change the permissions of a filesystem object that is not a directory.
    ///
    /// Note that the ultimate meanings of these permissions is
    /// filesystem-specific.
    ///
    /// Note: This is similar to `fchmodat` in POSIX.
    pub fn change_file_permissions_at(
        this: Descriptor,
        path_flags: PathFlags,
        path: &str,
        modes: Modes,
    ) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let flags0 = path_flags;
            let vec1 = path;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            let flags2 = modes;
            let ptr3 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "change-file-permissions-at")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "filesystem_change-file-permissions-at"
                )]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                (flags0.bits() >> 0) as i32,
                ptr1,
                len1,
                (flags2.bits() >> 0) as i32,
                ptr3,
            );
            match i32::from(*((ptr3 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr3 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr3 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Change the permissions of a directory.
    ///
    /// Note that the ultimate meanings of these permissions is
    /// filesystem-specific.
    ///
    /// Unlike in POSIX, the `executable` flag is not reinterpreted as a "search"
    /// flag. `read` on a directory implies readability and searchability, and
    /// `execute` is not valid for directories.
    ///
    /// Note: This is similar to `fchmodat` in POSIX.
    pub fn change_directory_permissions_at(
        this: Descriptor,
        path_flags: PathFlags,
        path: &str,
        modes: Modes,
    ) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let flags0 = path_flags;
            let vec1 = path;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            let flags2 = modes;
            let ptr3 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "change-directory-permissions-at")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "filesystem_change-directory-permissions-at"
                )]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                (flags0.bits() >> 0) as i32,
                ptr1,
                len1,
                (flags2.bits() >> 0) as i32,
                ptr3,
            );
            match i32::from(*((ptr3 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr3 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr3 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Request a shared advisory lock for an open file.
    ///
    /// This requests a *shared* lock; more than one shared lock can be held for
    /// a file at the same time.
    ///
    /// If the open file has an exclusive lock, this function downgrades the lock
    /// to a shared lock. If it has a shared lock, this function has no effect.
    ///
    /// This requests an *advisory* lock, meaning that the file could be accessed
    /// by other programs that don't hold the lock.
    ///
    /// It is unspecified how shared locks interact with locks acquired by
    /// non-WASI programs.
    ///
    /// This function blocks until the lock can be acquired.
    ///
    /// Not all filesystems support locking; on filesystems which don't support
    /// locking, this function returns `error-code::unsupported`.
    ///
    /// Note: This is similar to `flock(fd, LOCK_SH)` in Unix.
    pub fn lock_shared(this: Descriptor) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "lock-shared")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_lock-shared")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Request an exclusive advisory lock for an open file.
    ///
    /// This requests an *exclusive* lock; no other locks may be held for the
    /// file while an exclusive lock is held.
    ///
    /// If the open file has a shared lock and there are no exclusive locks held
    /// for the file, this function upgrades the lock to an exclusive lock. If the
    /// open file already has an exclusive lock, this function has no effect.
    ///
    /// This requests an *advisory* lock, meaning that the file could be accessed
    /// by other programs that don't hold the lock.
    ///
    /// It is unspecified whether this function succeeds if the file descriptor
    /// is not opened for writing. It is unspecified how exclusive locks interact
    /// with locks acquired by non-WASI programs.
    ///
    /// This function blocks until the lock can be acquired.
    ///
    /// Not all filesystems support locking; on filesystems which don't support
    /// locking, this function returns `error-code::unsupported`.
    ///
    /// Note: This is similar to `flock(fd, LOCK_EX)` in Unix.
    pub fn lock_exclusive(this: Descriptor) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "lock-exclusive")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_lock-exclusive")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Request a shared advisory lock for an open file.
    ///
    /// This requests a *shared* lock; more than one shared lock can be held for
    /// a file at the same time.
    ///
    /// If the open file has an exclusive lock, this function downgrades the lock
    /// to a shared lock. If it has a shared lock, this function has no effect.
    ///
    /// This requests an *advisory* lock, meaning that the file could be accessed
    /// by other programs that don't hold the lock.
    ///
    /// It is unspecified how shared locks interact with locks acquired by
    /// non-WASI programs.
    ///
    /// This function returns `error-code::would-block` if the lock cannot be
    /// acquired.
    ///
    /// Not all filesystems support locking; on filesystems which don't support
    /// locking, this function returns `error-code::unsupported`.
    ///
    /// Note: This is similar to `flock(fd, LOCK_SH | LOCK_NB)` in Unix.
    pub fn try_lock_shared(this: Descriptor) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "try-lock-shared")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_try-lock-shared")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Request an exclusive advisory lock for an open file.
    ///
    /// This requests an *exclusive* lock; no other locks may be held for the
    /// file while an exclusive lock is held.
    ///
    /// If the open file has a shared lock and there are no exclusive locks held
    /// for the file, this function upgrades the lock to an exclusive lock. If the
    /// open file already has an exclusive lock, this function has no effect.
    ///
    /// This requests an *advisory* lock, meaning that the file could be accessed
    /// by other programs that don't hold the lock.
    ///
    /// It is unspecified whether this function succeeds if the file descriptor
    /// is not opened for writing. It is unspecified how exclusive locks interact
    /// with locks acquired by non-WASI programs.
    ///
    /// This function returns `error-code::would-block` if the lock cannot be
    /// acquired.
    ///
    /// Not all filesystems support locking; on filesystems which don't support
    /// locking, this function returns `error-code::unsupported`.
    ///
    /// Note: This is similar to `flock(fd, LOCK_EX | LOCK_NB)` in Unix.
    pub fn try_lock_exclusive(this: Descriptor) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "try-lock-exclusive")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "filesystem_try-lock-exclusive"
                )]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Release a shared or exclusive lock on an open file.
    ///
    /// Note: This is similar to `flock(fd, LOCK_UN)` in Unix.
    pub fn unlock(this: Descriptor) -> Result<(), ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "unlock")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_unlock")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Dispose of the specified `descriptor`, after which it may no longer
    /// be used.
    pub fn drop_descriptor(this: Descriptor) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "drop-descriptor")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "filesystem_drop-descriptor")]
                fn wit_import(_: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this));
        }
    }
    #[allow(clippy::all)]
    /// Read a single directory entry from a `directory-entry-stream`.
    pub fn read_directory_entry(
        this: DirectoryEntryStream,
    ) -> Result<Option<DirectoryEntry>, ErrorCode> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 48]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "read-directory-entry")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "filesystem_read-directory-entry"
                )]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(match i32::from(*((ptr0 + 8) as *const u8)) {
                    0 => None,
                    1 => Some({
                        let len1 = *((ptr0 + 40) as *const i32) as usize;

                        DirectoryEntry {
                            inode: match i32::from(*((ptr0 + 16) as *const u8)) {
                                0 => None,
                                1 => Some(*((ptr0 + 24) as *const i64) as u64),
                                #[cfg(not(debug_assertions))]
                                _ => core::hint::unreachable_unchecked(),
                                #[cfg(debug_assertions)]
                                _ => panic!("invalid enum discriminant"),
                            },
                            type_: {
                                #[cfg(debug_assertions)]
                                {
                                    match i32::from(*((ptr0 + 32) as *const u8)) {
                                        0 => DescriptorType::Unknown,
                                        1 => DescriptorType::BlockDevice,
                                        2 => DescriptorType::CharacterDevice,
                                        3 => DescriptorType::Directory,
                                        4 => DescriptorType::Fifo,
                                        5 => DescriptorType::SymbolicLink,
                                        6 => DescriptorType::RegularFile,
                                        7 => DescriptorType::Socket,
                                        _ => panic!("invalid enum discriminant"),
                                    }
                                }
                                #[cfg(not(debug_assertions))]
                                {
                                    core::mem::transmute::<_, DescriptorType>(i32::from(
                                        *((ptr0 + 32) as *const u8),
                                    )
                                        as u8)
                                }
                            },
                            name: {
                                #[cfg(not(debug_assertions))]
                                {
                                    String::from_utf8_unchecked(Vec::from_raw_parts(
                                        *((ptr0 + 36) as *const i32) as *mut _,
                                        len1,
                                        len1,
                                    ))
                                }
                                #[cfg(debug_assertions)]
                                {
                                    String::from_utf8(Vec::from_raw_parts(
                                        *((ptr0 + 36) as *const i32) as *mut _,
                                        len1,
                                        len1,
                                    ))
                                    .unwrap()
                                }
                            },
                        }
                    }),
                    #[cfg(not(debug_assertions))]
                    _ => core::hint::unreachable_unchecked(),
                    #[cfg(debug_assertions)]
                    _ => panic!("invalid enum discriminant"),
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 8) as *const u8)) {
                            0 => ErrorCode::Access,
                            1 => ErrorCode::WouldBlock,
                            2 => ErrorCode::Already,
                            3 => ErrorCode::BadDescriptor,
                            4 => ErrorCode::Busy,
                            5 => ErrorCode::Deadlock,
                            6 => ErrorCode::Quota,
                            7 => ErrorCode::Exist,
                            8 => ErrorCode::FileTooLarge,
                            9 => ErrorCode::IllegalByteSequence,
                            10 => ErrorCode::InProgress,
                            11 => ErrorCode::Interrupted,
                            12 => ErrorCode::Invalid,
                            13 => ErrorCode::Io,
                            14 => ErrorCode::IsDirectory,
                            15 => ErrorCode::Loop,
                            16 => ErrorCode::TooManyLinks,
                            17 => ErrorCode::MessageSize,
                            18 => ErrorCode::NameTooLong,
                            19 => ErrorCode::NoDevice,
                            20 => ErrorCode::NoEntry,
                            21 => ErrorCode::NoLock,
                            22 => ErrorCode::InsufficientMemory,
                            23 => ErrorCode::InsufficientSpace,
                            24 => ErrorCode::NotDirectory,
                            25 => ErrorCode::NotEmpty,
                            26 => ErrorCode::NotRecoverable,
                            27 => ErrorCode::Unsupported,
                            28 => ErrorCode::NoTty,
                            29 => ErrorCode::NoSuchDevice,
                            30 => ErrorCode::Overflow,
                            31 => ErrorCode::NotPermitted,
                            32 => ErrorCode::Pipe,
                            33 => ErrorCode::ReadOnly,
                            34 => ErrorCode::InvalidSeek,
                            35 => ErrorCode::TextFileBusy,
                            36 => ErrorCode::CrossDevice,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, ErrorCode>(
                            i32::from(*((ptr0 + 8) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Dispose of the specified `directory-entry-stream`, after which it may no longer
    /// be used.
    pub fn drop_directory_entry_stream(this: DirectoryEntryStream) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "filesystem")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "drop-directory-entry-stream")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "filesystem_drop-directory-entry-stream"
                )]
                fn wit_import(_: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this));
        }
    }
}

#[allow(clippy::all)]
pub mod network {
    /// An opaque resource that represents access to (a subset of) the network.
    /// This enables context-based security for networking.
    /// There is no need for this to map 1:1 to a physical network interface.
    ///
    /// FYI, In the future this will be replaced by handle types.
    pub type Network = u32;
    pub type Ipv6Address = (u16, u16, u16, u16, u16, u16, u16, u16);
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct Ipv6SocketAddress {
        pub port: u16,
        pub flow_info: u32,
        pub address: Ipv6Address,
        pub scope_id: u32,
    }
    impl core::fmt::Debug for Ipv6SocketAddress {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("Ipv6SocketAddress")
                .field("port", &self.port)
                .field("flow-info", &self.flow_info)
                .field("address", &self.address)
                .field("scope-id", &self.scope_id)
                .finish()
        }
    }
    pub type Ipv4Address = (u8, u8, u8, u8);
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct Ipv4SocketAddress {
        pub port: u16,
        pub address: Ipv4Address,
    }
    impl core::fmt::Debug for Ipv4SocketAddress {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("Ipv4SocketAddress")
                .field("port", &self.port)
                .field("address", &self.address)
                .finish()
        }
    }
    #[derive(Clone, Copy)]
    pub enum IpSocketAddress {
        Ipv4(Ipv4SocketAddress),
        Ipv6(Ipv6SocketAddress),
    }
    impl core::fmt::Debug for IpSocketAddress {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            match self {
                IpSocketAddress::Ipv4(e) => {
                    f.debug_tuple("IpSocketAddress::Ipv4").field(e).finish()
                }
                IpSocketAddress::Ipv6(e) => {
                    f.debug_tuple("IpSocketAddress::Ipv6").field(e).finish()
                }
            }
        }
    }
    #[repr(u8)]
    #[derive(Clone, Copy, PartialEq, Eq)]
    pub enum IpAddressFamily {
        /// Similar to `AF_INET` in POSIX.
        Ipv4,
        /// Similar to `AF_INET6` in POSIX.
        Ipv6,
    }
    impl core::fmt::Debug for IpAddressFamily {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            match self {
                IpAddressFamily::Ipv4 => f.debug_tuple("IpAddressFamily::Ipv4").finish(),
                IpAddressFamily::Ipv6 => f.debug_tuple("IpAddressFamily::Ipv6").finish(),
            }
        }
    }
    #[derive(Clone, Copy)]
    pub enum IpAddress {
        Ipv4(Ipv4Address),
        Ipv6(Ipv6Address),
    }
    impl core::fmt::Debug for IpAddress {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            match self {
                IpAddress::Ipv4(e) => f.debug_tuple("IpAddress::Ipv4").field(e).finish(),
                IpAddress::Ipv6(e) => f.debug_tuple("IpAddress::Ipv6").field(e).finish(),
            }
        }
    }
    #[repr(u8)]
    #[derive(Clone, Copy, PartialEq, Eq)]
    pub enum Error {
        Unknown,
        Again,
    }
    impl core::fmt::Debug for Error {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            match self {
                Error::Unknown => f.debug_tuple("Error::Unknown").finish(),
                Error::Again => f.debug_tuple("Error::Again").finish(),
            }
        }
    }
    #[allow(clippy::all)]
    /// Dispose of the specified `network`, after which it may no longer be used.
    ///
    /// Note: this function is scheduled to be removed when Resources are natively supported in Wit.
    pub fn drop_network(this: Network) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "network")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "drop-network")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "network_drop-network")]
                fn wit_import(_: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this));
        }
    }
}

#[allow(clippy::all)]
pub mod instance_network {
    pub type Network = super::network::Network;
    #[allow(clippy::all)]
    /// Get a handle to the default network.
    pub fn instance_network() -> Network {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "instance-network")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "instance-network")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "instance-network_instance-network"
                )]
                fn wit_import() -> i32;
            }
            let ret = wit_import();
            ret as u32
        }
    }
}

#[allow(clippy::all)]
pub mod ip_name_lookup {
    pub type Pollable = super::poll::Pollable;
    pub type Network = super::network::Network;
    pub type Error = super::network::Error;
    pub type IpAddress = super::network::IpAddress;
    pub type IpAddressFamily = super::network::IpAddressFamily;
    pub type ResolveAddressStream = u32;
    #[allow(clippy::all)]
    /// Resolve an internet host name to a list of IP addresses.
    ///
    /// See the wasi-socket proposal README.md for a comparison with getaddrinfo.
    ///
    /// Parameters:
    /// - `name`: The name to look up. IP addresses are not allowed. Unicode domain names are automatically converted
    /// to ASCII using IDNA encoding.
    /// - `address-family`: If provided, limit the results to addresses of this specific address family.
    /// - `include-unavailable`: When set to true, this function will also return addresses of which the runtime
    /// thinks (or knows) can't be connected to at the moment. For example, this will return IPv6 addresses on
    /// systems without an active IPv6 interface. Notes:
    /// - Even when no public IPv6 interfaces are present or active, names like "localhost" can still resolve to an IPv6 address.
    /// - Whatever is "available" or "unavailable" is volatile and can change everytime a network cable is unplugged.
    ///
    /// This function never blocks. It either immediately returns successfully with a `resolve-address-stream`
    /// that can be used to (asynchronously) fetch the results.
    /// Or it immediately fails whenever `name` is:
    /// - empty
    /// - an IP address
    /// - a syntactically invalid domain name in another way
    ///
    /// References:
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getaddrinfo.html>
    /// - <https://man7.org/linux/man-pages/man3/getaddrinfo.3.html>
    pub fn resolve_addresses(
        network: Network,
        name: &str,
        address_family: Option<IpAddressFamily>,
        include_unavailable: bool,
    ) -> Result<ResolveAddressStream, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 8]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = name;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let (result1_0, result1_1) = match address_family {
                Some(e) => (
                    1i32,
                    match e {
                        super::network::IpAddressFamily::Ipv4 => 0,
                        super::network::IpAddressFamily::Ipv6 => 1,
                    },
                ),
                None => (0i32, 0i32),
            };
            let ptr2 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "ip-name-lookup")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "resolve-addresses")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "ip-name-lookup_resolve-addresses"
                )]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(network),
                ptr0,
                len0,
                result1_0,
                result1_1,
                match include_unavailable {
                    true => 1,
                    false => 0,
                },
                ptr2,
            );
            match i32::from(*((ptr2 + 0) as *const u8)) {
                0 => Ok(*((ptr2 + 4) as *const i32) as u32),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr2 + 4) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr2 + 4) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Returns the next address from the resolver.
    ///
    /// This function should be called multiple times. On each call, it will
    /// return the next address in connection order preference. If all
    /// addresses have been exhausted, this function returns `none`.
    /// After which, you should release the stream with `drop-resolve-address-stream`.
    ///
    /// This function never returns IPv4-mapped IPv6 addresses.
    pub fn resolve_next_address(this: ResolveAddressStream) -> Result<Option<IpAddress>, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(2))]
            struct RetArea([u8; 22]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "ip-name-lookup")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "resolve-next-address")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "ip-name-lookup_resolve-next-address"
                )]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(match i32::from(*((ptr0 + 2) as *const u8)) {
                    0 => None,
                    1 => Some({
                        {
                            match i32::from(*((ptr0 + 4) as *const u8)) {
                                0 => super::network::IpAddress::Ipv4((
                                    i32::from(*((ptr0 + 6) as *const u8)) as u8,
                                    i32::from(*((ptr0 + 7) as *const u8)) as u8,
                                    i32::from(*((ptr0 + 8) as *const u8)) as u8,
                                    i32::from(*((ptr0 + 9) as *const u8)) as u8,
                                )),
                                #[cfg(debug_assertions)]
                                1 => super::network::IpAddress::Ipv6((
                                    i32::from(*((ptr0 + 6) as *const u16)) as u16,
                                    i32::from(*((ptr0 + 8) as *const u16)) as u16,
                                    i32::from(*((ptr0 + 10) as *const u16)) as u16,
                                    i32::from(*((ptr0 + 12) as *const u16)) as u16,
                                    i32::from(*((ptr0 + 14) as *const u16)) as u16,
                                    i32::from(*((ptr0 + 16) as *const u16)) as u16,
                                    i32::from(*((ptr0 + 18) as *const u16)) as u16,
                                    i32::from(*((ptr0 + 20) as *const u16)) as u16,
                                )),
                                #[cfg(not(debug_assertions))]
                                _ => super::network::IpAddress::Ipv6((
                                    i32::from(*((ptr0 + 6) as *const u16)) as u16,
                                    i32::from(*((ptr0 + 8) as *const u16)) as u16,
                                    i32::from(*((ptr0 + 10) as *const u16)) as u16,
                                    i32::from(*((ptr0 + 12) as *const u16)) as u16,
                                    i32::from(*((ptr0 + 14) as *const u16)) as u16,
                                    i32::from(*((ptr0 + 16) as *const u16)) as u16,
                                    i32::from(*((ptr0 + 18) as *const u16)) as u16,
                                    i32::from(*((ptr0 + 20) as *const u16)) as u16,
                                )),
                                #[cfg(debug_assertions)]
                                _ => panic!("invalid enum discriminant"),
                            }
                        }
                    }),
                    #[cfg(not(debug_assertions))]
                    _ => core::hint::unreachable_unchecked(),
                    #[cfg(debug_assertions)]
                    _ => panic!("invalid enum discriminant"),
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 2) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 2) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Dispose of the specified `resolve-address-stream`, after which it may no longer be used.
    ///
    /// Note: this function is scheduled to be removed when Resources are natively supported in Wit.
    pub fn drop_resolve_address_stream(this: ResolveAddressStream) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "ip-name-lookup")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "drop-resolve-address-stream")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "ip-name-lookup_drop-resolve-address-stream"
                )]
                fn wit_import(_: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this));
        }
    }
    #[allow(clippy::all)]
    /// Get/set the blocking mode of the stream.
    ///
    /// By default a stream is in "blocking" mode, meaning that any function blocks and waits for its completion.
    /// When switched to "non-blocking" mode, operations that would block return an `again` error. After which
    /// the API consumer is expected to call `subscribe` and wait for completion using the wasi-poll module.
    ///
    /// Note: these functions are here for WASI Preview2 only.
    /// They're planned to be removed when `future` is natively supported in Preview3.
    pub fn non_blocking(this: ResolveAddressStream) -> Result<bool, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "ip-name-lookup")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "non-blocking")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "ip-name-lookup_non-blocking")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<u8, bool>(i32::from(*((ptr0 + 1) as *const u8)) as u8)
                    }
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => false,
                            1 => true,
                            _ => panic!("invalid bool discriminant"),
                        }
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn set_non_blocking(this: ResolveAddressStream, value: bool) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "ip-name-lookup")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-non-blocking")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "ip-name-lookup_set-non-blocking"
                )]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                match value {
                    true => 1,
                    false => 0,
                },
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Create a `pollable` which will resolve once the stream is ready for I/O.
    ///
    /// Note: this function is here for WASI Preview2 only.
    /// It's planned to be removed when `future` is natively supported in Preview3.
    pub fn subscribe(this: ResolveAddressStream) -> Pollable {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "ip-name-lookup")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "subscribe")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "ip-name-lookup_subscribe")]
                fn wit_import(_: i32) -> i32;
            }
            let ret = wit_import(wit_bindgen::rt::as_i32(this));
            ret as u32
        }
    }
}

#[allow(clippy::all)]
pub mod tcp {
    pub type InputStream = super::streams::InputStream;
    pub type OutputStream = super::streams::OutputStream;
    pub type Pollable = super::poll::Pollable;
    pub type Network = super::network::Network;
    pub type Error = super::network::Error;
    pub type IpSocketAddress = super::network::IpSocketAddress;
    pub type IpAddressFamily = super::network::IpAddressFamily;
    /// A TCP socket handle.
    pub type TcpSocket = u32;
    #[repr(u8)]
    #[derive(Clone, Copy, PartialEq, Eq)]
    pub enum ShutdownType {
        /// Similar to `SHUT_RD` in POSIX.
        Receive,
        /// Similar to `SHUT_WR` in POSIX.
        Send,
        /// Similar to `SHUT_RDWR` in POSIX.
        Both,
    }
    impl core::fmt::Debug for ShutdownType {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            match self {
                ShutdownType::Receive => f.debug_tuple("ShutdownType::Receive").finish(),
                ShutdownType::Send => f.debug_tuple("ShutdownType::Send").finish(),
                ShutdownType::Both => f.debug_tuple("ShutdownType::Both").finish(),
            }
        }
    }
    #[allow(clippy::all)]
    /// Bind the socket to a specific network on the provided IP address and port.
    ///
    /// If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), it is left to the implementation to decide which
    /// network interface(s) to bind to.
    /// If the TCP/UDP port is zero, the socket will be bound to a random free port.
    ///
    /// When a socket is not explicitly bound, the first invocation to a listen or connect operation will
    /// implicitly bind the socket.
    ///
    /// Fails when:
    /// - the socket is already bound.
    ///
    /// References
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html>
    /// - <https://man7.org/linux/man-pages/man2/bind.2.html>
    pub fn bind(
        this: TcpSocket,
        network: Network,
        local_address: IpSocketAddress,
    ) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let (
                result4_0,
                result4_1,
                result4_2,
                result4_3,
                result4_4,
                result4_5,
                result4_6,
                result4_7,
                result4_8,
                result4_9,
                result4_10,
                result4_11,
            ) = match local_address {
                super::network::IpSocketAddress::Ipv4(e) => {
                    let super::network::Ipv4SocketAddress {
                        port: port0,
                        address: address0,
                    } = e;
                    let (t1_0, t1_1, t1_2, t1_3) = address0;

                    (
                        0i32,
                        wit_bindgen::rt::as_i32(port0),
                        wit_bindgen::rt::as_i32(t1_0),
                        wit_bindgen::rt::as_i32(t1_1),
                        wit_bindgen::rt::as_i32(t1_2),
                        wit_bindgen::rt::as_i32(t1_3),
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                    )
                }
                super::network::IpSocketAddress::Ipv6(e) => {
                    let super::network::Ipv6SocketAddress {
                        port: port2,
                        flow_info: flow_info2,
                        address: address2,
                        scope_id: scope_id2,
                    } = e;
                    let (t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7) = address2;

                    (
                        1i32,
                        wit_bindgen::rt::as_i32(port2),
                        wit_bindgen::rt::as_i32(flow_info2),
                        wit_bindgen::rt::as_i32(t3_0),
                        wit_bindgen::rt::as_i32(t3_1),
                        wit_bindgen::rt::as_i32(t3_2),
                        wit_bindgen::rt::as_i32(t3_3),
                        wit_bindgen::rt::as_i32(t3_4),
                        wit_bindgen::rt::as_i32(t3_5),
                        wit_bindgen::rt::as_i32(t3_6),
                        wit_bindgen::rt::as_i32(t3_7),
                        wit_bindgen::rt::as_i32(scope_id2),
                    )
                }
            };
            let ptr5 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "bind")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_bind")]
                fn wit_import(
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                );
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i32(network),
                result4_0,
                result4_1,
                result4_2,
                result4_3,
                result4_4,
                result4_5,
                result4_6,
                result4_7,
                result4_8,
                result4_9,
                result4_10,
                result4_11,
                ptr5,
            );
            match i32::from(*((ptr5 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr5 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr5 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Connect to a remote endpoint.
    ///
    /// On success:
    /// - the socket is transitioned into the Connection state
    /// - a pair of streams is returned that can be used to read & write to the connection
    ///
    /// Fails when:
    /// - the socket is already bound to a different network.
    /// - the provided network does not allow connections to the specified endpoint.
    /// - the socket is already in the Connection or Listener state.
    /// - either the remote IP address or port is 0.
    ///
    /// References
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html>
    /// - <https://man7.org/linux/man-pages/man2/connect.2.html>
    pub fn connect(
        this: TcpSocket,
        network: Network,
        remote_address: IpSocketAddress,
    ) -> Result<(InputStream, OutputStream), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let (
                result4_0,
                result4_1,
                result4_2,
                result4_3,
                result4_4,
                result4_5,
                result4_6,
                result4_7,
                result4_8,
                result4_9,
                result4_10,
                result4_11,
            ) = match remote_address {
                super::network::IpSocketAddress::Ipv4(e) => {
                    let super::network::Ipv4SocketAddress {
                        port: port0,
                        address: address0,
                    } = e;
                    let (t1_0, t1_1, t1_2, t1_3) = address0;

                    (
                        0i32,
                        wit_bindgen::rt::as_i32(port0),
                        wit_bindgen::rt::as_i32(t1_0),
                        wit_bindgen::rt::as_i32(t1_1),
                        wit_bindgen::rt::as_i32(t1_2),
                        wit_bindgen::rt::as_i32(t1_3),
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                    )
                }
                super::network::IpSocketAddress::Ipv6(e) => {
                    let super::network::Ipv6SocketAddress {
                        port: port2,
                        flow_info: flow_info2,
                        address: address2,
                        scope_id: scope_id2,
                    } = e;
                    let (t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7) = address2;

                    (
                        1i32,
                        wit_bindgen::rt::as_i32(port2),
                        wit_bindgen::rt::as_i32(flow_info2),
                        wit_bindgen::rt::as_i32(t3_0),
                        wit_bindgen::rt::as_i32(t3_1),
                        wit_bindgen::rt::as_i32(t3_2),
                        wit_bindgen::rt::as_i32(t3_3),
                        wit_bindgen::rt::as_i32(t3_4),
                        wit_bindgen::rt::as_i32(t3_5),
                        wit_bindgen::rt::as_i32(t3_6),
                        wit_bindgen::rt::as_i32(t3_7),
                        wit_bindgen::rt::as_i32(scope_id2),
                    )
                }
            };
            let ptr5 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "connect")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_connect")]
                fn wit_import(
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                );
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i32(network),
                result4_0,
                result4_1,
                result4_2,
                result4_3,
                result4_4,
                result4_5,
                result4_6,
                result4_7,
                result4_8,
                result4_9,
                result4_10,
                result4_11,
                ptr5,
            );
            match i32::from(*((ptr5 + 0) as *const u8)) {
                0 => Ok((
                    *((ptr5 + 4) as *const i32) as u32,
                    *((ptr5 + 8) as *const i32) as u32,
                )),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr5 + 4) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr5 + 4) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Start listening for new connections.
    ///
    /// Transitions the socket into the Listener state.
    ///
    /// Fails when:
    /// - the socket is already bound to a different network.
    /// - the provided network does not allow listening on the specified address.
    /// - the socket is already in the Connection or Listener state.
    ///
    /// References
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/listen.html>
    /// - <https://man7.org/linux/man-pages/man2/listen.2.html>
    pub fn listen(this: TcpSocket, network: Network) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "listen")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_listen")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i32(network),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Accept a new client socket.
    ///
    /// The returned socket is bound and in the Connection state.
    ///
    /// On success, this function returns the newly accepted client socket along with
    /// a pair of streams that can be used to read & write to the connection.
    ///
    /// Fails when this socket is not in the Listening state.
    ///
    /// References:
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/accept.html>
    /// - <https://man7.org/linux/man-pages/man2/accept.2.html>
    pub fn accept(this: TcpSocket) -> Result<(TcpSocket, InputStream, OutputStream), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "accept")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_accept")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok((
                    *((ptr0 + 4) as *const i32) as u32,
                    *((ptr0 + 8) as *const i32) as u32,
                    *((ptr0 + 12) as *const i32) as u32,
                )),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 4) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Get the bound local address.
    ///
    /// Returns an error if the socket is not bound.
    ///
    /// References
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockname.html>
    /// - <https://man7.org/linux/man-pages/man2/getsockname.2.html>
    pub fn local_address(this: TcpSocket) -> Result<IpSocketAddress, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 36]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "local-address")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_local-address")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => super::network::IpSocketAddress::Ipv4(
                                super::network::Ipv4SocketAddress {
                                    port: i32::from(*((ptr0 + 8) as *const u16)) as u16,
                                    address: (
                                        i32::from(*((ptr0 + 10) as *const u8)) as u8,
                                        i32::from(*((ptr0 + 11) as *const u8)) as u8,
                                        i32::from(*((ptr0 + 12) as *const u8)) as u8,
                                        i32::from(*((ptr0 + 13) as *const u8)) as u8,
                                    ),
                                },
                            ),
                            #[cfg(debug_assertions)]
                            1 => super::network::IpSocketAddress::Ipv6(
                                super::network::Ipv6SocketAddress {
                                    port: i32::from(*((ptr0 + 8) as *const u16)) as u16,
                                    flow_info: *((ptr0 + 12) as *const i32) as u32,
                                    address: (
                                        i32::from(*((ptr0 + 16) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 18) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 20) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 22) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 24) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 26) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 28) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 30) as *const u16)) as u16,
                                    ),
                                    scope_id: *((ptr0 + 32) as *const i32) as u32,
                                },
                            ),
                            #[cfg(not(debug_assertions))]
                            _ => super::network::IpSocketAddress::Ipv6(
                                super::network::Ipv6SocketAddress {
                                    port: i32::from(*((ptr0 + 8) as *const u16)) as u16,
                                    flow_info: *((ptr0 + 12) as *const i32) as u32,
                                    address: (
                                        i32::from(*((ptr0 + 16) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 18) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 20) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 22) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 24) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 26) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 28) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 30) as *const u16)) as u16,
                                    ),
                                    scope_id: *((ptr0 + 32) as *const i32) as u32,
                                },
                            ),
                            #[cfg(debug_assertions)]
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 4) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Get the bound remote address.
    ///
    /// Fails when the socket is not in the Connection state.
    ///
    /// References
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getpeername.html>
    /// - <https://man7.org/linux/man-pages/man2/getpeername.2.html>
    pub fn remote_address(this: TcpSocket) -> Result<IpSocketAddress, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 36]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "remote-address")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_remote-address")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => super::network::IpSocketAddress::Ipv4(
                                super::network::Ipv4SocketAddress {
                                    port: i32::from(*((ptr0 + 8) as *const u16)) as u16,
                                    address: (
                                        i32::from(*((ptr0 + 10) as *const u8)) as u8,
                                        i32::from(*((ptr0 + 11) as *const u8)) as u8,
                                        i32::from(*((ptr0 + 12) as *const u8)) as u8,
                                        i32::from(*((ptr0 + 13) as *const u8)) as u8,
                                    ),
                                },
                            ),
                            #[cfg(debug_assertions)]
                            1 => super::network::IpSocketAddress::Ipv6(
                                super::network::Ipv6SocketAddress {
                                    port: i32::from(*((ptr0 + 8) as *const u16)) as u16,
                                    flow_info: *((ptr0 + 12) as *const i32) as u32,
                                    address: (
                                        i32::from(*((ptr0 + 16) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 18) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 20) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 22) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 24) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 26) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 28) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 30) as *const u16)) as u16,
                                    ),
                                    scope_id: *((ptr0 + 32) as *const i32) as u32,
                                },
                            ),
                            #[cfg(not(debug_assertions))]
                            _ => super::network::IpSocketAddress::Ipv6(
                                super::network::Ipv6SocketAddress {
                                    port: i32::from(*((ptr0 + 8) as *const u16)) as u16,
                                    flow_info: *((ptr0 + 12) as *const i32) as u32,
                                    address: (
                                        i32::from(*((ptr0 + 16) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 18) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 20) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 22) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 24) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 26) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 28) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 30) as *const u16)) as u16,
                                    ),
                                    scope_id: *((ptr0 + 32) as *const i32) as u32,
                                },
                            ),
                            #[cfg(debug_assertions)]
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 4) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Whether this is a IPv4 or IPv6 socket.
    ///
    /// Equivalent to the SO_DOMAIN socket option.
    pub fn address_family(this: TcpSocket) -> Result<IpAddressFamily, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "address-family")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_address-family")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::IpAddressFamily::Ipv4,
                            1 => super::network::IpAddressFamily::Ipv6,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::IpAddressFamily>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Whether IPv4 compatibility (dual-stack) mode is disabled or not.
    /// Implementations are not required to support dual-stack mode. Calling `set-ipv6-only(false)` might fail.
    ///
    /// Fails when called on an IPv4 socket.
    ///
    /// Equivalent to the IPV6_V6ONLY socket option.
    pub fn ipv6_only(this: TcpSocket) -> Result<bool, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "ipv6-only")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_ipv6-only")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<u8, bool>(i32::from(*((ptr0 + 1) as *const u8)) as u8)
                    }
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => false,
                            1 => true,
                            _ => panic!("invalid bool discriminant"),
                        }
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn set_ipv6_only(this: TcpSocket, value: bool) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-ipv6-only")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_set-ipv6-only")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                match value {
                    true => 1,
                    false => 0,
                },
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Hints the desired listen queue size. Implementations are free to ignore this.
    pub fn set_listen_backlog_size(this: TcpSocket, value: u64) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-listen-backlog-size")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_set-listen-backlog-size")]
                fn wit_import(_: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(value),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Equivalent to the SO_KEEPALIVE socket option.
    pub fn keep_alive(this: TcpSocket) -> Result<bool, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "keep-alive")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_keep-alive")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<u8, bool>(i32::from(*((ptr0 + 1) as *const u8)) as u8)
                    }
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => false,
                            1 => true,
                            _ => panic!("invalid bool discriminant"),
                        }
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn set_keep_alive(this: TcpSocket, value: bool) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-keep-alive")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_set-keep-alive")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                match value {
                    true => 1,
                    false => 0,
                },
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Equivalent to the TCP_NODELAY socket option.
    pub fn no_delay(this: TcpSocket) -> Result<bool, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "no-delay")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_no-delay")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<u8, bool>(i32::from(*((ptr0 + 1) as *const u8)) as u8)
                    }
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => false,
                            1 => true,
                            _ => panic!("invalid bool discriminant"),
                        }
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn set_no_delay(this: TcpSocket, value: bool) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-no-delay")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_set-no-delay")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                match value {
                    true => 1,
                    false => 0,
                },
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Equivalent to the IP_TTL & IPV6_UNICAST_HOPS socket options.
    pub fn unicast_hop_limit(this: TcpSocket) -> Result<u8, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "unicast-hop-limit")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_unicast-hop-limit")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(i32::from(*((ptr0 + 1) as *const u8)) as u8),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn set_unicast_hop_limit(this: TcpSocket, value: u8) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-unicast-hop-limit")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_set-unicast-hop-limit")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i32(value),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// The kernel buffer space reserved for sends/receives on this socket.
    ///
    /// Note #1: an implementation may choose to cap or round the buffer size when setting the value.
    /// In other words, after setting a value, reading the same setting back may return a different value.
    ///
    /// Note #2: there is not necessarily a direct relationship between the kernel buffer size and the bytes of
    /// actual data to be sent/received by the application, because the kernel might also use the buffer space
    /// for internal metadata structures.
    ///
    /// Fails when this socket is in the Listening state.
    ///
    /// Equivalent to the SO_RCVBUF and SO_SNDBUF socket options.
    pub fn receive_buffer_size(this: TcpSocket) -> Result<u64, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "receive-buffer-size")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_receive-buffer-size")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(*((ptr0 + 8) as *const i64) as u64),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 8) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 8) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn set_receive_buffer_size(this: TcpSocket, value: u64) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-receive-buffer-size")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_set-receive-buffer-size")]
                fn wit_import(_: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(value),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn send_buffer_size(this: TcpSocket) -> Result<u64, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "send-buffer-size")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_send-buffer-size")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(*((ptr0 + 8) as *const i64) as u64),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 8) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 8) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn set_send_buffer_size(this: TcpSocket, value: u64) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-send-buffer-size")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_set-send-buffer-size")]
                fn wit_import(_: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(value),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Get/set the blocking mode of the socket.
    ///
    /// By default a socket is in "blocking" mode, meaning that any function blocks and waits for its completion.
    /// When switched to "non-blocking" mode, operations that would block return an `again` error. After which
    /// the API consumer is expected to call `subscribe` and wait for completion using the wasi-poll module.
    ///
    /// Note: these functions are here for WASI Preview2 only.
    /// They're planned to be removed when `future` is natively supported in Preview3.
    pub fn non_blocking(this: TcpSocket) -> Result<bool, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "non-blocking")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_non-blocking")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<u8, bool>(i32::from(*((ptr0 + 1) as *const u8)) as u8)
                    }
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => false,
                            1 => true,
                            _ => panic!("invalid bool discriminant"),
                        }
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn set_non_blocking(this: TcpSocket, value: bool) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-non-blocking")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_set-non-blocking")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                match value {
                    true => 1,
                    false => 0,
                },
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Create a `pollable` which will resolve once the socket is ready for I/O.
    ///
    /// Note: this function is here for WASI Preview2 only.
    /// It's planned to be removed when `future` is natively supported in Preview3.
    pub fn subscribe(this: TcpSocket) -> Pollable {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "subscribe")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_subscribe")]
                fn wit_import(_: i32) -> i32;
            }
            let ret = wit_import(wit_bindgen::rt::as_i32(this));
            ret as u32
        }
    }
    #[allow(clippy::all)]
    /// Gracefully shut down the connection.
    ///
    /// - receive: the socket is not expecting to receive any more data from the peer. All subsequent read
    /// operations on the `input-stream` associated with this socket will return an End Of Stream indication.
    /// Any data still in the receive queue at time of calling `shutdown` will be discarded.
    /// - send: the socket is not expecting to send any more data to the peer. All subsequent write
    /// operations on the `output-stream` associated with this socket will return an error.
    /// - both: same effect as receive & send combined.
    ///
    /// The shutdown function does not close the socket.
    ///
    /// Fails when the socket is not in the Connection state.
    ///
    /// References
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/shutdown.html>
    /// - <https://man7.org/linux/man-pages/man2/shutdown.2.html>
    pub fn shutdown(this: TcpSocket, shutdown_type: ShutdownType) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "shutdown")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_shutdown")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                match shutdown_type {
                    ShutdownType::Receive => 0,
                    ShutdownType::Send => 1,
                    ShutdownType::Both => 2,
                },
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Dispose of the specified `tcp-socket`, after which it may no longer be used.
    ///
    /// Note: this function is scheduled to be removed when Resources are natively supported in Wit.
    pub fn drop_tcp_socket(this: TcpSocket) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "tcp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "drop-tcp-socket")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "tcp_drop-tcp-socket")]
                fn wit_import(_: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this));
        }
    }
}

#[allow(clippy::all)]
pub mod tcp_create_socket {
    pub type Error = super::network::Error;
    pub type IpAddressFamily = super::network::IpAddressFamily;
    pub type TcpSocket = super::tcp::TcpSocket;
    #[allow(clippy::all)]
    /// Create a new TCP socket.
    ///
    /// Similar to `socket(AF_INET or AF_INET6, SOCK_STREAM, IPPROTO_TCP)` in POSIX.
    ///
    /// This function does not require a network capability handle. This is considered to be safe because
    /// at time of creation, the socket is not bound to any `network` yet. Up to the moment `bind`/`listen`/`connect`
    /// is called, the socket is effectively an in-memory configuration object, unable to communicate with the outside world.
    ///
    /// References:
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html>
    /// - <https://man7.org/linux/man-pages/man2/socket.2.html>
    pub fn create_tcp_socket(address_family: IpAddressFamily) -> Result<TcpSocket, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 8]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "tcp-create-socket")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "create-tcp-socket")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "tcp-create-socket_create-tcp-socket"
                )]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(
                match address_family {
                    super::network::IpAddressFamily::Ipv4 => 0,
                    super::network::IpAddressFamily::Ipv6 => 1,
                },
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(*((ptr0 + 4) as *const i32) as u32),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 4) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
}

#[allow(clippy::all)]
pub mod udp {
    pub type Pollable = super::poll::Pollable;
    pub type Network = super::network::Network;
    pub type Error = super::network::Error;
    pub type IpSocketAddress = super::network::IpSocketAddress;
    pub type IpAddressFamily = super::network::IpAddressFamily;
    /// A UDP socket handle.
    pub type UdpSocket = u32;
    #[derive(Clone)]
    pub struct DatagramResult {
        pub data: wit_bindgen::rt::vec::Vec<u8>,
        pub remote_address: IpSocketAddress,
    }
    impl core::fmt::Debug for DatagramResult {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("DatagramResult")
                .field("data", &self.data)
                .field("remote-address", &self.remote_address)
                .finish()
        }
    }
    #[derive(Clone)]
    pub struct DatagramParam<'a> {
        pub data: &'a [u8],
        pub remote_address: IpSocketAddress,
    }
    impl<'a> core::fmt::Debug for DatagramParam<'a> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("DatagramParam")
                .field("data", &self.data)
                .field("remote-address", &self.remote_address)
                .finish()
        }
    }
    #[allow(clippy::all)]
    /// Bind the socket to a specific network on the provided IP address and port.
    ///
    /// If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), it is left to the implementation to decide which
    /// network interface(s) to bind to.
    /// If the TCP/UDP port is zero, the socket will be bound to a random free port.
    ///
    /// When a socket is not explicitly bound, the first invocation to a connect, send or receive operation will
    /// implicitly bind the socket.
    ///
    /// Fails when:
    /// - the socket is already bound.
    ///
    /// References
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html>
    /// - <https://man7.org/linux/man-pages/man2/bind.2.html>
    pub fn bind(
        this: UdpSocket,
        network: Network,
        local_address: IpSocketAddress,
    ) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let (
                result4_0,
                result4_1,
                result4_2,
                result4_3,
                result4_4,
                result4_5,
                result4_6,
                result4_7,
                result4_8,
                result4_9,
                result4_10,
                result4_11,
            ) = match local_address {
                super::network::IpSocketAddress::Ipv4(e) => {
                    let super::network::Ipv4SocketAddress {
                        port: port0,
                        address: address0,
                    } = e;
                    let (t1_0, t1_1, t1_2, t1_3) = address0;

                    (
                        0i32,
                        wit_bindgen::rt::as_i32(port0),
                        wit_bindgen::rt::as_i32(t1_0),
                        wit_bindgen::rt::as_i32(t1_1),
                        wit_bindgen::rt::as_i32(t1_2),
                        wit_bindgen::rt::as_i32(t1_3),
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                    )
                }
                super::network::IpSocketAddress::Ipv6(e) => {
                    let super::network::Ipv6SocketAddress {
                        port: port2,
                        flow_info: flow_info2,
                        address: address2,
                        scope_id: scope_id2,
                    } = e;
                    let (t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7) = address2;

                    (
                        1i32,
                        wit_bindgen::rt::as_i32(port2),
                        wit_bindgen::rt::as_i32(flow_info2),
                        wit_bindgen::rt::as_i32(t3_0),
                        wit_bindgen::rt::as_i32(t3_1),
                        wit_bindgen::rt::as_i32(t3_2),
                        wit_bindgen::rt::as_i32(t3_3),
                        wit_bindgen::rt::as_i32(t3_4),
                        wit_bindgen::rt::as_i32(t3_5),
                        wit_bindgen::rt::as_i32(t3_6),
                        wit_bindgen::rt::as_i32(t3_7),
                        wit_bindgen::rt::as_i32(scope_id2),
                    )
                }
            };
            let ptr5 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "bind")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_bind")]
                fn wit_import(
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                );
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i32(network),
                result4_0,
                result4_1,
                result4_2,
                result4_3,
                result4_4,
                result4_5,
                result4_6,
                result4_7,
                result4_8,
                result4_9,
                result4_10,
                result4_11,
                ptr5,
            );
            match i32::from(*((ptr5 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr5 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr5 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Set the destination address.
    ///
    /// The local-address is updated based on the best network path to `remote-address`.
    ///
    /// When a destination address is set:
    /// - all receive operations will only return datagrams sent from the provided `remote-address`.
    /// - the `send` function can only be used to send to this destination.
    ///
    /// Note that this function does not generate any network traffic and the peer is not aware of this "connection".
    ///
    /// Fails when:
    /// - the socket is already bound to a different network.
    ///
    /// References
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html>
    /// - <https://man7.org/linux/man-pages/man2/connect.2.html>
    pub fn connect(
        this: UdpSocket,
        network: Network,
        remote_address: IpSocketAddress,
    ) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let (
                result4_0,
                result4_1,
                result4_2,
                result4_3,
                result4_4,
                result4_5,
                result4_6,
                result4_7,
                result4_8,
                result4_9,
                result4_10,
                result4_11,
            ) = match remote_address {
                super::network::IpSocketAddress::Ipv4(e) => {
                    let super::network::Ipv4SocketAddress {
                        port: port0,
                        address: address0,
                    } = e;
                    let (t1_0, t1_1, t1_2, t1_3) = address0;

                    (
                        0i32,
                        wit_bindgen::rt::as_i32(port0),
                        wit_bindgen::rt::as_i32(t1_0),
                        wit_bindgen::rt::as_i32(t1_1),
                        wit_bindgen::rt::as_i32(t1_2),
                        wit_bindgen::rt::as_i32(t1_3),
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                    )
                }
                super::network::IpSocketAddress::Ipv6(e) => {
                    let super::network::Ipv6SocketAddress {
                        port: port2,
                        flow_info: flow_info2,
                        address: address2,
                        scope_id: scope_id2,
                    } = e;
                    let (t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7) = address2;

                    (
                        1i32,
                        wit_bindgen::rt::as_i32(port2),
                        wit_bindgen::rt::as_i32(flow_info2),
                        wit_bindgen::rt::as_i32(t3_0),
                        wit_bindgen::rt::as_i32(t3_1),
                        wit_bindgen::rt::as_i32(t3_2),
                        wit_bindgen::rt::as_i32(t3_3),
                        wit_bindgen::rt::as_i32(t3_4),
                        wit_bindgen::rt::as_i32(t3_5),
                        wit_bindgen::rt::as_i32(t3_6),
                        wit_bindgen::rt::as_i32(t3_7),
                        wit_bindgen::rt::as_i32(scope_id2),
                    )
                }
            };
            let ptr5 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "connect")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_connect")]
                fn wit_import(
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                );
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i32(network),
                result4_0,
                result4_1,
                result4_2,
                result4_3,
                result4_4,
                result4_5,
                result4_6,
                result4_7,
                result4_8,
                result4_9,
                result4_10,
                result4_11,
                ptr5,
            );
            match i32::from(*((ptr5 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr5 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr5 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Receive a message.
    ///
    /// Returns:
    /// - The sender address of the datagram
    /// - The number of bytes read.
    ///
    /// Fails when:
    /// - the socket is not bound.
    ///
    /// References
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvfrom.html>
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvmsg.html>
    /// - <https://man7.org/linux/man-pages/man2/recv.2.html>
    pub fn receive(this: UdpSocket) -> Result<DatagramResult, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 44]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "receive")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_receive")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    let len1 = *((ptr0 + 8) as *const i32) as usize;

                    DatagramResult {
                        data: Vec::from_raw_parts(
                            *((ptr0 + 4) as *const i32) as *mut _,
                            len1,
                            len1,
                        ),
                        remote_address: {
                            {
                                match i32::from(*((ptr0 + 12) as *const u8)) {
                                    0 => super::network::IpSocketAddress::Ipv4(
                                        super::network::Ipv4SocketAddress {
                                            port: i32::from(*((ptr0 + 16) as *const u16)) as u16,
                                            address: (
                                                i32::from(*((ptr0 + 18) as *const u8)) as u8,
                                                i32::from(*((ptr0 + 19) as *const u8)) as u8,
                                                i32::from(*((ptr0 + 20) as *const u8)) as u8,
                                                i32::from(*((ptr0 + 21) as *const u8)) as u8,
                                            ),
                                        },
                                    ),
                                    #[cfg(debug_assertions)]
                                    1 => super::network::IpSocketAddress::Ipv6(
                                        super::network::Ipv6SocketAddress {
                                            port: i32::from(*((ptr0 + 16) as *const u16)) as u16,
                                            flow_info: *((ptr0 + 20) as *const i32) as u32,
                                            address: (
                                                i32::from(*((ptr0 + 24) as *const u16)) as u16,
                                                i32::from(*((ptr0 + 26) as *const u16)) as u16,
                                                i32::from(*((ptr0 + 28) as *const u16)) as u16,
                                                i32::from(*((ptr0 + 30) as *const u16)) as u16,
                                                i32::from(*((ptr0 + 32) as *const u16)) as u16,
                                                i32::from(*((ptr0 + 34) as *const u16)) as u16,
                                                i32::from(*((ptr0 + 36) as *const u16)) as u16,
                                                i32::from(*((ptr0 + 38) as *const u16)) as u16,
                                            ),
                                            scope_id: *((ptr0 + 40) as *const i32) as u32,
                                        },
                                    ),
                                    #[cfg(not(debug_assertions))]
                                    _ => super::network::IpSocketAddress::Ipv6(
                                        super::network::Ipv6SocketAddress {
                                            port: i32::from(*((ptr0 + 16) as *const u16)) as u16,
                                            flow_info: *((ptr0 + 20) as *const i32) as u32,
                                            address: (
                                                i32::from(*((ptr0 + 24) as *const u16)) as u16,
                                                i32::from(*((ptr0 + 26) as *const u16)) as u16,
                                                i32::from(*((ptr0 + 28) as *const u16)) as u16,
                                                i32::from(*((ptr0 + 30) as *const u16)) as u16,
                                                i32::from(*((ptr0 + 32) as *const u16)) as u16,
                                                i32::from(*((ptr0 + 34) as *const u16)) as u16,
                                                i32::from(*((ptr0 + 36) as *const u16)) as u16,
                                                i32::from(*((ptr0 + 38) as *const u16)) as u16,
                                            ),
                                            scope_id: *((ptr0 + 40) as *const i32) as u32,
                                        },
                                    ),
                                    #[cfg(debug_assertions)]
                                    _ => panic!("invalid enum discriminant"),
                                }
                            }
                        },
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 4) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Send a message to a specific destination address.
    ///
    /// The remote address option is required. To send a message to the "connected" peer,
    /// call `remote-address` to get their address.
    ///
    /// Fails when:
    /// - the socket is not bound. Unlike POSIX, this function does not perform an implicit bind.
    /// - the socket is in "connected" mode and the `datagram.remote-address` does not match the address passed to `connect`.
    ///
    /// References
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendto.html>
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendmsg.html>
    /// - <https://man7.org/linux/man-pages/man2/send.2.html>
    pub fn send(this: UdpSocket, datagram: DatagramParam<'_>) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let DatagramParam {
                data: data0,
                remote_address: remote_address0,
            } = datagram;
            let vec1 = data0;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            let (
                result6_0,
                result6_1,
                result6_2,
                result6_3,
                result6_4,
                result6_5,
                result6_6,
                result6_7,
                result6_8,
                result6_9,
                result6_10,
                result6_11,
            ) = match remote_address0 {
                super::network::IpSocketAddress::Ipv4(e) => {
                    let super::network::Ipv4SocketAddress {
                        port: port2,
                        address: address2,
                    } = e;
                    let (t3_0, t3_1, t3_2, t3_3) = address2;

                    (
                        0i32,
                        wit_bindgen::rt::as_i32(port2),
                        wit_bindgen::rt::as_i32(t3_0),
                        wit_bindgen::rt::as_i32(t3_1),
                        wit_bindgen::rt::as_i32(t3_2),
                        wit_bindgen::rt::as_i32(t3_3),
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                        0i32,
                    )
                }
                super::network::IpSocketAddress::Ipv6(e) => {
                    let super::network::Ipv6SocketAddress {
                        port: port4,
                        flow_info: flow_info4,
                        address: address4,
                        scope_id: scope_id4,
                    } = e;
                    let (t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7) = address4;

                    (
                        1i32,
                        wit_bindgen::rt::as_i32(port4),
                        wit_bindgen::rt::as_i32(flow_info4),
                        wit_bindgen::rt::as_i32(t5_0),
                        wit_bindgen::rt::as_i32(t5_1),
                        wit_bindgen::rt::as_i32(t5_2),
                        wit_bindgen::rt::as_i32(t5_3),
                        wit_bindgen::rt::as_i32(t5_4),
                        wit_bindgen::rt::as_i32(t5_5),
                        wit_bindgen::rt::as_i32(t5_6),
                        wit_bindgen::rt::as_i32(t5_7),
                        wit_bindgen::rt::as_i32(scope_id4),
                    )
                }
            };
            let ptr7 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "send")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_send")]
                fn wit_import(
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                    _: i32,
                );
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                ptr1,
                len1,
                result6_0,
                result6_1,
                result6_2,
                result6_3,
                result6_4,
                result6_5,
                result6_6,
                result6_7,
                result6_8,
                result6_9,
                result6_10,
                result6_11,
                ptr7,
            );
            match i32::from(*((ptr7 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr7 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr7 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Get the current bound address.
    ///
    /// Returns an error if the socket is not bound.
    ///
    /// References
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockname.html>
    /// - <https://man7.org/linux/man-pages/man2/getsockname.2.html>
    pub fn local_address(this: UdpSocket) -> Result<IpSocketAddress, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 36]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "local-address")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_local-address")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => super::network::IpSocketAddress::Ipv4(
                                super::network::Ipv4SocketAddress {
                                    port: i32::from(*((ptr0 + 8) as *const u16)) as u16,
                                    address: (
                                        i32::from(*((ptr0 + 10) as *const u8)) as u8,
                                        i32::from(*((ptr0 + 11) as *const u8)) as u8,
                                        i32::from(*((ptr0 + 12) as *const u8)) as u8,
                                        i32::from(*((ptr0 + 13) as *const u8)) as u8,
                                    ),
                                },
                            ),
                            #[cfg(debug_assertions)]
                            1 => super::network::IpSocketAddress::Ipv6(
                                super::network::Ipv6SocketAddress {
                                    port: i32::from(*((ptr0 + 8) as *const u16)) as u16,
                                    flow_info: *((ptr0 + 12) as *const i32) as u32,
                                    address: (
                                        i32::from(*((ptr0 + 16) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 18) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 20) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 22) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 24) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 26) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 28) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 30) as *const u16)) as u16,
                                    ),
                                    scope_id: *((ptr0 + 32) as *const i32) as u32,
                                },
                            ),
                            #[cfg(not(debug_assertions))]
                            _ => super::network::IpSocketAddress::Ipv6(
                                super::network::Ipv6SocketAddress {
                                    port: i32::from(*((ptr0 + 8) as *const u16)) as u16,
                                    flow_info: *((ptr0 + 12) as *const i32) as u32,
                                    address: (
                                        i32::from(*((ptr0 + 16) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 18) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 20) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 22) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 24) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 26) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 28) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 30) as *const u16)) as u16,
                                    ),
                                    scope_id: *((ptr0 + 32) as *const i32) as u32,
                                },
                            ),
                            #[cfg(debug_assertions)]
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 4) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Get the address set with `connect`.
    ///
    /// References
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getpeername.html>
    /// - <https://man7.org/linux/man-pages/man2/getpeername.2.html>
    pub fn remote_address(this: UdpSocket) -> Result<IpSocketAddress, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 36]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "remote-address")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_remote-address")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => super::network::IpSocketAddress::Ipv4(
                                super::network::Ipv4SocketAddress {
                                    port: i32::from(*((ptr0 + 8) as *const u16)) as u16,
                                    address: (
                                        i32::from(*((ptr0 + 10) as *const u8)) as u8,
                                        i32::from(*((ptr0 + 11) as *const u8)) as u8,
                                        i32::from(*((ptr0 + 12) as *const u8)) as u8,
                                        i32::from(*((ptr0 + 13) as *const u8)) as u8,
                                    ),
                                },
                            ),
                            #[cfg(debug_assertions)]
                            1 => super::network::IpSocketAddress::Ipv6(
                                super::network::Ipv6SocketAddress {
                                    port: i32::from(*((ptr0 + 8) as *const u16)) as u16,
                                    flow_info: *((ptr0 + 12) as *const i32) as u32,
                                    address: (
                                        i32::from(*((ptr0 + 16) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 18) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 20) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 22) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 24) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 26) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 28) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 30) as *const u16)) as u16,
                                    ),
                                    scope_id: *((ptr0 + 32) as *const i32) as u32,
                                },
                            ),
                            #[cfg(not(debug_assertions))]
                            _ => super::network::IpSocketAddress::Ipv6(
                                super::network::Ipv6SocketAddress {
                                    port: i32::from(*((ptr0 + 8) as *const u16)) as u16,
                                    flow_info: *((ptr0 + 12) as *const i32) as u32,
                                    address: (
                                        i32::from(*((ptr0 + 16) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 18) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 20) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 22) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 24) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 26) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 28) as *const u16)) as u16,
                                        i32::from(*((ptr0 + 30) as *const u16)) as u16,
                                    ),
                                    scope_id: *((ptr0 + 32) as *const i32) as u32,
                                },
                            ),
                            #[cfg(debug_assertions)]
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 4) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Whether this is a IPv4 or IPv6 socket.
    ///
    /// Equivalent to the SO_DOMAIN socket option.
    pub fn address_family(this: UdpSocket) -> Result<IpAddressFamily, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "address-family")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_address-family")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::IpAddressFamily::Ipv4,
                            1 => super::network::IpAddressFamily::Ipv6,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::IpAddressFamily>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Whether IPv4 compatibility (dual-stack) mode is disabled or not.
    /// Implementations are not required to support dual-stack mode, so calling `set-ipv6-only(false)` might fail.
    ///
    /// Fails when called on an IPv4 socket.
    ///
    /// Equivalent to the IPV6_V6ONLY socket option.
    pub fn ipv6_only(this: UdpSocket) -> Result<bool, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "ipv6-only")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_ipv6-only")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<u8, bool>(i32::from(*((ptr0 + 1) as *const u8)) as u8)
                    }
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => false,
                            1 => true,
                            _ => panic!("invalid bool discriminant"),
                        }
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn set_ipv6_only(this: UdpSocket, value: bool) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-ipv6-only")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_set-ipv6-only")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                match value {
                    true => 1,
                    false => 0,
                },
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Equivalent to the IP_TTL & IPV6_UNICAST_HOPS socket options.
    pub fn unicast_hop_limit(this: UdpSocket) -> Result<u8, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "unicast-hop-limit")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_unicast-hop-limit")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(i32::from(*((ptr0 + 1) as *const u8)) as u8),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn set_unicast_hop_limit(this: UdpSocket, value: u8) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-unicast-hop-limit")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_set-unicast-hop-limit")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i32(value),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// The kernel buffer space reserved for sends/receives on this socket.
    ///
    /// Note #1: an implementation may choose to cap or round the buffer size when setting the value.
    /// In other words, after setting a value, reading the same setting back may return a different value.
    ///
    /// Note #2: there is not necessarily a direct relationship between the kernel buffer size and the bytes of
    /// actual data to be sent/received by the application, because the kernel might also use the buffer space
    /// for internal metadata structures.
    ///
    /// Fails when this socket is in the Listening state.
    ///
    /// Equivalent to the SO_RCVBUF and SO_SNDBUF socket options.
    pub fn receive_buffer_size(this: UdpSocket) -> Result<u64, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "receive-buffer-size")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_receive-buffer-size")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(*((ptr0 + 8) as *const i64) as u64),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 8) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 8) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn set_receive_buffer_size(this: UdpSocket, value: u64) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-receive-buffer-size")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_set-receive-buffer-size")]
                fn wit_import(_: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(value),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn send_buffer_size(this: UdpSocket) -> Result<u64, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "send-buffer-size")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_send-buffer-size")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(*((ptr0 + 8) as *const i64) as u64),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 8) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 8) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn set_send_buffer_size(this: UdpSocket, value: u64) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-send-buffer-size")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_set-send-buffer-size")]
                fn wit_import(_: i32, _: i64, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                wit_bindgen::rt::as_i64(value),
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Get/set the blocking mode of the socket.
    ///
    /// By default a socket is in "blocking" mode, meaning that any function blocks and waits for its completion.
    /// When switched to "non-blocking" mode, operations that would block return an `again` error. After which
    /// the API consumer is expected to call `subscribe` and wait for completion using the wasi-poll module.
    ///
    /// Note: these functions are here for WASI Preview2 only.
    /// They're planned to be removed when `future` is natively supported in Preview3.
    pub fn non_blocking(this: UdpSocket) -> Result<bool, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "non-blocking")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_non-blocking")]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this), ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<u8, bool>(i32::from(*((ptr0 + 1) as *const u8)) as u8)
                    }
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => false,
                            1 => true,
                            _ => panic!("invalid bool discriminant"),
                        }
                    }
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    pub fn set_non_blocking(this: UdpSocket, value: bool) -> Result<(), Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set-non-blocking")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_set-non-blocking")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(
                wit_bindgen::rt::as_i32(this),
                match value {
                    true => 1,
                    false => 0,
                },
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 1) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 1) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// Create a `pollable` which will resolve once the socket is ready for I/O.
    ///
    /// Note: this function is here for WASI Preview2 only.
    /// It's planned to be removed when `future` is natively supported in Preview3.
    pub fn subscribe(this: UdpSocket) -> Pollable {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "subscribe")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_subscribe")]
                fn wit_import(_: i32) -> i32;
            }
            let ret = wit_import(wit_bindgen::rt::as_i32(this));
            ret as u32
        }
    }
    #[allow(clippy::all)]
    /// Dispose of the specified `udp-socket`, after which it may no longer be used.
    ///
    /// Note: this function is scheduled to be removed when Resources are natively supported in Wit.
    pub fn drop_udp_socket(this: UdpSocket) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "udp")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "drop-udp-socket")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "udp_drop-udp-socket")]
                fn wit_import(_: i32);
            }
            wit_import(wit_bindgen::rt::as_i32(this));
        }
    }
}

#[allow(clippy::all)]
pub mod udp_create_socket {
    pub type Error = super::network::Error;
    pub type IpAddressFamily = super::network::IpAddressFamily;
    pub type UdpSocket = super::udp::UdpSocket;
    #[allow(clippy::all)]
    /// Create a new UDP socket.
    ///
    /// Similar to `socket(AF_INET or AF_INET6, SOCK_DGRAM, IPPROTO_UDP)` in POSIX.
    ///
    /// This function does not require a network capability handle. This is considered to be safe because
    /// at time of creation, the socket is not bound to any `network` yet. Up to the moment `bind`/`connect` is called,
    /// the socket is effectively an in-memory configuration object, unable to communicate with the outside world.
    ///
    /// References:
    /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html>
    /// - <https://man7.org/linux/man-pages/man2/socket.2.html>
    pub fn create_udp_socket(address_family: IpAddressFamily) -> Result<UdpSocket, Error> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 8]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "udp-create-socket")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "create-udp-socket")]
                #[cfg_attr(
                    not(target_arch = "wasm32"),
                    link_name = "udp-create-socket_create-udp-socket"
                )]
                fn wit_import(_: i32, _: i32);
            }
            wit_import(
                match address_family {
                    super::network::IpAddressFamily::Ipv4 => 0,
                    super::network::IpAddressFamily::Ipv6 => 1,
                },
                ptr0,
            );
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok(*((ptr0 + 4) as *const i32) as u32),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => super::network::Error::Unknown,
                            1 => super::network::Error::Again,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, super::network::Error>(i32::from(
                            *((ptr0 + 4) as *const u8),
                        )
                            as u8)
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
}

#[allow(clippy::all)]
pub mod random {
    #[allow(clippy::all)]
    /// Return `len` cryptographically-secure pseudo-random bytes.
    ///
    /// This function must produce data from an adequately seeded
    /// cryptographically-secure pseudo-random number generator (CSPRNG), so it
    /// must not block, from the perspective of the calling program, and the
    /// returned data is always unpredictable.
    ///
    /// This function must always return fresh pseudo-random data. Deterministic
    /// environments must omit this function, rather than implementing it with
    /// deterministic data.
    pub fn get_random_bytes(len: u64) -> wit_bindgen::rt::vec::Vec<u8> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 8]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "random")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "get-random-bytes")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "random_get-random-bytes")]
                fn wit_import(_: i64, _: i32);
            }
            wit_import(wit_bindgen::rt::as_i64(len), ptr0);
            let len1 = *((ptr0 + 4) as *const i32) as usize;
            Vec::from_raw_parts(*((ptr0 + 0) as *const i32) as *mut _, len1, len1)
        }
    }
    #[allow(clippy::all)]
    /// Return a cryptographically-secure pseudo-random `u64` value.
    ///
    /// This function returns the same type of pseudo-random data as
    /// `get-random-bytes`, represented as a `u64`.
    pub fn get_random_u64() -> u64 {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[link(wasm_import_module = "random")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "get-random-u64")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "random_get-random-u64")]
                fn wit_import() -> i64;
            }
            let ret = wit_import();
            ret as u64
        }
    }
    #[allow(clippy::all)]
    /// Return a 128-bit value that may contain a pseudo-random value.
    ///
    /// The returned value is not required to be computed from a CSPRNG, and may
    /// even be entirely deterministic. Host implementations are encouraged to
    /// provide pseudo-random values to any program exposed to
    /// attacker-controlled content, to enable DoS protection built into many
    /// languages' hash-map implementations.
    ///
    /// This function is intended to only be called once, by a source language
    /// to initialize Denial Of Service (DoS) protection in its hash-map
    /// implementation.
    ///
    /// # Expected future evolution
    ///
    /// This will likely be changed to a value import, to prevent it from being
    /// called multiple times and potentially used for purposes other than DoS
    /// protection.
    pub fn insecure_random() -> (u64, u64) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "random")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "insecure-random")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "random_insecure-random")]
                fn wit_import(_: i32);
            }
            wit_import(ptr0);
            (
                *((ptr0 + 0) as *const i64) as u64,
                *((ptr0 + 8) as *const i64) as u64,
            )
        }
    }
}

#[allow(clippy::all)]
pub mod environment {
    #[allow(clippy::all)]
    /// Get the POSIX-style environment variables.
    ///
    /// Each environment variable is provided as a pair of string variable names
    /// and string value.
    ///
    /// Morally, these are a value import, but until value imports are available
    /// in the component model, this import function should return the same
    /// values each time it is called.
    pub fn get_environment() -> wit_bindgen::rt::vec::Vec<(
        wit_bindgen::rt::string::String,
        wit_bindgen::rt::string::String,
    )> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 8]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "environment")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "get-environment")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "environment_get-environment")]
                fn wit_import(_: i32);
            }
            wit_import(ptr0);
            let base3 = *((ptr0 + 0) as *const i32);
            let len3 = *((ptr0 + 4) as *const i32);
            let mut result3 = Vec::with_capacity(len3 as usize);
            for i in 0..len3 {
                let base = base3 + i * 16;
                result3.push({
                    let len1 = *((base + 4) as *const i32) as usize;
                    let len2 = *((base + 12) as *const i32) as usize;

                    (
                        {
                            #[cfg(not(debug_assertions))]
                            {
                                String::from_utf8_unchecked(Vec::from_raw_parts(
                                    *((base + 0) as *const i32) as *mut _,
                                    len1,
                                    len1,
                                ))
                            }
                            #[cfg(debug_assertions)]
                            {
                                String::from_utf8(Vec::from_raw_parts(
                                    *((base + 0) as *const i32) as *mut _,
                                    len1,
                                    len1,
                                ))
                                .unwrap()
                            }
                        },
                        {
                            #[cfg(not(debug_assertions))]
                            {
                                String::from_utf8_unchecked(Vec::from_raw_parts(
                                    *((base + 8) as *const i32) as *mut _,
                                    len2,
                                    len2,
                                ))
                            }
                            #[cfg(debug_assertions)]
                            {
                                String::from_utf8(Vec::from_raw_parts(
                                    *((base + 8) as *const i32) as *mut _,
                                    len2,
                                    len2,
                                ))
                                .unwrap()
                            }
                        },
                    )
                });
            }
            wit_bindgen::rt::dealloc(base3, (len3 as usize) * 16, 4);
            result3
        }
    }
}

#[allow(clippy::all)]
pub mod preopens {
    pub type Descriptor = super::filesystem::Descriptor;
    pub type InputStream = super::streams::InputStream;
    pub type OutputStream = super::streams::OutputStream;
    /// Stdio preopens: these are the resources that provide stdin, stdout, and
    /// stderr.
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct StdioPreopens {
        pub stdin: InputStream,
        pub stdout: OutputStream,
        pub stderr: OutputStream,
    }
    impl core::fmt::Debug for StdioPreopens {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("StdioPreopens")
                .field("stdin", &self.stdin)
                .field("stdout", &self.stdout)
                .field("stderr", &self.stderr)
                .finish()
        }
    }
    #[allow(clippy::all)]
    /// Return the set of stdio preopens.
    pub fn get_stdio() -> StdioPreopens {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "preopens")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "get-stdio")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "preopens_get-stdio")]
                fn wit_import(_: i32);
            }
            wit_import(ptr0);
            StdioPreopens {
                stdin: *((ptr0 + 0) as *const i32) as u32,
                stdout: *((ptr0 + 4) as *const i32) as u32,
                stderr: *((ptr0 + 8) as *const i32) as u32,
            }
        }
    }
    #[allow(clippy::all)]
    /// Return the set of of preopened directories, and their path.
    pub fn get_directories(
    ) -> wit_bindgen::rt::vec::Vec<(Descriptor, wit_bindgen::rt::string::String)> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 8]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "preopens")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "get-directories")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "preopens_get-directories")]
                fn wit_import(_: i32);
            }
            wit_import(ptr0);
            let base2 = *((ptr0 + 0) as *const i32);
            let len2 = *((ptr0 + 4) as *const i32);
            let mut result2 = Vec::with_capacity(len2 as usize);
            for i in 0..len2 {
                let base = base2 + i * 12;
                result2.push({
                    let len1 = *((base + 8) as *const i32) as usize;

                    (*((base + 0) as *const i32) as u32, {
                        #[cfg(not(debug_assertions))]
                        {
                            String::from_utf8_unchecked(Vec::from_raw_parts(
                                *((base + 4) as *const i32) as *mut _,
                                len1,
                                len1,
                            ))
                        }
                        #[cfg(debug_assertions)]
                        {
                            String::from_utf8(Vec::from_raw_parts(
                                *((base + 4) as *const i32) as *mut _,
                                len1,
                                len1,
                            ))
                            .unwrap()
                        }
                    })
                });
            }
            wit_bindgen::rt::dealloc(base2, (len2 as usize) * 12, 4);
            result2
        }
    }
}

#[allow(clippy::all)]
pub mod exit {
    #[allow(clippy::all)]
    /// Exit the curerent instance and any linked instances.
    pub fn exit(status: Result<(), ()>) {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            let result0 = match status {
                Ok(_) => 0i32,
                Err(_) => 1i32,
            };
            #[link(wasm_import_module = "exit")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "exit")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "exit_exit")]
                fn wit_import(_: i32);
            }
            wit_import(result0);
        }
    }
}

pub trait Command {
    fn main(args: wit_bindgen::rt::vec::Vec<wit_bindgen::rt::string::String>) -> Result<(), ()>;
}

#[doc(hidden)]
pub unsafe fn call_main<T: Command>(arg0: i32, arg1: i32) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, string::String, vec::Vec};

    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch = "wasm32")]
    wit_bindgen::rt::run_ctors_once();

    let base1 = arg0;
    let len1 = arg1;
    let mut result1 = Vec::with_capacity(len1 as usize);
    for i in 0..len1 {
        let base = base1 + i * 8;
        result1.push({
            let len0 = *((base + 4) as *const i32) as usize;

            {
                #[cfg(not(debug_assertions))]
                {
                    String::from_utf8_unchecked(Vec::from_raw_parts(
                        *((base + 0) as *const i32) as *mut _,
                        len0,
                        len0,
                    ))
                }
                #[cfg(debug_assertions)]
                {
                    String::from_utf8(Vec::from_raw_parts(
                        *((base + 0) as *const i32) as *mut _,
                        len0,
                        len0,
                    ))
                    .unwrap()
                }
            }
        });
    }
    wit_bindgen::rt::dealloc(base1, (len1 as usize) * 8, 4);
    let result2 = T::main(result1);
    let result3 = match result2 {
        Ok(_) => 0i32,
        Err(_) => 1i32,
    };
    result3
}

/// Declares the export of the component's world for the
/// given type.
#[macro_export]
macro_rules! export_command(($t:ident) => {
    const _: () = {

      #[doc(hidden)]
      #[export_name = "main"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn __export_command_main(arg0: i32,arg1: i32,) -> i32 {
        call_main::<$t>(arg0,arg1,)
      }

    };

    #[used]
    #[doc(hidden)]
    #[cfg(target_arch = "wasm32")]
    static __FORCE_SECTION_REF: fn() = __force_section_ref;
    #[doc(hidden)]
    #[cfg(target_arch = "wasm32")]
    fn __force_section_ref() {
      __link_section()
    }
  });

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:command"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 22512] = [
    2, 0, 3, 119, 105, 116, 7, 99, 111, 109, 109, 97, 110, 100, 7, 99, 111, 109, 109, 97, 110, 100,
    0, 97, 115, 109, 12, 0, 1, 0, 7, 215, 27, 1, 65, 2, 1, 65, 22, 1, 66, 8, 1, 112, 125, 1, 64, 1,
    3, 108, 101, 110, 119, 0, 0, 4, 16, 103, 101, 116, 45, 114, 97, 110, 100, 111, 109, 45, 98,
    121, 116, 101, 115, 0, 1, 1, 1, 64, 0, 0, 119, 4, 14, 103, 101, 116, 45, 114, 97, 110, 100,
    111, 109, 45, 117, 54, 52, 0, 1, 2, 1, 111, 2, 119, 119, 1, 64, 0, 0, 3, 4, 15, 105, 110, 115,
    101, 99, 117, 114, 101, 45, 114, 97, 110, 100, 111, 109, 0, 1, 4, 3, 6, 114, 97, 110, 100, 111,
    109, 26, 112, 97, 116, 104, 58, 47, 114, 97, 110, 100, 111, 109, 47, 114, 97, 110, 100, 111,
    109, 47, 114, 97, 110, 100, 111, 109, 5, 0, 1, 66, 4, 1, 109, 5, 5, 116, 114, 97, 99, 101, 5,
    100, 101, 98, 117, 103, 4, 105, 110, 102, 111, 4, 119, 97, 114, 110, 5, 101, 114, 114, 111,
    114, 4, 5, 108, 101, 118, 101, 108, 0, 3, 0, 0, 1, 64, 3, 5, 108, 101, 118, 101, 108, 1, 7, 99,
    111, 110, 116, 101, 120, 116, 115, 7, 109, 101, 115, 115, 97, 103, 101, 115, 1, 0, 4, 3, 108,
    111, 103, 0, 1, 2, 3, 7, 99, 111, 110, 115, 111, 108, 101, 29, 112, 97, 116, 104, 58, 47, 108,
    111, 103, 103, 105, 110, 103, 47, 104, 97, 110, 100, 108, 101, 114, 47, 104, 97, 110, 100, 108,
    101, 114, 5, 1, 1, 66, 8, 1, 121, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 1,
    64, 1, 4, 116, 104, 105, 115, 1, 1, 0, 4, 13, 100, 114, 111, 112, 45, 112, 111, 108, 108, 97,
    98, 108, 101, 0, 1, 2, 1, 112, 1, 1, 112, 125, 1, 64, 1, 2, 105, 110, 3, 0, 4, 4, 11, 112, 111,
    108, 108, 45, 111, 110, 101, 111, 102, 102, 0, 1, 5, 3, 4, 112, 111, 108, 108, 20, 112, 97,
    116, 104, 58, 47, 112, 111, 108, 108, 47, 112, 111, 108, 108, 47, 112, 111, 108, 108, 5, 2, 2,
    3, 0, 2, 8, 112, 111, 108, 108, 97, 98, 108, 101, 1, 66, 39, 2, 3, 2, 1, 3, 4, 8, 112, 111,
    108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 1, 114, 0, 4, 12, 115, 116, 114, 101, 97, 109, 45, 101,
    114, 114, 111, 114, 0, 3, 0, 2, 1, 121, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114,
    101, 97, 109, 0, 3, 0, 4, 1, 121, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97,
    109, 0, 3, 0, 6, 1, 112, 125, 1, 111, 2, 8, 127, 1, 106, 1, 9, 1, 3, 1, 64, 2, 4, 116, 104,
    105, 115, 7, 3, 108, 101, 110, 119, 0, 10, 4, 4, 114, 101, 97, 100, 0, 1, 11, 4, 13, 98, 108,
    111, 99, 107, 105, 110, 103, 45, 114, 101, 97, 100, 0, 1, 11, 1, 111, 2, 119, 127, 1, 106, 1,
    12, 1, 3, 1, 64, 2, 4, 116, 104, 105, 115, 7, 3, 108, 101, 110, 119, 0, 13, 4, 4, 115, 107,
    105, 112, 0, 1, 14, 4, 13, 98, 108, 111, 99, 107, 105, 110, 103, 45, 115, 107, 105, 112, 0, 1,
    14, 1, 64, 1, 4, 116, 104, 105, 115, 7, 0, 1, 4, 25, 115, 117, 98, 115, 99, 114, 105, 98, 101,
    45, 116, 111, 45, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 1, 15, 1, 64, 1,
    4, 116, 104, 105, 115, 7, 1, 0, 4, 17, 100, 114, 111, 112, 45, 105, 110, 112, 117, 116, 45,
    115, 116, 114, 101, 97, 109, 0, 1, 16, 1, 106, 1, 119, 1, 3, 1, 64, 2, 4, 116, 104, 105, 115,
    5, 3, 98, 117, 102, 8, 0, 17, 4, 5, 119, 114, 105, 116, 101, 0, 1, 18, 4, 14, 98, 108, 111, 99,
    107, 105, 110, 103, 45, 119, 114, 105, 116, 101, 0, 1, 18, 1, 64, 2, 4, 116, 104, 105, 115, 5,
    3, 108, 101, 110, 119, 0, 17, 4, 12, 119, 114, 105, 116, 101, 45, 122, 101, 114, 111, 101, 115,
    0, 1, 19, 4, 21, 98, 108, 111, 99, 107, 105, 110, 103, 45, 119, 114, 105, 116, 101, 45, 122,
    101, 114, 111, 101, 115, 0, 1, 19, 1, 64, 3, 4, 116, 104, 105, 115, 5, 3, 115, 114, 99, 7, 3,
    108, 101, 110, 119, 0, 13, 4, 6, 115, 112, 108, 105, 99, 101, 0, 1, 20, 4, 15, 98, 108, 111,
    99, 107, 105, 110, 103, 45, 115, 112, 108, 105, 99, 101, 0, 1, 20, 1, 64, 2, 4, 116, 104, 105,
    115, 5, 3, 115, 114, 99, 7, 0, 17, 4, 7, 102, 111, 114, 119, 97, 114, 100, 0, 1, 21, 1, 64, 1,
    4, 116, 104, 105, 115, 5, 0, 1, 4, 26, 115, 117, 98, 115, 99, 114, 105, 98, 101, 45, 116, 111,
    45, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 1, 22, 1, 64, 1, 4, 116,
    104, 105, 115, 5, 1, 0, 4, 18, 100, 114, 111, 112, 45, 111, 117, 116, 112, 117, 116, 45, 115,
    116, 114, 101, 97, 109, 0, 1, 23, 3, 7, 115, 116, 114, 101, 97, 109, 115, 24, 112, 97, 116,
    104, 58, 47, 105, 111, 47, 115, 116, 114, 101, 97, 109, 115, 47, 115, 116, 114, 101, 97, 109,
    115, 5, 4, 2, 3, 0, 3, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 2, 3, 0,
    3, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 1, 66, 110, 2, 3, 2, 1,
    5, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 0, 2, 3, 2, 1, 6,
    4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 2, 2, 3, 2, 1,
    3, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 4, 1, 123, 4, 11, 115, 116, 97, 116,
    117, 115, 45, 99, 111, 100, 101, 0, 3, 0, 6, 1, 113, 3, 4, 72, 84, 84, 80, 0, 0, 5, 72, 84, 84,
    80, 83, 0, 0, 5, 111, 116, 104, 101, 114, 1, 115, 0, 4, 6, 115, 99, 104, 101, 109, 101, 0, 3,
    0, 8, 1, 121, 4, 17, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114,
    97, 109, 0, 3, 0, 10, 1, 107, 121, 1, 114, 3, 18, 99, 111, 110, 110, 101, 99, 116, 45, 116,
    105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 21, 102, 105, 114, 115, 116, 45, 98, 121, 116,
    101, 45, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 24, 98, 101, 116, 119, 101, 101,
    110, 45, 98, 121, 116, 101, 115, 45, 116, 105, 109, 101, 111, 117, 116, 45, 109, 115, 12, 4,
    15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 0, 3, 0, 13, 4,
    15, 111, 117, 116, 103, 111, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 3, 1,
    121, 4, 17, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101,
    0, 3, 0, 16, 1, 121, 4, 16, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117,
    101, 115, 116, 0, 3, 0, 18, 1, 113, 10, 3, 103, 101, 116, 0, 0, 4, 104, 101, 97, 100, 0, 0, 4,
    112, 111, 115, 116, 0, 0, 3, 112, 117, 116, 0, 0, 6, 100, 101, 108, 101, 116, 101, 0, 0, 7, 99,
    111, 110, 110, 101, 99, 116, 0, 0, 7, 111, 112, 116, 105, 111, 110, 115, 0, 0, 5, 116, 114, 97,
    99, 101, 0, 0, 5, 112, 97, 116, 99, 104, 0, 0, 5, 111, 116, 104, 101, 114, 1, 115, 0, 4, 6,
    109, 101, 116, 104, 111, 100, 0, 3, 0, 20, 4, 15, 105, 110, 99, 111, 109, 105, 110, 103, 45,
    115, 116, 114, 101, 97, 109, 0, 3, 0, 1, 1, 121, 4, 17, 105, 110, 99, 111, 109, 105, 110, 103,
    45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 23, 1, 121, 4, 16, 105, 110, 99, 111, 109,
    105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 25, 1, 121, 4, 24, 102, 117,
    116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111,
    110, 115, 101, 0, 3, 0, 27, 1, 121, 4, 6, 102, 105, 101, 108, 100, 115, 0, 3, 0, 29, 4, 8, 116,
    114, 97, 105, 108, 101, 114, 115, 0, 3, 0, 30, 4, 7, 104, 101, 97, 100, 101, 114, 115, 0, 3, 0,
    30, 1, 113, 4, 11, 105, 110, 118, 97, 108, 105, 100, 45, 117, 114, 108, 1, 115, 0, 13, 116,
    105, 109, 101, 111, 117, 116, 45, 101, 114, 114, 111, 114, 1, 115, 0, 14, 112, 114, 111, 116,
    111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 16, 117, 110, 101, 120, 112, 101,
    99, 116, 101, 100, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 5, 101, 114, 114, 111, 114, 0, 3,
    0, 33, 1, 64, 1, 6, 102, 105, 101, 108, 100, 115, 30, 1, 0, 4, 11, 100, 114, 111, 112, 45, 102,
    105, 101, 108, 100, 115, 0, 1, 35, 1, 111, 2, 115, 115, 1, 112, 36, 1, 64, 1, 7, 101, 110, 116,
    114, 105, 101, 115, 37, 0, 30, 4, 10, 110, 101, 119, 45, 102, 105, 101, 108, 100, 115, 0, 1,
    38, 1, 112, 115, 1, 64, 2, 6, 102, 105, 101, 108, 100, 115, 30, 4, 110, 97, 109, 101, 115, 0,
    39, 4, 10, 102, 105, 101, 108, 100, 115, 45, 103, 101, 116, 0, 1, 40, 1, 64, 3, 6, 102, 105,
    101, 108, 100, 115, 30, 4, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 39, 1, 0, 4, 10,
    102, 105, 101, 108, 100, 115, 45, 115, 101, 116, 0, 1, 41, 1, 64, 2, 6, 102, 105, 101, 108,
    100, 115, 30, 4, 110, 97, 109, 101, 115, 1, 0, 4, 13, 102, 105, 101, 108, 100, 115, 45, 100,
    101, 108, 101, 116, 101, 0, 1, 42, 1, 64, 3, 6, 102, 105, 101, 108, 100, 115, 30, 4, 110, 97,
    109, 101, 115, 5, 118, 97, 108, 117, 101, 115, 1, 0, 4, 13, 102, 105, 101, 108, 100, 115, 45,
    97, 112, 112, 101, 110, 100, 0, 1, 43, 1, 64, 1, 6, 102, 105, 101, 108, 100, 115, 30, 0, 37, 4,
    14, 102, 105, 101, 108, 100, 115, 45, 101, 110, 116, 114, 105, 101, 115, 0, 1, 44, 1, 64, 1, 6,
    102, 105, 101, 108, 100, 115, 30, 0, 30, 4, 12, 102, 105, 101, 108, 100, 115, 45, 99, 108, 111,
    110, 101, 0, 1, 45, 1, 107, 31, 1, 64, 1, 1, 115, 22, 0, 46, 4, 22, 102, 105, 110, 105, 115,
    104, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0, 1, 47, 1,
    64, 2, 1, 115, 15, 8, 116, 114, 97, 105, 108, 101, 114, 115, 46, 1, 0, 4, 22, 102, 105, 110,
    105, 115, 104, 45, 111, 117, 116, 103, 111, 105, 110, 103, 45, 115, 116, 114, 101, 97, 109, 0,
    1, 48, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 26, 1, 0, 4, 21, 100, 114, 111, 112, 45,
    105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 1, 49, 1, 64,
    1, 7, 114, 101, 113, 117, 101, 115, 116, 19, 1, 0, 4, 21, 100, 114, 111, 112, 45, 111, 117,
    116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 1, 50, 1, 64, 1, 7,
    114, 101, 113, 117, 101, 115, 116, 26, 0, 21, 4, 23, 105, 110, 99, 111, 109, 105, 110, 103, 45,
    114, 101, 113, 117, 101, 115, 116, 45, 109, 101, 116, 104, 111, 100, 0, 1, 51, 1, 64, 1, 7,
    114, 101, 113, 117, 101, 115, 116, 26, 0, 115, 4, 21, 105, 110, 99, 111, 109, 105, 110, 103,
    45, 114, 101, 113, 117, 101, 115, 116, 45, 112, 97, 116, 104, 0, 1, 52, 4, 22, 105, 110, 99,
    111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 113, 117, 101, 114, 121, 0,
    1, 52, 1, 107, 9, 1, 64, 1, 7, 114, 101, 113, 117, 101, 115, 116, 26, 0, 53, 4, 23, 105, 110,
    99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 45, 115, 99, 104, 101, 109,
    101, 0, 1, 54, 4, 26, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115,
    116, 45, 97, 117, 116, 104, 111, 114, 105, 116, 121, 0, 1, 52, 1, 64, 1, 7, 114, 101, 113, 117,
    101, 115, 116, 26, 0, 32, 4, 24, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117,
    101, 115, 116, 45, 104, 101, 97, 100, 101, 114, 115, 0, 1, 55, 1, 106, 1, 22, 0, 1, 64, 1, 7,
    114, 101, 113, 117, 101, 115, 116, 26, 0, 56, 4, 24, 105, 110, 99, 111, 109, 105, 110, 103, 45,
    114, 101, 113, 117, 101, 115, 116, 45, 99, 111, 110, 115, 117, 109, 101, 0, 1, 57, 1, 64, 6, 6,
    109, 101, 116, 104, 111, 100, 21, 4, 112, 97, 116, 104, 115, 5, 113, 117, 101, 114, 121, 115,
    6, 115, 99, 104, 101, 109, 101, 53, 9, 97, 117, 116, 104, 111, 114, 105, 116, 121, 115, 7, 104,
    101, 97, 100, 101, 114, 115, 32, 0, 19, 4, 20, 110, 101, 119, 45, 111, 117, 116, 103, 111, 105,
    110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 1, 58, 1, 106, 1, 15, 0, 1, 64, 1, 7, 114,
    101, 113, 117, 101, 115, 116, 19, 0, 59, 4, 22, 111, 117, 116, 103, 111, 105, 110, 103, 45,
    114, 101, 113, 117, 101, 115, 116, 45, 119, 114, 105, 116, 101, 0, 1, 60, 1, 64, 1, 8, 114,
    101, 115, 112, 111, 110, 115, 101, 11, 1, 0, 4, 22, 100, 114, 111, 112, 45, 114, 101, 115, 112,
    111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 0, 1, 61, 1, 106, 1, 17, 1, 34,
    1, 106, 0, 0, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 62, 0, 63, 4, 21, 115, 101,
    116, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 0,
    1, 64, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 24, 1, 0, 4, 22, 100, 114, 111,
    112, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0,
    1, 65, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 17, 1, 0, 4, 22, 100, 114, 111,
    112, 45, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0,
    1, 66, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 24, 0, 7, 4, 24, 105, 110, 99, 111,
    109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 115, 116, 97, 116, 117,
    115, 0, 1, 67, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 24, 0, 32, 4, 25, 105, 110,
    99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 104, 101, 97, 100,
    101, 114, 115, 0, 1, 68, 1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 24, 0, 56, 4, 25,
    105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 99, 111,
    110, 115, 117, 109, 101, 0, 1, 69, 1, 64, 2, 11, 115, 116, 97, 116, 117, 115, 45, 99, 111, 100,
    101, 7, 7, 104, 101, 97, 100, 101, 114, 115, 32, 0, 17, 4, 21, 110, 101, 119, 45, 111, 117,
    116, 103, 111, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 1, 70, 1, 64, 1,
    8, 114, 101, 115, 112, 111, 110, 115, 101, 17, 0, 59, 4, 23, 111, 117, 116, 103, 111, 105, 110,
    103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45, 119, 114, 105, 116, 101, 0, 1, 71, 1, 64,
    1, 1, 102, 28, 1, 0, 4, 29, 100, 114, 111, 112, 45, 102, 117, 116, 117, 114, 101, 45, 105, 110,
    99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 0, 1, 72, 1, 106, 1,
    24, 1, 34, 1, 107, 201, 0, 1, 64, 1, 1, 102, 28, 0, 202, 0, 4, 28, 102, 117, 116, 117, 114,
    101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 115, 112, 111, 110, 115, 101, 45,
    103, 101, 116, 0, 1, 75, 1, 64, 1, 1, 102, 28, 0, 5, 4, 34, 108, 105, 115, 116, 101, 110, 45,
    116, 111, 45, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114,
    101, 115, 112, 111, 110, 115, 101, 0, 1, 76, 3, 5, 116, 121, 112, 101, 115, 22, 112, 97, 116,
    104, 58, 47, 104, 116, 116, 112, 47, 116, 121, 112, 101, 115, 47, 116, 121, 112, 101, 115, 5,
    7, 2, 3, 0, 4, 16, 111, 117, 116, 103, 111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115,
    116, 2, 3, 0, 4, 15, 114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115,
    2, 3, 0, 4, 24, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45,
    114, 101, 115, 112, 111, 110, 115, 101, 1, 66, 9, 2, 3, 2, 1, 8, 4, 16, 111, 117, 116, 103,
    111, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 0, 2, 3, 2, 1, 9, 4, 15,
    114, 101, 113, 117, 101, 115, 116, 45, 111, 112, 116, 105, 111, 110, 115, 0, 3, 0, 2, 2, 3, 2,
    1, 10, 4, 24, 102, 117, 116, 117, 114, 101, 45, 105, 110, 99, 111, 109, 105, 110, 103, 45, 114,
    101, 115, 112, 111, 110, 115, 101, 0, 3, 0, 4, 1, 107, 3, 1, 64, 2, 7, 114, 101, 113, 117, 101,
    115, 116, 1, 7, 111, 112, 116, 105, 111, 110, 115, 6, 0, 5, 4, 6, 104, 97, 110, 100, 108, 101,
    0, 1, 7, 3, 21, 100, 101, 102, 97, 117, 108, 116, 45, 111, 117, 116, 103, 111, 105, 110, 103,
    45, 72, 84, 84, 80, 44, 112, 97, 116, 104, 58, 47, 104, 116, 116, 112, 47, 111, 117, 116, 103,
    111, 105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 47, 111, 117, 116, 103, 111, 105,
    110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 5, 11, 2, 3, 0, 4, 16, 105, 110, 99, 111, 109,
    105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 2, 3, 0, 4, 17, 114, 101, 115, 112, 111,
    110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109, 1, 66, 6, 2, 3, 2, 1, 12, 4, 16, 105,
    110, 99, 111, 109, 105, 110, 103, 45, 114, 101, 113, 117, 101, 115, 116, 0, 3, 0, 0, 2, 3, 2,
    1, 13, 4, 17, 114, 101, 115, 112, 111, 110, 115, 101, 45, 111, 117, 116, 112, 97, 114, 97, 109,
    0, 3, 0, 2, 1, 64, 2, 7, 114, 101, 113, 117, 101, 115, 116, 1, 12, 114, 101, 115, 112, 111,
    110, 115, 101, 45, 111, 117, 116, 3, 1, 0, 4, 6, 104, 97, 110, 100, 108, 101, 0, 1, 4, 4, 4,
    72, 84, 84, 80, 44, 112, 97, 116, 104, 58, 47, 104, 116, 116, 112, 47, 105, 110, 99, 111, 109,
    105, 110, 103, 45, 104, 97, 110, 100, 108, 101, 114, 47, 105, 110, 99, 111, 109, 105, 110, 103,
    45, 104, 97, 110, 100, 108, 101, 114, 5, 14, 4, 5, 112, 114, 111, 120, 121, 16, 112, 107, 103,
    58, 47, 112, 114, 111, 120, 121, 47, 112, 114, 111, 120, 121, 4, 0, 11, 21, 1, 5, 112, 114,
    111, 120, 121, 10, 112, 107, 103, 58, 47, 112, 114, 111, 120, 121, 3, 0, 0, 7, 244, 14, 1, 65,
    15, 1, 66, 2, 1, 121, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 3, 4, 112, 111,
    108, 108, 20, 112, 97, 116, 104, 58, 47, 112, 111, 108, 108, 47, 112, 111, 108, 108, 47, 112,
    111, 108, 108, 5, 0, 2, 3, 0, 0, 8, 112, 111, 108, 108, 97, 98, 108, 101, 1, 66, 8, 2, 3, 2, 1,
    1, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 1, 114, 0, 4, 12, 115, 116, 114,
    101, 97, 109, 45, 101, 114, 114, 111, 114, 0, 3, 0, 2, 1, 121, 4, 13, 111, 117, 116, 112, 117,
    116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 4, 1, 121, 4, 12, 105, 110, 112, 117, 116, 45,
    115, 116, 114, 101, 97, 109, 0, 3, 0, 6, 3, 7, 115, 116, 114, 101, 97, 109, 115, 24, 112, 97,
    116, 104, 58, 47, 105, 111, 47, 115, 116, 114, 101, 97, 109, 115, 47, 115, 116, 114, 101, 97,
    109, 115, 5, 2, 1, 66, 4, 1, 121, 4, 10, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 0, 3, 0,
    0, 1, 114, 2, 7, 115, 101, 99, 111, 110, 100, 115, 119, 11, 110, 97, 110, 111, 115, 101, 99,
    111, 110, 100, 115, 121, 4, 8, 100, 97, 116, 101, 116, 105, 109, 101, 0, 3, 0, 2, 3, 10, 119,
    97, 108, 108, 45, 99, 108, 111, 99, 107, 34, 112, 97, 116, 104, 58, 47, 99, 108, 111, 99, 107,
    115, 47, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 47, 119, 97, 108, 108, 45, 99, 108, 111,
    99, 107, 5, 3, 2, 3, 0, 1, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 2, 3,
    0, 1, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 2, 3, 0, 2, 8, 100,
    97, 116, 101, 116, 105, 109, 101, 1, 66, 39, 2, 3, 2, 1, 4, 4, 12, 105, 110, 112, 117, 116, 45,
    115, 116, 114, 101, 97, 109, 0, 3, 0, 0, 2, 3, 2, 1, 5, 4, 13, 111, 117, 116, 112, 117, 116,
    45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 2, 2, 3, 2, 1, 6, 4, 8, 100, 97, 116, 101, 116, 105,
    109, 101, 0, 3, 0, 4, 1, 110, 1, 14, 115, 121, 109, 108, 105, 110, 107, 45, 102, 111, 108, 108,
    111, 119, 4, 10, 112, 97, 116, 104, 45, 102, 108, 97, 103, 115, 0, 3, 0, 6, 1, 110, 4, 6, 99,
    114, 101, 97, 116, 101, 9, 100, 105, 114, 101, 99, 116, 111, 114, 121, 9, 101, 120, 99, 108,
    117, 115, 105, 118, 101, 8, 116, 114, 117, 110, 99, 97, 116, 101, 4, 10, 111, 112, 101, 110,
    45, 102, 108, 97, 103, 115, 0, 3, 0, 8, 1, 110, 3, 8, 114, 101, 97, 100, 97, 98, 108, 101, 9,
    119, 114, 105, 116, 101, 97, 98, 108, 101, 10, 101, 120, 101, 99, 117, 116, 97, 98, 108, 101,
    4, 5, 109, 111, 100, 101, 115, 0, 3, 0, 10, 1, 119, 4, 10, 108, 105, 110, 107, 45, 99, 111,
    117, 110, 116, 0, 3, 0, 12, 1, 119, 4, 5, 105, 110, 111, 100, 101, 0, 3, 0, 14, 1, 119, 4, 8,
    102, 105, 108, 101, 115, 105, 122, 101, 0, 3, 0, 16, 1, 109, 37, 6, 97, 99, 99, 101, 115, 115,
    11, 119, 111, 117, 108, 100, 45, 98, 108, 111, 99, 107, 7, 97, 108, 114, 101, 97, 100, 121, 14,
    98, 97, 100, 45, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 4, 98, 117, 115, 121, 8, 100,
    101, 97, 100, 108, 111, 99, 107, 5, 113, 117, 111, 116, 97, 5, 101, 120, 105, 115, 116, 14,
    102, 105, 108, 101, 45, 116, 111, 111, 45, 108, 97, 114, 103, 101, 21, 105, 108, 108, 101, 103,
    97, 108, 45, 98, 121, 116, 101, 45, 115, 101, 113, 117, 101, 110, 99, 101, 11, 105, 110, 45,
    112, 114, 111, 103, 114, 101, 115, 115, 11, 105, 110, 116, 101, 114, 114, 117, 112, 116, 101,
    100, 7, 105, 110, 118, 97, 108, 105, 100, 2, 105, 111, 12, 105, 115, 45, 100, 105, 114, 101,
    99, 116, 111, 114, 121, 4, 108, 111, 111, 112, 14, 116, 111, 111, 45, 109, 97, 110, 121, 45,
    108, 105, 110, 107, 115, 12, 109, 101, 115, 115, 97, 103, 101, 45, 115, 105, 122, 101, 13, 110,
    97, 109, 101, 45, 116, 111, 111, 45, 108, 111, 110, 103, 9, 110, 111, 45, 100, 101, 118, 105,
    99, 101, 8, 110, 111, 45, 101, 110, 116, 114, 121, 7, 110, 111, 45, 108, 111, 99, 107, 19, 105,
    110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 45, 109, 101, 109, 111, 114, 121, 18,
    105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 45, 115, 112, 97, 99, 101, 13, 110,
    111, 116, 45, 100, 105, 114, 101, 99, 116, 111, 114, 121, 9, 110, 111, 116, 45, 101, 109, 112,
    116, 121, 15, 110, 111, 116, 45, 114, 101, 99, 111, 118, 101, 114, 97, 98, 108, 101, 11, 117,
    110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 6, 110, 111, 45, 116, 116, 121, 14, 110, 111,
    45, 115, 117, 99, 104, 45, 100, 101, 118, 105, 99, 101, 8, 111, 118, 101, 114, 102, 108, 111,
    119, 13, 110, 111, 116, 45, 112, 101, 114, 109, 105, 116, 116, 101, 100, 4, 112, 105, 112, 101,
    9, 114, 101, 97, 100, 45, 111, 110, 108, 121, 12, 105, 110, 118, 97, 108, 105, 100, 45, 115,
    101, 101, 107, 14, 116, 101, 120, 116, 45, 102, 105, 108, 101, 45, 98, 117, 115, 121, 12, 99,
    114, 111, 115, 115, 45, 100, 101, 118, 105, 99, 101, 4, 10, 101, 114, 114, 111, 114, 45, 99,
    111, 100, 101, 0, 3, 0, 18, 1, 121, 4, 22, 100, 105, 114, 101, 99, 116, 111, 114, 121, 45, 101,
    110, 116, 114, 121, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 20, 1, 119, 4, 6, 100, 101, 118,
    105, 99, 101, 0, 3, 0, 22, 1, 109, 8, 7, 117, 110, 107, 110, 111, 119, 110, 12, 98, 108, 111,
    99, 107, 45, 100, 101, 118, 105, 99, 101, 16, 99, 104, 97, 114, 97, 99, 116, 101, 114, 45, 100,
    101, 118, 105, 99, 101, 9, 100, 105, 114, 101, 99, 116, 111, 114, 121, 4, 102, 105, 102, 111,
    13, 115, 121, 109, 98, 111, 108, 105, 99, 45, 108, 105, 110, 107, 12, 114, 101, 103, 117, 108,
    97, 114, 45, 102, 105, 108, 101, 6, 115, 111, 99, 107, 101, 116, 4, 15, 100, 101, 115, 99, 114,
    105, 112, 116, 111, 114, 45, 116, 121, 112, 101, 0, 3, 0, 24, 1, 107, 15, 1, 114, 3, 5, 105,
    110, 111, 100, 101, 26, 4, 116, 121, 112, 101, 25, 4, 110, 97, 109, 101, 115, 4, 15, 100, 105,
    114, 101, 99, 116, 111, 114, 121, 45, 101, 110, 116, 114, 121, 0, 3, 0, 27, 1, 110, 7, 4, 114,
    101, 97, 100, 5, 119, 114, 105, 116, 101, 12, 110, 111, 110, 45, 98, 108, 111, 99, 107, 105,
    110, 103, 19, 102, 105, 108, 101, 45, 105, 110, 116, 101, 103, 114, 105, 116, 121, 45, 115,
    121, 110, 99, 19, 100, 97, 116, 97, 45, 105, 110, 116, 101, 103, 114, 105, 116, 121, 45, 115,
    121, 110, 99, 20, 114, 101, 113, 117, 101, 115, 116, 101, 100, 45, 119, 114, 105, 116, 101, 45,
    115, 121, 110, 99, 16, 109, 117, 116, 97, 116, 101, 45, 100, 105, 114, 101, 99, 116, 111, 114,
    121, 4, 16, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 45, 102, 108, 97, 103, 115, 0, 3,
    0, 29, 1, 121, 4, 10, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 0, 3, 0, 31, 1, 113, 3,
    9, 110, 111, 45, 99, 104, 97, 110, 103, 101, 0, 0, 3, 110, 111, 119, 0, 0, 9, 116, 105, 109,
    101, 115, 116, 97, 109, 112, 1, 5, 0, 4, 13, 110, 101, 119, 45, 116, 105, 109, 101, 115, 116,
    97, 109, 112, 0, 3, 0, 33, 1, 114, 8, 6, 100, 101, 118, 105, 99, 101, 23, 5, 105, 110, 111,
    100, 101, 15, 4, 116, 121, 112, 101, 25, 10, 108, 105, 110, 107, 45, 99, 111, 117, 110, 116,
    13, 4, 115, 105, 122, 101, 17, 21, 100, 97, 116, 97, 45, 97, 99, 99, 101, 115, 115, 45, 116,
    105, 109, 101, 115, 116, 97, 109, 112, 5, 27, 100, 97, 116, 97, 45, 109, 111, 100, 105, 102,
    105, 99, 97, 116, 105, 111, 110, 45, 116, 105, 109, 101, 115, 116, 97, 109, 112, 5, 23, 115,
    116, 97, 116, 117, 115, 45, 99, 104, 97, 110, 103, 101, 45, 116, 105, 109, 101, 115, 116, 97,
    109, 112, 5, 4, 15, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 45, 115, 116, 97, 116, 0,
    3, 0, 35, 1, 109, 6, 6, 110, 111, 114, 109, 97, 108, 10, 115, 101, 113, 117, 101, 110, 116,
    105, 97, 108, 6, 114, 97, 110, 100, 111, 109, 9, 119, 105, 108, 108, 45, 110, 101, 101, 100, 9,
    100, 111, 110, 116, 45, 110, 101, 101, 100, 8, 110, 111, 45, 114, 101, 117, 115, 101, 4, 6, 97,
    100, 118, 105, 99, 101, 0, 3, 0, 37, 3, 10, 102, 105, 108, 101, 115, 121, 115, 116, 101, 109,
    38, 112, 97, 116, 104, 58, 47, 102, 105, 108, 101, 115, 121, 115, 116, 101, 109, 47, 102, 105,
    108, 101, 115, 121, 115, 116, 101, 109, 47, 102, 105, 108, 101, 115, 121, 115, 116, 101, 109,
    5, 7, 2, 3, 0, 3, 10, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 1, 66, 14, 2, 3, 2, 1,
    8, 4, 10, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 0, 3, 0, 0, 2, 3, 2, 1, 4, 4, 12,
    105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 2, 2, 3, 2, 1, 5, 4, 13,
    111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 4, 1, 114, 3, 5, 115,
    116, 100, 105, 110, 3, 6, 115, 116, 100, 111, 117, 116, 5, 6, 115, 116, 100, 101, 114, 114, 5,
    4, 14, 115, 116, 100, 105, 111, 45, 112, 114, 101, 111, 112, 101, 110, 115, 0, 3, 0, 6, 1, 64,
    0, 0, 7, 4, 9, 103, 101, 116, 45, 115, 116, 100, 105, 111, 0, 1, 8, 1, 111, 2, 1, 115, 1, 112,
    9, 1, 64, 0, 0, 10, 4, 15, 103, 101, 116, 45, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101,
    115, 0, 1, 11, 4, 8, 112, 114, 101, 111, 112, 101, 110, 115, 22, 112, 107, 103, 58, 47, 112,
    114, 101, 111, 112, 101, 110, 115, 47, 112, 114, 101, 111, 112, 101, 110, 115, 5, 9, 11, 27, 1,
    8, 112, 114, 101, 111, 112, 101, 110, 115, 13, 112, 107, 103, 58, 47, 112, 114, 101, 111, 112,
    101, 110, 115, 3, 2, 0, 7, 65, 1, 65, 2, 1, 66, 3, 1, 106, 0, 0, 1, 64, 1, 6, 115, 116, 97,
    116, 117, 115, 0, 1, 0, 4, 4, 101, 120, 105, 116, 0, 1, 1, 4, 9, 119, 97, 115, 105, 45, 101,
    120, 105, 116, 19, 112, 107, 103, 58, 47, 101, 120, 105, 116, 47, 119, 97, 115, 105, 45, 101,
    120, 105, 116, 5, 0, 11, 19, 1, 4, 101, 120, 105, 116, 9, 112, 107, 103, 58, 47, 101, 120, 105,
    116, 3, 4, 0, 7, 83, 1, 65, 2, 1, 66, 4, 1, 111, 2, 115, 115, 1, 112, 0, 1, 64, 0, 0, 1, 4, 15,
    103, 101, 116, 45, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 0, 1, 2, 4, 11, 101,
    110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 28, 112, 107, 103, 58, 47, 101, 110, 118,
    105, 114, 111, 110, 109, 101, 110, 116, 47, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110,
    116, 5, 0, 11, 33, 1, 11, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 16, 112, 107,
    103, 58, 47, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 3, 6, 0, 7, 240, 64, 1, 65,
    2, 1, 65, 52, 1, 66, 9, 1, 121, 4, 10, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 0, 3, 0,
    0, 1, 114, 2, 7, 115, 101, 99, 111, 110, 100, 115, 119, 11, 110, 97, 110, 111, 115, 101, 99,
    111, 110, 100, 115, 121, 4, 8, 100, 97, 116, 101, 116, 105, 109, 101, 0, 3, 0, 2, 1, 64, 1, 4,
    116, 104, 105, 115, 1, 0, 3, 4, 3, 110, 111, 119, 0, 1, 4, 4, 10, 114, 101, 115, 111, 108, 117,
    116, 105, 111, 110, 0, 1, 4, 1, 64, 1, 4, 116, 104, 105, 115, 1, 1, 0, 4, 15, 100, 114, 111,
    112, 45, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 0, 1, 5, 3, 10, 119, 97, 108, 108, 45,
    99, 108, 111, 99, 107, 34, 112, 97, 116, 104, 58, 47, 99, 108, 111, 99, 107, 115, 47, 119, 97,
    108, 108, 45, 99, 108, 111, 99, 107, 47, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 5, 0, 1,
    66, 8, 1, 121, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 1, 64, 1, 4, 116, 104,
    105, 115, 1, 1, 0, 4, 13, 100, 114, 111, 112, 45, 112, 111, 108, 108, 97, 98, 108, 101, 0, 1,
    2, 1, 112, 1, 1, 112, 125, 1, 64, 1, 2, 105, 110, 3, 0, 4, 4, 11, 112, 111, 108, 108, 45, 111,
    110, 101, 111, 102, 102, 0, 1, 5, 3, 4, 112, 111, 108, 108, 20, 112, 97, 116, 104, 58, 47, 112,
    111, 108, 108, 47, 112, 111, 108, 108, 47, 112, 111, 108, 108, 5, 1, 2, 3, 0, 1, 8, 112, 111,
    108, 108, 97, 98, 108, 101, 1, 66, 13, 2, 3, 2, 1, 2, 4, 8, 112, 111, 108, 108, 97, 98, 108,
    101, 0, 3, 0, 0, 1, 121, 4, 15, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111,
    99, 107, 0, 3, 0, 2, 1, 119, 4, 7, 105, 110, 115, 116, 97, 110, 116, 0, 3, 0, 4, 1, 64, 1, 4,
    116, 104, 105, 115, 3, 0, 5, 4, 3, 110, 111, 119, 0, 1, 6, 4, 10, 114, 101, 115, 111, 108, 117,
    116, 105, 111, 110, 0, 1, 6, 1, 64, 3, 4, 116, 104, 105, 115, 3, 4, 119, 104, 101, 110, 5, 8,
    97, 98, 115, 111, 108, 117, 116, 101, 127, 0, 1, 4, 9, 115, 117, 98, 115, 99, 114, 105, 98,
    101, 0, 1, 7, 1, 64, 1, 4, 116, 104, 105, 115, 3, 1, 0, 4, 20, 100, 114, 111, 112, 45, 109,
    111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107, 0, 1, 8, 3, 15, 109, 111,
    110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107, 44, 112, 97, 116, 104, 58, 47, 99,
    108, 111, 99, 107, 115, 47, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99,
    107, 47, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107, 5, 3, 2, 3, 0,
    0, 10, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 1, 66, 4, 2, 3, 2, 1, 4, 4, 10, 119, 97,
    108, 108, 45, 99, 108, 111, 99, 107, 0, 3, 0, 0, 1, 64, 0, 0, 1, 4, 19, 105, 110, 115, 116, 97,
    110, 99, 101, 45, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 0, 1, 2, 3, 19, 105, 110, 115,
    116, 97, 110, 99, 101, 45, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 52, 112, 97, 116, 104,
    58, 47, 99, 108, 111, 99, 107, 115, 47, 105, 110, 115, 116, 97, 110, 99, 101, 45, 119, 97, 108,
    108, 45, 99, 108, 111, 99, 107, 47, 105, 110, 115, 116, 97, 110, 99, 101, 45, 119, 97, 108,
    108, 45, 99, 108, 111, 99, 107, 5, 5, 2, 3, 0, 2, 15, 109, 111, 110, 111, 116, 111, 110, 105,
    99, 45, 99, 108, 111, 99, 107, 1, 66, 4, 2, 3, 2, 1, 6, 4, 15, 109, 111, 110, 111, 116, 111,
    110, 105, 99, 45, 99, 108, 111, 99, 107, 0, 3, 0, 0, 1, 64, 0, 0, 1, 4, 24, 105, 110, 115, 116,
    97, 110, 99, 101, 45, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107, 0,
    1, 2, 3, 24, 105, 110, 115, 116, 97, 110, 99, 101, 45, 109, 111, 110, 111, 116, 111, 110, 105,
    99, 45, 99, 108, 111, 99, 107, 62, 112, 97, 116, 104, 58, 47, 99, 108, 111, 99, 107, 115, 47,
    105, 110, 115, 116, 97, 110, 99, 101, 45, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99,
    108, 111, 99, 107, 47, 105, 110, 115, 116, 97, 110, 99, 101, 45, 109, 111, 110, 111, 116, 111,
    110, 105, 99, 45, 99, 108, 111, 99, 107, 5, 7, 2, 3, 0, 0, 8, 100, 97, 116, 101, 116, 105, 109,
    101, 1, 66, 12, 2, 3, 2, 1, 8, 4, 8, 100, 97, 116, 101, 116, 105, 109, 101, 0, 3, 0, 0, 1, 114,
    3, 10, 117, 116, 99, 45, 111, 102, 102, 115, 101, 116, 122, 4, 110, 97, 109, 101, 115, 23, 105,
    110, 45, 100, 97, 121, 108, 105, 103, 104, 116, 45, 115, 97, 118, 105, 110, 103, 45, 116, 105,
    109, 101, 127, 4, 16, 116, 105, 109, 101, 122, 111, 110, 101, 45, 100, 105, 115, 112, 108, 97,
    121, 0, 3, 0, 2, 1, 121, 4, 8, 116, 105, 109, 101, 122, 111, 110, 101, 0, 3, 0, 4, 1, 64, 2, 4,
    116, 104, 105, 115, 5, 4, 119, 104, 101, 110, 1, 0, 3, 4, 7, 100, 105, 115, 112, 108, 97, 121,
    0, 1, 6, 1, 64, 2, 4, 116, 104, 105, 115, 5, 4, 119, 104, 101, 110, 1, 0, 122, 4, 10, 117, 116,
    99, 45, 111, 102, 102, 115, 101, 116, 0, 1, 7, 1, 64, 1, 4, 116, 104, 105, 115, 5, 1, 0, 4, 13,
    100, 114, 111, 112, 45, 116, 105, 109, 101, 122, 111, 110, 101, 0, 1, 8, 3, 8, 116, 105, 109,
    101, 122, 111, 110, 101, 30, 112, 97, 116, 104, 58, 47, 99, 108, 111, 99, 107, 115, 47, 116,
    105, 109, 101, 122, 111, 110, 101, 47, 116, 105, 109, 101, 122, 111, 110, 101, 5, 9, 1, 66, 39,
    2, 3, 2, 1, 2, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 1, 114, 0, 4, 12, 115,
    116, 114, 101, 97, 109, 45, 101, 114, 114, 111, 114, 0, 3, 0, 2, 1, 121, 4, 13, 111, 117, 116,
    112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 4, 1, 121, 4, 12, 105, 110, 112, 117,
    116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 6, 1, 112, 125, 1, 111, 2, 8, 127, 1, 106, 1, 9,
    1, 3, 1, 64, 2, 4, 116, 104, 105, 115, 7, 3, 108, 101, 110, 119, 0, 10, 4, 4, 114, 101, 97,
    100, 0, 1, 11, 4, 13, 98, 108, 111, 99, 107, 105, 110, 103, 45, 114, 101, 97, 100, 0, 1, 11, 1,
    111, 2, 119, 127, 1, 106, 1, 12, 1, 3, 1, 64, 2, 4, 116, 104, 105, 115, 7, 3, 108, 101, 110,
    119, 0, 13, 4, 4, 115, 107, 105, 112, 0, 1, 14, 4, 13, 98, 108, 111, 99, 107, 105, 110, 103,
    45, 115, 107, 105, 112, 0, 1, 14, 1, 64, 1, 4, 116, 104, 105, 115, 7, 0, 1, 4, 25, 115, 117,
    98, 115, 99, 114, 105, 98, 101, 45, 116, 111, 45, 105, 110, 112, 117, 116, 45, 115, 116, 114,
    101, 97, 109, 0, 1, 15, 1, 64, 1, 4, 116, 104, 105, 115, 7, 1, 0, 4, 17, 100, 114, 111, 112,
    45, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 1, 16, 1, 106, 1, 119, 1, 3,
    1, 64, 2, 4, 116, 104, 105, 115, 5, 3, 98, 117, 102, 8, 0, 17, 4, 5, 119, 114, 105, 116, 101,
    0, 1, 18, 4, 14, 98, 108, 111, 99, 107, 105, 110, 103, 45, 119, 114, 105, 116, 101, 0, 1, 18,
    1, 64, 2, 4, 116, 104, 105, 115, 5, 3, 108, 101, 110, 119, 0, 17, 4, 12, 119, 114, 105, 116,
    101, 45, 122, 101, 114, 111, 101, 115, 0, 1, 19, 4, 21, 98, 108, 111, 99, 107, 105, 110, 103,
    45, 119, 114, 105, 116, 101, 45, 122, 101, 114, 111, 101, 115, 0, 1, 19, 1, 64, 3, 4, 116, 104,
    105, 115, 5, 3, 115, 114, 99, 7, 3, 108, 101, 110, 119, 0, 13, 4, 6, 115, 112, 108, 105, 99,
    101, 0, 1, 20, 4, 15, 98, 108, 111, 99, 107, 105, 110, 103, 45, 115, 112, 108, 105, 99, 101, 0,
    1, 20, 1, 64, 2, 4, 116, 104, 105, 115, 5, 3, 115, 114, 99, 7, 0, 17, 4, 7, 102, 111, 114, 119,
    97, 114, 100, 0, 1, 21, 1, 64, 1, 4, 116, 104, 105, 115, 5, 0, 1, 4, 26, 115, 117, 98, 115, 99,
    114, 105, 98, 101, 45, 116, 111, 45, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97,
    109, 0, 1, 22, 1, 64, 1, 4, 116, 104, 105, 115, 5, 1, 0, 4, 18, 100, 114, 111, 112, 45, 111,
    117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 1, 23, 3, 7, 115, 116, 114, 101,
    97, 109, 115, 24, 112, 97, 116, 104, 58, 47, 105, 111, 47, 115, 116, 114, 101, 97, 109, 115,
    47, 115, 116, 114, 101, 97, 109, 115, 5, 10, 2, 3, 0, 6, 12, 105, 110, 112, 117, 116, 45, 115,
    116, 114, 101, 97, 109, 2, 3, 0, 6, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101,
    97, 109, 1, 66, 113, 2, 3, 2, 1, 11, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101,
    97, 109, 0, 3, 0, 0, 2, 3, 2, 1, 12, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114,
    101, 97, 109, 0, 3, 0, 2, 2, 3, 2, 1, 8, 4, 8, 100, 97, 116, 101, 116, 105, 109, 101, 0, 3, 0,
    4, 1, 110, 1, 14, 115, 121, 109, 108, 105, 110, 107, 45, 102, 111, 108, 108, 111, 119, 4, 10,
    112, 97, 116, 104, 45, 102, 108, 97, 103, 115, 0, 3, 0, 6, 1, 110, 4, 6, 99, 114, 101, 97, 116,
    101, 9, 100, 105, 114, 101, 99, 116, 111, 114, 121, 9, 101, 120, 99, 108, 117, 115, 105, 118,
    101, 8, 116, 114, 117, 110, 99, 97, 116, 101, 4, 10, 111, 112, 101, 110, 45, 102, 108, 97, 103,
    115, 0, 3, 0, 8, 1, 110, 3, 8, 114, 101, 97, 100, 97, 98, 108, 101, 9, 119, 114, 105, 116, 101,
    97, 98, 108, 101, 10, 101, 120, 101, 99, 117, 116, 97, 98, 108, 101, 4, 5, 109, 111, 100, 101,
    115, 0, 3, 0, 10, 1, 119, 4, 10, 108, 105, 110, 107, 45, 99, 111, 117, 110, 116, 0, 3, 0, 12,
    1, 119, 4, 5, 105, 110, 111, 100, 101, 0, 3, 0, 14, 1, 119, 4, 8, 102, 105, 108, 101, 115, 105,
    122, 101, 0, 3, 0, 16, 1, 109, 37, 6, 97, 99, 99, 101, 115, 115, 11, 119, 111, 117, 108, 100,
    45, 98, 108, 111, 99, 107, 7, 97, 108, 114, 101, 97, 100, 121, 14, 98, 97, 100, 45, 100, 101,
    115, 99, 114, 105, 112, 116, 111, 114, 4, 98, 117, 115, 121, 8, 100, 101, 97, 100, 108, 111,
    99, 107, 5, 113, 117, 111, 116, 97, 5, 101, 120, 105, 115, 116, 14, 102, 105, 108, 101, 45,
    116, 111, 111, 45, 108, 97, 114, 103, 101, 21, 105, 108, 108, 101, 103, 97, 108, 45, 98, 121,
    116, 101, 45, 115, 101, 113, 117, 101, 110, 99, 101, 11, 105, 110, 45, 112, 114, 111, 103, 114,
    101, 115, 115, 11, 105, 110, 116, 101, 114, 114, 117, 112, 116, 101, 100, 7, 105, 110, 118, 97,
    108, 105, 100, 2, 105, 111, 12, 105, 115, 45, 100, 105, 114, 101, 99, 116, 111, 114, 121, 4,
    108, 111, 111, 112, 14, 116, 111, 111, 45, 109, 97, 110, 121, 45, 108, 105, 110, 107, 115, 12,
    109, 101, 115, 115, 97, 103, 101, 45, 115, 105, 122, 101, 13, 110, 97, 109, 101, 45, 116, 111,
    111, 45, 108, 111, 110, 103, 9, 110, 111, 45, 100, 101, 118, 105, 99, 101, 8, 110, 111, 45,
    101, 110, 116, 114, 121, 7, 110, 111, 45, 108, 111, 99, 107, 19, 105, 110, 115, 117, 102, 102,
    105, 99, 105, 101, 110, 116, 45, 109, 101, 109, 111, 114, 121, 18, 105, 110, 115, 117, 102,
    102, 105, 99, 105, 101, 110, 116, 45, 115, 112, 97, 99, 101, 13, 110, 111, 116, 45, 100, 105,
    114, 101, 99, 116, 111, 114, 121, 9, 110, 111, 116, 45, 101, 109, 112, 116, 121, 15, 110, 111,
    116, 45, 114, 101, 99, 111, 118, 101, 114, 97, 98, 108, 101, 11, 117, 110, 115, 117, 112, 112,
    111, 114, 116, 101, 100, 6, 110, 111, 45, 116, 116, 121, 14, 110, 111, 45, 115, 117, 99, 104,
    45, 100, 101, 118, 105, 99, 101, 8, 111, 118, 101, 114, 102, 108, 111, 119, 13, 110, 111, 116,
    45, 112, 101, 114, 109, 105, 116, 116, 101, 100, 4, 112, 105, 112, 101, 9, 114, 101, 97, 100,
    45, 111, 110, 108, 121, 12, 105, 110, 118, 97, 108, 105, 100, 45, 115, 101, 101, 107, 14, 116,
    101, 120, 116, 45, 102, 105, 108, 101, 45, 98, 117, 115, 121, 12, 99, 114, 111, 115, 115, 45,
    100, 101, 118, 105, 99, 101, 4, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 0, 3, 0,
    18, 1, 121, 4, 22, 100, 105, 114, 101, 99, 116, 111, 114, 121, 45, 101, 110, 116, 114, 121, 45,
    115, 116, 114, 101, 97, 109, 0, 3, 0, 20, 1, 119, 4, 6, 100, 101, 118, 105, 99, 101, 0, 3, 0,
    22, 1, 109, 8, 7, 117, 110, 107, 110, 111, 119, 110, 12, 98, 108, 111, 99, 107, 45, 100, 101,
    118, 105, 99, 101, 16, 99, 104, 97, 114, 97, 99, 116, 101, 114, 45, 100, 101, 118, 105, 99,
    101, 9, 100, 105, 114, 101, 99, 116, 111, 114, 121, 4, 102, 105, 102, 111, 13, 115, 121, 109,
    98, 111, 108, 105, 99, 45, 108, 105, 110, 107, 12, 114, 101, 103, 117, 108, 97, 114, 45, 102,
    105, 108, 101, 6, 115, 111, 99, 107, 101, 116, 4, 15, 100, 101, 115, 99, 114, 105, 112, 116,
    111, 114, 45, 116, 121, 112, 101, 0, 3, 0, 24, 1, 107, 15, 1, 114, 3, 5, 105, 110, 111, 100,
    101, 26, 4, 116, 121, 112, 101, 25, 4, 110, 97, 109, 101, 115, 4, 15, 100, 105, 114, 101, 99,
    116, 111, 114, 121, 45, 101, 110, 116, 114, 121, 0, 3, 0, 27, 1, 110, 7, 4, 114, 101, 97, 100,
    5, 119, 114, 105, 116, 101, 12, 110, 111, 110, 45, 98, 108, 111, 99, 107, 105, 110, 103, 19,
    102, 105, 108, 101, 45, 105, 110, 116, 101, 103, 114, 105, 116, 121, 45, 115, 121, 110, 99, 19,
    100, 97, 116, 97, 45, 105, 110, 116, 101, 103, 114, 105, 116, 121, 45, 115, 121, 110, 99, 20,
    114, 101, 113, 117, 101, 115, 116, 101, 100, 45, 119, 114, 105, 116, 101, 45, 115, 121, 110,
    99, 16, 109, 117, 116, 97, 116, 101, 45, 100, 105, 114, 101, 99, 116, 111, 114, 121, 4, 16,
    100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 45, 102, 108, 97, 103, 115, 0, 3, 0, 29, 1,
    121, 4, 10, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 0, 3, 0, 31, 1, 113, 3, 9, 110,
    111, 45, 99, 104, 97, 110, 103, 101, 0, 0, 3, 110, 111, 119, 0, 0, 9, 116, 105, 109, 101, 115,
    116, 97, 109, 112, 1, 5, 0, 4, 13, 110, 101, 119, 45, 116, 105, 109, 101, 115, 116, 97, 109,
    112, 0, 3, 0, 33, 1, 114, 8, 6, 100, 101, 118, 105, 99, 101, 23, 5, 105, 110, 111, 100, 101,
    15, 4, 116, 121, 112, 101, 25, 10, 108, 105, 110, 107, 45, 99, 111, 117, 110, 116, 13, 4, 115,
    105, 122, 101, 17, 21, 100, 97, 116, 97, 45, 97, 99, 99, 101, 115, 115, 45, 116, 105, 109, 101,
    115, 116, 97, 109, 112, 5, 27, 100, 97, 116, 97, 45, 109, 111, 100, 105, 102, 105, 99, 97, 116,
    105, 111, 110, 45, 116, 105, 109, 101, 115, 116, 97, 109, 112, 5, 23, 115, 116, 97, 116, 117,
    115, 45, 99, 104, 97, 110, 103, 101, 45, 116, 105, 109, 101, 115, 116, 97, 109, 112, 5, 4, 15,
    100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 45, 115, 116, 97, 116, 0, 3, 0, 35, 1, 109, 6,
    6, 110, 111, 114, 109, 97, 108, 10, 115, 101, 113, 117, 101, 110, 116, 105, 97, 108, 6, 114,
    97, 110, 100, 111, 109, 9, 119, 105, 108, 108, 45, 110, 101, 101, 100, 9, 100, 111, 110, 116,
    45, 110, 101, 101, 100, 8, 110, 111, 45, 114, 101, 117, 115, 101, 4, 6, 97, 100, 118, 105, 99,
    101, 0, 3, 0, 37, 1, 64, 2, 4, 116, 104, 105, 115, 32, 6, 111, 102, 102, 115, 101, 116, 17, 0,
    1, 4, 15, 114, 101, 97, 100, 45, 118, 105, 97, 45, 115, 116, 114, 101, 97, 109, 0, 1, 39, 1,
    64, 2, 4, 116, 104, 105, 115, 32, 6, 111, 102, 102, 115, 101, 116, 17, 0, 3, 4, 16, 119, 114,
    105, 116, 101, 45, 118, 105, 97, 45, 115, 116, 114, 101, 97, 109, 0, 1, 40, 1, 64, 1, 4, 116,
    104, 105, 115, 32, 0, 3, 4, 17, 97, 112, 112, 101, 110, 100, 45, 118, 105, 97, 45, 115, 116,
    114, 101, 97, 109, 0, 1, 41, 1, 106, 0, 1, 19, 1, 64, 4, 4, 116, 104, 105, 115, 32, 6, 111,
    102, 102, 115, 101, 116, 17, 6, 108, 101, 110, 103, 116, 104, 17, 6, 97, 100, 118, 105, 99,
    101, 38, 0, 42, 4, 6, 97, 100, 118, 105, 115, 101, 0, 1, 43, 1, 64, 1, 4, 116, 104, 105, 115,
    32, 0, 42, 4, 9, 115, 121, 110, 99, 45, 100, 97, 116, 97, 0, 1, 44, 1, 106, 1, 30, 1, 19, 1,
    64, 1, 4, 116, 104, 105, 115, 32, 0, 45, 4, 9, 103, 101, 116, 45, 102, 108, 97, 103, 115, 0, 1,
    46, 1, 106, 1, 25, 1, 19, 1, 64, 1, 4, 116, 104, 105, 115, 32, 0, 47, 4, 8, 103, 101, 116, 45,
    116, 121, 112, 101, 0, 1, 48, 1, 64, 2, 4, 116, 104, 105, 115, 32, 5, 102, 108, 97, 103, 115,
    30, 0, 42, 4, 9, 115, 101, 116, 45, 102, 108, 97, 103, 115, 0, 1, 49, 1, 64, 2, 4, 116, 104,
    105, 115, 32, 4, 115, 105, 122, 101, 17, 0, 42, 4, 8, 115, 101, 116, 45, 115, 105, 122, 101, 0,
    1, 50, 1, 64, 3, 4, 116, 104, 105, 115, 32, 21, 100, 97, 116, 97, 45, 97, 99, 99, 101, 115,
    115, 45, 116, 105, 109, 101, 115, 116, 97, 109, 112, 34, 27, 100, 97, 116, 97, 45, 109, 111,
    100, 105, 102, 105, 99, 97, 116, 105, 111, 110, 45, 116, 105, 109, 101, 115, 116, 97, 109, 112,
    34, 0, 42, 4, 9, 115, 101, 116, 45, 116, 105, 109, 101, 115, 0, 1, 51, 1, 112, 125, 1, 111, 2,
    52, 127, 1, 106, 1, 53, 1, 19, 1, 64, 3, 4, 116, 104, 105, 115, 32, 6, 108, 101, 110, 103, 116,
    104, 17, 6, 111, 102, 102, 115, 101, 116, 17, 0, 54, 4, 4, 114, 101, 97, 100, 0, 1, 55, 1, 106,
    1, 17, 1, 19, 1, 64, 3, 4, 116, 104, 105, 115, 32, 6, 98, 117, 102, 102, 101, 114, 52, 6, 111,
    102, 102, 115, 101, 116, 17, 0, 56, 4, 5, 119, 114, 105, 116, 101, 0, 1, 57, 1, 106, 1, 21, 1,
    19, 1, 64, 1, 4, 116, 104, 105, 115, 32, 0, 58, 4, 14, 114, 101, 97, 100, 45, 100, 105, 114,
    101, 99, 116, 111, 114, 121, 0, 1, 59, 4, 4, 115, 121, 110, 99, 0, 1, 44, 1, 64, 2, 4, 116,
    104, 105, 115, 32, 4, 112, 97, 116, 104, 115, 0, 42, 4, 19, 99, 114, 101, 97, 116, 101, 45,
    100, 105, 114, 101, 99, 116, 111, 114, 121, 45, 97, 116, 0, 1, 60, 1, 106, 1, 36, 1, 19, 1, 64,
    1, 4, 116, 104, 105, 115, 32, 0, 61, 4, 4, 115, 116, 97, 116, 0, 1, 62, 1, 64, 3, 4, 116, 104,
    105, 115, 32, 10, 112, 97, 116, 104, 45, 102, 108, 97, 103, 115, 7, 4, 112, 97, 116, 104, 115,
    0, 61, 4, 7, 115, 116, 97, 116, 45, 97, 116, 0, 1, 63, 1, 64, 5, 4, 116, 104, 105, 115, 32, 10,
    112, 97, 116, 104, 45, 102, 108, 97, 103, 115, 7, 4, 112, 97, 116, 104, 115, 21, 100, 97, 116,
    97, 45, 97, 99, 99, 101, 115, 115, 45, 116, 105, 109, 101, 115, 116, 97, 109, 112, 34, 27, 100,
    97, 116, 97, 45, 109, 111, 100, 105, 102, 105, 99, 97, 116, 105, 111, 110, 45, 116, 105, 109,
    101, 115, 116, 97, 109, 112, 34, 0, 42, 4, 12, 115, 101, 116, 45, 116, 105, 109, 101, 115, 45,
    97, 116, 0, 1, 64, 1, 64, 5, 4, 116, 104, 105, 115, 32, 14, 111, 108, 100, 45, 112, 97, 116,
    104, 45, 102, 108, 97, 103, 115, 7, 8, 111, 108, 100, 45, 112, 97, 116, 104, 115, 14, 110, 101,
    119, 45, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 32, 8, 110, 101, 119, 45, 112, 97,
    116, 104, 115, 0, 42, 4, 7, 108, 105, 110, 107, 45, 97, 116, 0, 1, 65, 1, 106, 1, 32, 1, 19, 1,
    64, 6, 4, 116, 104, 105, 115, 32, 10, 112, 97, 116, 104, 45, 102, 108, 97, 103, 115, 7, 4, 112,
    97, 116, 104, 115, 10, 111, 112, 101, 110, 45, 102, 108, 97, 103, 115, 9, 5, 102, 108, 97, 103,
    115, 30, 5, 109, 111, 100, 101, 115, 11, 0, 194, 0, 4, 7, 111, 112, 101, 110, 45, 97, 116, 0,
    1, 67, 1, 106, 1, 115, 1, 19, 1, 64, 2, 4, 116, 104, 105, 115, 32, 4, 112, 97, 116, 104, 115,
    0, 196, 0, 4, 11, 114, 101, 97, 100, 108, 105, 110, 107, 45, 97, 116, 0, 1, 69, 4, 19, 114,
    101, 109, 111, 118, 101, 45, 100, 105, 114, 101, 99, 116, 111, 114, 121, 45, 97, 116, 0, 1, 60,
    1, 64, 4, 4, 116, 104, 105, 115, 32, 8, 111, 108, 100, 45, 112, 97, 116, 104, 115, 14, 110,
    101, 119, 45, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 32, 8, 110, 101, 119, 45, 112,
    97, 116, 104, 115, 0, 42, 4, 9, 114, 101, 110, 97, 109, 101, 45, 97, 116, 0, 1, 70, 1, 64, 3,
    4, 116, 104, 105, 115, 32, 8, 111, 108, 100, 45, 112, 97, 116, 104, 115, 8, 110, 101, 119, 45,
    112, 97, 116, 104, 115, 0, 42, 4, 10, 115, 121, 109, 108, 105, 110, 107, 45, 97, 116, 0, 1, 71,
    4, 14, 117, 110, 108, 105, 110, 107, 45, 102, 105, 108, 101, 45, 97, 116, 0, 1, 60, 1, 64, 4,
    4, 116, 104, 105, 115, 32, 10, 112, 97, 116, 104, 45, 102, 108, 97, 103, 115, 7, 4, 112, 97,
    116, 104, 115, 5, 109, 111, 100, 101, 115, 11, 0, 42, 4, 26, 99, 104, 97, 110, 103, 101, 45,
    102, 105, 108, 101, 45, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115, 45, 97, 116, 0,
    1, 72, 4, 31, 99, 104, 97, 110, 103, 101, 45, 100, 105, 114, 101, 99, 116, 111, 114, 121, 45,
    112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115, 45, 97, 116, 0, 1, 72, 4, 11, 108, 111,
    99, 107, 45, 115, 104, 97, 114, 101, 100, 0, 1, 44, 4, 14, 108, 111, 99, 107, 45, 101, 120, 99,
    108, 117, 115, 105, 118, 101, 0, 1, 44, 4, 15, 116, 114, 121, 45, 108, 111, 99, 107, 45, 115,
    104, 97, 114, 101, 100, 0, 1, 44, 4, 18, 116, 114, 121, 45, 108, 111, 99, 107, 45, 101, 120,
    99, 108, 117, 115, 105, 118, 101, 0, 1, 44, 4, 6, 117, 110, 108, 111, 99, 107, 0, 1, 44, 1, 64,
    1, 4, 116, 104, 105, 115, 32, 1, 0, 4, 15, 100, 114, 111, 112, 45, 100, 101, 115, 99, 114, 105,
    112, 116, 111, 114, 0, 1, 73, 1, 107, 28, 1, 106, 1, 202, 0, 1, 19, 1, 64, 1, 4, 116, 104, 105,
    115, 21, 0, 203, 0, 4, 20, 114, 101, 97, 100, 45, 100, 105, 114, 101, 99, 116, 111, 114, 121,
    45, 101, 110, 116, 114, 121, 0, 1, 76, 1, 64, 1, 4, 116, 104, 105, 115, 21, 1, 0, 4, 27, 100,
    114, 111, 112, 45, 100, 105, 114, 101, 99, 116, 111, 114, 121, 45, 101, 110, 116, 114, 121, 45,
    115, 116, 114, 101, 97, 109, 0, 1, 77, 3, 10, 102, 105, 108, 101, 115, 121, 115, 116, 101, 109,
    38, 112, 97, 116, 104, 58, 47, 102, 105, 108, 101, 115, 121, 115, 116, 101, 109, 47, 102, 105,
    108, 101, 115, 121, 115, 116, 101, 109, 47, 102, 105, 108, 101, 115, 121, 115, 116, 101, 109,
    5, 13, 1, 66, 20, 1, 121, 4, 7, 110, 101, 116, 119, 111, 114, 107, 0, 3, 0, 0, 1, 111, 8, 123,
    123, 123, 123, 123, 123, 123, 123, 4, 12, 105, 112, 118, 54, 45, 97, 100, 100, 114, 101, 115,
    115, 0, 3, 0, 2, 1, 114, 4, 4, 112, 111, 114, 116, 123, 9, 102, 108, 111, 119, 45, 105, 110,
    102, 111, 121, 7, 97, 100, 100, 114, 101, 115, 115, 3, 8, 115, 99, 111, 112, 101, 45, 105, 100,
    121, 4, 19, 105, 112, 118, 54, 45, 115, 111, 99, 107, 101, 116, 45, 97, 100, 100, 114, 101,
    115, 115, 0, 3, 0, 4, 1, 111, 4, 125, 125, 125, 125, 4, 12, 105, 112, 118, 52, 45, 97, 100,
    100, 114, 101, 115, 115, 0, 3, 0, 6, 1, 114, 2, 4, 112, 111, 114, 116, 123, 7, 97, 100, 100,
    114, 101, 115, 115, 7, 4, 19, 105, 112, 118, 52, 45, 115, 111, 99, 107, 101, 116, 45, 97, 100,
    100, 114, 101, 115, 115, 0, 3, 0, 8, 1, 113, 2, 4, 105, 112, 118, 52, 1, 9, 0, 4, 105, 112,
    118, 54, 1, 5, 0, 4, 17, 105, 112, 45, 115, 111, 99, 107, 101, 116, 45, 97, 100, 100, 114, 101,
    115, 115, 0, 3, 0, 10, 1, 109, 2, 4, 105, 112, 118, 52, 4, 105, 112, 118, 54, 4, 17, 105, 112,
    45, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 0, 3, 0, 12, 1, 113, 2,
    4, 105, 112, 118, 52, 1, 7, 0, 4, 105, 112, 118, 54, 1, 3, 0, 4, 10, 105, 112, 45, 97, 100,
    100, 114, 101, 115, 115, 0, 3, 0, 14, 1, 109, 2, 7, 117, 110, 107, 110, 111, 119, 110, 5, 97,
    103, 97, 105, 110, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 16, 1, 64, 1, 4, 116, 104, 105, 115,
    1, 1, 0, 4, 12, 100, 114, 111, 112, 45, 110, 101, 116, 119, 111, 114, 107, 0, 1, 18, 3, 7, 110,
    101, 116, 119, 111, 114, 107, 29, 112, 97, 116, 104, 58, 47, 115, 111, 99, 107, 101, 116, 115,
    47, 110, 101, 116, 119, 111, 114, 107, 47, 110, 101, 116, 119, 111, 114, 107, 5, 14, 2, 3, 0,
    8, 7, 110, 101, 116, 119, 111, 114, 107, 1, 66, 4, 2, 3, 2, 1, 15, 4, 7, 110, 101, 116, 119,
    111, 114, 107, 0, 3, 0, 0, 1, 64, 0, 0, 1, 4, 16, 105, 110, 115, 116, 97, 110, 99, 101, 45,
    110, 101, 116, 119, 111, 114, 107, 0, 1, 2, 3, 16, 105, 110, 115, 116, 97, 110, 99, 101, 45,
    110, 101, 116, 119, 111, 114, 107, 47, 112, 97, 116, 104, 58, 47, 115, 111, 99, 107, 101, 116,
    115, 47, 105, 110, 115, 116, 97, 110, 99, 101, 45, 110, 101, 116, 119, 111, 114, 107, 47, 105,
    110, 115, 116, 97, 110, 99, 101, 45, 110, 101, 116, 119, 111, 114, 107, 5, 16, 2, 3, 0, 8, 5,
    101, 114, 114, 111, 114, 2, 3, 0, 8, 10, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 2, 3,
    0, 8, 17, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 1,
    66, 30, 2, 3, 2, 1, 2, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 2, 3, 2, 1, 15,
    4, 7, 110, 101, 116, 119, 111, 114, 107, 0, 3, 0, 2, 2, 3, 2, 1, 17, 4, 5, 101, 114, 114, 111,
    114, 0, 3, 0, 4, 2, 3, 2, 1, 18, 4, 10, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 0, 3,
    0, 6, 2, 3, 2, 1, 19, 4, 17, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109,
    105, 108, 121, 0, 3, 0, 8, 1, 121, 4, 22, 114, 101, 115, 111, 108, 118, 101, 45, 97, 100, 100,
    114, 101, 115, 115, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 10, 1, 107, 9, 1, 106, 1, 11, 1,
    5, 1, 64, 4, 7, 110, 101, 116, 119, 111, 114, 107, 3, 4, 110, 97, 109, 101, 115, 14, 97, 100,
    100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 12, 19, 105, 110, 99, 108, 117, 100,
    101, 45, 117, 110, 97, 118, 97, 105, 108, 97, 98, 108, 101, 127, 0, 13, 4, 17, 114, 101, 115,
    111, 108, 118, 101, 45, 97, 100, 100, 114, 101, 115, 115, 101, 115, 0, 1, 14, 1, 107, 7, 1,
    106, 1, 15, 1, 5, 1, 64, 1, 4, 116, 104, 105, 115, 11, 0, 16, 4, 20, 114, 101, 115, 111, 108,
    118, 101, 45, 110, 101, 120, 116, 45, 97, 100, 100, 114, 101, 115, 115, 0, 1, 17, 1, 64, 1, 4,
    116, 104, 105, 115, 11, 1, 0, 4, 27, 100, 114, 111, 112, 45, 114, 101, 115, 111, 108, 118, 101,
    45, 97, 100, 100, 114, 101, 115, 115, 45, 115, 116, 114, 101, 97, 109, 0, 1, 18, 1, 106, 1,
    127, 1, 5, 1, 64, 1, 4, 116, 104, 105, 115, 11, 0, 19, 4, 12, 110, 111, 110, 45, 98, 108, 111,
    99, 107, 105, 110, 103, 0, 1, 20, 1, 106, 0, 1, 5, 1, 64, 2, 4, 116, 104, 105, 115, 11, 5, 118,
    97, 108, 117, 101, 127, 0, 21, 4, 16, 115, 101, 116, 45, 110, 111, 110, 45, 98, 108, 111, 99,
    107, 105, 110, 103, 0, 1, 22, 1, 64, 1, 4, 116, 104, 105, 115, 11, 0, 1, 4, 9, 115, 117, 98,
    115, 99, 114, 105, 98, 101, 0, 1, 23, 3, 14, 105, 112, 45, 110, 97, 109, 101, 45, 108, 111,
    111, 107, 117, 112, 43, 112, 97, 116, 104, 58, 47, 115, 111, 99, 107, 101, 116, 115, 47, 105,
    112, 45, 110, 97, 109, 101, 45, 108, 111, 111, 107, 117, 112, 47, 105, 112, 45, 110, 97, 109,
    101, 45, 108, 111, 111, 107, 117, 112, 5, 20, 2, 3, 0, 8, 17, 105, 112, 45, 115, 111, 99, 107,
    101, 116, 45, 97, 100, 100, 114, 101, 115, 115, 1, 66, 68, 2, 3, 2, 1, 11, 4, 12, 105, 110,
    112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 0, 2, 3, 2, 1, 12, 4, 13, 111, 117,
    116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 2, 2, 3, 2, 1, 2, 4, 8, 112, 111,
    108, 108, 97, 98, 108, 101, 0, 3, 0, 4, 2, 3, 2, 1, 15, 4, 7, 110, 101, 116, 119, 111, 114,
    107, 0, 3, 0, 6, 2, 3, 2, 1, 17, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 8, 2, 3, 2, 1, 21, 4,
    17, 105, 112, 45, 115, 111, 99, 107, 101, 116, 45, 97, 100, 100, 114, 101, 115, 115, 0, 3, 0,
    10, 2, 3, 2, 1, 19, 4, 17, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109,
    105, 108, 121, 0, 3, 0, 12, 1, 121, 4, 10, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 0, 3,
    0, 14, 1, 109, 3, 7, 114, 101, 99, 101, 105, 118, 101, 4, 115, 101, 110, 100, 4, 98, 111, 116,
    104, 4, 13, 115, 104, 117, 116, 100, 111, 119, 110, 45, 116, 121, 112, 101, 0, 3, 0, 16, 1,
    106, 0, 1, 9, 1, 64, 3, 4, 116, 104, 105, 115, 15, 7, 110, 101, 116, 119, 111, 114, 107, 7, 13,
    108, 111, 99, 97, 108, 45, 97, 100, 100, 114, 101, 115, 115, 11, 0, 18, 4, 4, 98, 105, 110,
    100, 0, 1, 19, 1, 111, 2, 1, 3, 1, 106, 1, 20, 1, 9, 1, 64, 3, 4, 116, 104, 105, 115, 15, 7,
    110, 101, 116, 119, 111, 114, 107, 7, 14, 114, 101, 109, 111, 116, 101, 45, 97, 100, 100, 114,
    101, 115, 115, 11, 0, 21, 4, 7, 99, 111, 110, 110, 101, 99, 116, 0, 1, 22, 1, 64, 2, 4, 116,
    104, 105, 115, 15, 7, 110, 101, 116, 119, 111, 114, 107, 7, 0, 18, 4, 6, 108, 105, 115, 116,
    101, 110, 0, 1, 23, 1, 111, 3, 15, 1, 3, 1, 106, 1, 24, 1, 9, 1, 64, 1, 4, 116, 104, 105, 115,
    15, 0, 25, 4, 6, 97, 99, 99, 101, 112, 116, 0, 1, 26, 1, 106, 1, 11, 1, 9, 1, 64, 1, 4, 116,
    104, 105, 115, 15, 0, 27, 4, 13, 108, 111, 99, 97, 108, 45, 97, 100, 100, 114, 101, 115, 115,
    0, 1, 28, 4, 14, 114, 101, 109, 111, 116, 101, 45, 97, 100, 100, 114, 101, 115, 115, 0, 1, 28,
    1, 106, 1, 13, 1, 9, 1, 64, 1, 4, 116, 104, 105, 115, 15, 0, 29, 4, 14, 97, 100, 100, 114, 101,
    115, 115, 45, 102, 97, 109, 105, 108, 121, 0, 1, 30, 1, 106, 1, 127, 1, 9, 1, 64, 1, 4, 116,
    104, 105, 115, 15, 0, 31, 4, 9, 105, 112, 118, 54, 45, 111, 110, 108, 121, 0, 1, 32, 1, 64, 2,
    4, 116, 104, 105, 115, 15, 5, 118, 97, 108, 117, 101, 127, 0, 18, 4, 13, 115, 101, 116, 45,
    105, 112, 118, 54, 45, 111, 110, 108, 121, 0, 1, 33, 1, 64, 2, 4, 116, 104, 105, 115, 15, 5,
    118, 97, 108, 117, 101, 119, 0, 18, 4, 23, 115, 101, 116, 45, 108, 105, 115, 116, 101, 110, 45,
    98, 97, 99, 107, 108, 111, 103, 45, 115, 105, 122, 101, 0, 1, 34, 4, 10, 107, 101, 101, 112,
    45, 97, 108, 105, 118, 101, 0, 1, 32, 4, 14, 115, 101, 116, 45, 107, 101, 101, 112, 45, 97,
    108, 105, 118, 101, 0, 1, 33, 4, 8, 110, 111, 45, 100, 101, 108, 97, 121, 0, 1, 32, 4, 12, 115,
    101, 116, 45, 110, 111, 45, 100, 101, 108, 97, 121, 0, 1, 33, 1, 106, 1, 125, 1, 9, 1, 64, 1,
    4, 116, 104, 105, 115, 15, 0, 35, 4, 17, 117, 110, 105, 99, 97, 115, 116, 45, 104, 111, 112,
    45, 108, 105, 109, 105, 116, 0, 1, 36, 1, 64, 2, 4, 116, 104, 105, 115, 15, 5, 118, 97, 108,
    117, 101, 125, 0, 18, 4, 21, 115, 101, 116, 45, 117, 110, 105, 99, 97, 115, 116, 45, 104, 111,
    112, 45, 108, 105, 109, 105, 116, 0, 1, 37, 1, 106, 1, 119, 1, 9, 1, 64, 1, 4, 116, 104, 105,
    115, 15, 0, 38, 4, 19, 114, 101, 99, 101, 105, 118, 101, 45, 98, 117, 102, 102, 101, 114, 45,
    115, 105, 122, 101, 0, 1, 39, 4, 23, 115, 101, 116, 45, 114, 101, 99, 101, 105, 118, 101, 45,
    98, 117, 102, 102, 101, 114, 45, 115, 105, 122, 101, 0, 1, 34, 4, 16, 115, 101, 110, 100, 45,
    98, 117, 102, 102, 101, 114, 45, 115, 105, 122, 101, 0, 1, 39, 4, 20, 115, 101, 116, 45, 115,
    101, 110, 100, 45, 98, 117, 102, 102, 101, 114, 45, 115, 105, 122, 101, 0, 1, 34, 4, 12, 110,
    111, 110, 45, 98, 108, 111, 99, 107, 105, 110, 103, 0, 1, 32, 4, 16, 115, 101, 116, 45, 110,
    111, 110, 45, 98, 108, 111, 99, 107, 105, 110, 103, 0, 1, 33, 1, 64, 1, 4, 116, 104, 105, 115,
    15, 0, 5, 4, 9, 115, 117, 98, 115, 99, 114, 105, 98, 101, 0, 1, 40, 1, 64, 2, 4, 116, 104, 105,
    115, 15, 13, 115, 104, 117, 116, 100, 111, 119, 110, 45, 116, 121, 112, 101, 17, 0, 18, 4, 8,
    115, 104, 117, 116, 100, 111, 119, 110, 0, 1, 41, 1, 64, 1, 4, 116, 104, 105, 115, 15, 1, 0, 4,
    15, 100, 114, 111, 112, 45, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 0, 1, 42, 3, 3, 116,
    99, 112, 21, 112, 97, 116, 104, 58, 47, 115, 111, 99, 107, 101, 116, 115, 47, 116, 99, 112, 47,
    116, 99, 112, 5, 22, 2, 3, 0, 11, 10, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 1, 66, 11,
    2, 3, 2, 1, 15, 4, 7, 110, 101, 116, 119, 111, 114, 107, 0, 3, 0, 0, 2, 3, 2, 1, 17, 4, 5, 101,
    114, 114, 111, 114, 0, 3, 0, 2, 2, 3, 2, 1, 19, 4, 17, 105, 112, 45, 97, 100, 100, 114, 101,
    115, 115, 45, 102, 97, 109, 105, 108, 121, 0, 3, 0, 4, 2, 3, 2, 1, 23, 4, 10, 116, 99, 112, 45,
    115, 111, 99, 107, 101, 116, 0, 3, 0, 6, 1, 106, 1, 7, 1, 3, 1, 64, 1, 14, 97, 100, 100, 114,
    101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 5, 0, 8, 4, 17, 99, 114, 101, 97, 116, 101, 45,
    116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 0, 1, 9, 3, 17, 116, 99, 112, 45, 99, 114, 101,
    97, 116, 101, 45, 115, 111, 99, 107, 101, 116, 49, 112, 97, 116, 104, 58, 47, 115, 111, 99,
    107, 101, 116, 115, 47, 116, 99, 112, 45, 99, 114, 101, 97, 116, 101, 45, 115, 111, 99, 107,
    101, 116, 47, 116, 99, 112, 45, 99, 114, 101, 97, 116, 101, 45, 115, 111, 99, 107, 101, 116, 5,
    24, 1, 66, 55, 2, 3, 2, 1, 2, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 2, 3, 2,
    1, 15, 4, 7, 110, 101, 116, 119, 111, 114, 107, 0, 3, 0, 2, 2, 3, 2, 1, 17, 4, 5, 101, 114,
    114, 111, 114, 0, 3, 0, 4, 2, 3, 2, 1, 21, 4, 17, 105, 112, 45, 115, 111, 99, 107, 101, 116,
    45, 97, 100, 100, 114, 101, 115, 115, 0, 3, 0, 6, 2, 3, 2, 1, 19, 4, 17, 105, 112, 45, 97, 100,
    100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 0, 3, 0, 8, 1, 121, 4, 10, 117, 100,
    112, 45, 115, 111, 99, 107, 101, 116, 0, 3, 0, 10, 1, 112, 125, 1, 114, 2, 4, 100, 97, 116, 97,
    12, 14, 114, 101, 109, 111, 116, 101, 45, 97, 100, 100, 114, 101, 115, 115, 7, 4, 8, 100, 97,
    116, 97, 103, 114, 97, 109, 0, 3, 0, 13, 1, 106, 0, 1, 5, 1, 64, 3, 4, 116, 104, 105, 115, 11,
    7, 110, 101, 116, 119, 111, 114, 107, 3, 13, 108, 111, 99, 97, 108, 45, 97, 100, 100, 114, 101,
    115, 115, 7, 0, 15, 4, 4, 98, 105, 110, 100, 0, 1, 16, 1, 64, 3, 4, 116, 104, 105, 115, 11, 7,
    110, 101, 116, 119, 111, 114, 107, 3, 14, 114, 101, 109, 111, 116, 101, 45, 97, 100, 100, 114,
    101, 115, 115, 7, 0, 15, 4, 7, 99, 111, 110, 110, 101, 99, 116, 0, 1, 17, 1, 106, 1, 14, 1, 5,
    1, 64, 1, 4, 116, 104, 105, 115, 11, 0, 18, 4, 7, 114, 101, 99, 101, 105, 118, 101, 0, 1, 19,
    1, 64, 2, 4, 116, 104, 105, 115, 11, 8, 100, 97, 116, 97, 103, 114, 97, 109, 14, 0, 15, 4, 4,
    115, 101, 110, 100, 0, 1, 20, 1, 106, 1, 7, 1, 5, 1, 64, 1, 4, 116, 104, 105, 115, 11, 0, 21,
    4, 13, 108, 111, 99, 97, 108, 45, 97, 100, 100, 114, 101, 115, 115, 0, 1, 22, 4, 14, 114, 101,
    109, 111, 116, 101, 45, 97, 100, 100, 114, 101, 115, 115, 0, 1, 22, 1, 106, 1, 9, 1, 5, 1, 64,
    1, 4, 116, 104, 105, 115, 11, 0, 23, 4, 14, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109,
    105, 108, 121, 0, 1, 24, 1, 106, 1, 127, 1, 5, 1, 64, 1, 4, 116, 104, 105, 115, 11, 0, 25, 4,
    9, 105, 112, 118, 54, 45, 111, 110, 108, 121, 0, 1, 26, 1, 64, 2, 4, 116, 104, 105, 115, 11, 5,
    118, 97, 108, 117, 101, 127, 0, 15, 4, 13, 115, 101, 116, 45, 105, 112, 118, 54, 45, 111, 110,
    108, 121, 0, 1, 27, 1, 106, 1, 125, 1, 5, 1, 64, 1, 4, 116, 104, 105, 115, 11, 0, 28, 4, 17,
    117, 110, 105, 99, 97, 115, 116, 45, 104, 111, 112, 45, 108, 105, 109, 105, 116, 0, 1, 29, 1,
    64, 2, 4, 116, 104, 105, 115, 11, 5, 118, 97, 108, 117, 101, 125, 0, 15, 4, 21, 115, 101, 116,
    45, 117, 110, 105, 99, 97, 115, 116, 45, 104, 111, 112, 45, 108, 105, 109, 105, 116, 0, 1, 30,
    1, 106, 1, 119, 1, 5, 1, 64, 1, 4, 116, 104, 105, 115, 11, 0, 31, 4, 19, 114, 101, 99, 101,
    105, 118, 101, 45, 98, 117, 102, 102, 101, 114, 45, 115, 105, 122, 101, 0, 1, 32, 1, 64, 2, 4,
    116, 104, 105, 115, 11, 5, 118, 97, 108, 117, 101, 119, 0, 15, 4, 23, 115, 101, 116, 45, 114,
    101, 99, 101, 105, 118, 101, 45, 98, 117, 102, 102, 101, 114, 45, 115, 105, 122, 101, 0, 1, 33,
    4, 16, 115, 101, 110, 100, 45, 98, 117, 102, 102, 101, 114, 45, 115, 105, 122, 101, 0, 1, 32,
    4, 20, 115, 101, 116, 45, 115, 101, 110, 100, 45, 98, 117, 102, 102, 101, 114, 45, 115, 105,
    122, 101, 0, 1, 33, 4, 12, 110, 111, 110, 45, 98, 108, 111, 99, 107, 105, 110, 103, 0, 1, 26,
    4, 16, 115, 101, 116, 45, 110, 111, 110, 45, 98, 108, 111, 99, 107, 105, 110, 103, 0, 1, 27, 1,
    64, 1, 4, 116, 104, 105, 115, 11, 0, 1, 4, 9, 115, 117, 98, 115, 99, 114, 105, 98, 101, 0, 1,
    34, 1, 64, 1, 4, 116, 104, 105, 115, 11, 1, 0, 4, 15, 100, 114, 111, 112, 45, 117, 100, 112,
    45, 115, 111, 99, 107, 101, 116, 0, 1, 35, 3, 3, 117, 100, 112, 21, 112, 97, 116, 104, 58, 47,
    115, 111, 99, 107, 101, 116, 115, 47, 117, 100, 112, 47, 117, 100, 112, 5, 25, 2, 3, 0, 13, 10,
    117, 100, 112, 45, 115, 111, 99, 107, 101, 116, 1, 66, 11, 2, 3, 2, 1, 15, 4, 7, 110, 101, 116,
    119, 111, 114, 107, 0, 3, 0, 0, 2, 3, 2, 1, 17, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 2, 2,
    3, 2, 1, 19, 4, 17, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108,
    121, 0, 3, 0, 4, 2, 3, 2, 1, 26, 4, 10, 117, 100, 112, 45, 115, 111, 99, 107, 101, 116, 0, 3,
    0, 6, 1, 106, 1, 7, 1, 3, 1, 64, 1, 14, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109,
    105, 108, 121, 5, 0, 8, 4, 17, 99, 114, 101, 97, 116, 101, 45, 117, 100, 112, 45, 115, 111, 99,
    107, 101, 116, 0, 1, 9, 3, 17, 117, 100, 112, 45, 99, 114, 101, 97, 116, 101, 45, 115, 111, 99,
    107, 101, 116, 49, 112, 97, 116, 104, 58, 47, 115, 111, 99, 107, 101, 116, 115, 47, 117, 100,
    112, 45, 99, 114, 101, 97, 116, 101, 45, 115, 111, 99, 107, 101, 116, 47, 117, 100, 112, 45,
    99, 114, 101, 97, 116, 101, 45, 115, 111, 99, 107, 101, 116, 5, 27, 1, 66, 8, 1, 112, 125, 1,
    64, 1, 3, 108, 101, 110, 119, 0, 0, 4, 16, 103, 101, 116, 45, 114, 97, 110, 100, 111, 109, 45,
    98, 121, 116, 101, 115, 0, 1, 1, 1, 64, 0, 0, 119, 4, 14, 103, 101, 116, 45, 114, 97, 110, 100,
    111, 109, 45, 117, 54, 52, 0, 1, 2, 1, 111, 2, 119, 119, 1, 64, 0, 0, 3, 4, 15, 105, 110, 115,
    101, 99, 117, 114, 101, 45, 114, 97, 110, 100, 111, 109, 0, 1, 4, 3, 6, 114, 97, 110, 100, 111,
    109, 26, 112, 97, 116, 104, 58, 47, 114, 97, 110, 100, 111, 109, 47, 114, 97, 110, 100, 111,
    109, 47, 114, 97, 110, 100, 111, 109, 5, 28, 1, 66, 4, 1, 111, 2, 115, 115, 1, 112, 0, 1, 64,
    0, 0, 1, 4, 15, 103, 101, 116, 45, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 0, 1,
    2, 3, 11, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 28, 112, 107, 103, 58, 47,
    101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 47, 101, 110, 118, 105, 114, 111, 110,
    109, 101, 110, 116, 5, 29, 2, 3, 0, 7, 10, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 1,
    66, 14, 2, 3, 2, 1, 30, 4, 10, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 0, 3, 0, 0, 2,
    3, 2, 1, 11, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 2, 2, 3,
    2, 1, 12, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 4, 1,
    114, 3, 5, 115, 116, 100, 105, 110, 3, 6, 115, 116, 100, 111, 117, 116, 5, 6, 115, 116, 100,
    101, 114, 114, 5, 4, 14, 115, 116, 100, 105, 111, 45, 112, 114, 101, 111, 112, 101, 110, 115,
    0, 3, 0, 6, 1, 64, 0, 0, 7, 4, 9, 103, 101, 116, 45, 115, 116, 100, 105, 111, 0, 1, 8, 1, 111,
    2, 1, 115, 1, 112, 9, 1, 64, 0, 0, 10, 4, 15, 103, 101, 116, 45, 100, 105, 114, 101, 99, 116,
    111, 114, 105, 101, 115, 0, 1, 11, 3, 8, 112, 114, 101, 111, 112, 101, 110, 115, 22, 112, 107,
    103, 58, 47, 112, 114, 101, 111, 112, 101, 110, 115, 47, 112, 114, 101, 111, 112, 101, 110,
    115, 5, 31, 1, 66, 3, 1, 106, 0, 0, 1, 64, 1, 6, 115, 116, 97, 116, 117, 115, 0, 1, 0, 4, 4,
    101, 120, 105, 116, 0, 1, 1, 3, 4, 101, 120, 105, 116, 19, 112, 107, 103, 58, 47, 101, 120,
    105, 116, 47, 119, 97, 115, 105, 45, 101, 120, 105, 116, 5, 32, 4, 7, 114, 101, 97, 99, 116,
    111, 114, 20, 112, 107, 103, 58, 47, 114, 101, 97, 99, 116, 111, 114, 47, 114, 101, 97, 99,
    116, 111, 114, 4, 0, 11, 25, 1, 7, 114, 101, 97, 99, 116, 111, 114, 12, 112, 107, 103, 58, 47,
    114, 101, 97, 99, 116, 111, 114, 3, 8, 0, 7, 139, 65, 1, 65, 2, 1, 65, 56, 1, 66, 9, 1, 121, 4,
    10, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 0, 3, 0, 0, 1, 114, 2, 7, 115, 101, 99, 111,
    110, 100, 115, 119, 11, 110, 97, 110, 111, 115, 101, 99, 111, 110, 100, 115, 121, 4, 8, 100,
    97, 116, 101, 116, 105, 109, 101, 0, 3, 0, 2, 1, 64, 1, 4, 116, 104, 105, 115, 1, 0, 3, 4, 3,
    110, 111, 119, 0, 1, 4, 4, 10, 114, 101, 115, 111, 108, 117, 116, 105, 111, 110, 0, 1, 4, 1,
    64, 1, 4, 116, 104, 105, 115, 1, 1, 0, 4, 15, 100, 114, 111, 112, 45, 119, 97, 108, 108, 45,
    99, 108, 111, 99, 107, 0, 1, 5, 3, 10, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 34, 112,
    97, 116, 104, 58, 47, 99, 108, 111, 99, 107, 115, 47, 119, 97, 108, 108, 45, 99, 108, 111, 99,
    107, 47, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 5, 0, 1, 66, 8, 1, 121, 4, 8, 112, 111,
    108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 1, 64, 1, 4, 116, 104, 105, 115, 1, 1, 0, 4, 13, 100,
    114, 111, 112, 45, 112, 111, 108, 108, 97, 98, 108, 101, 0, 1, 2, 1, 112, 1, 1, 112, 125, 1,
    64, 1, 2, 105, 110, 3, 0, 4, 4, 11, 112, 111, 108, 108, 45, 111, 110, 101, 111, 102, 102, 0, 1,
    5, 3, 4, 112, 111, 108, 108, 20, 112, 97, 116, 104, 58, 47, 112, 111, 108, 108, 47, 112, 111,
    108, 108, 47, 112, 111, 108, 108, 5, 1, 2, 3, 0, 1, 8, 112, 111, 108, 108, 97, 98, 108, 101, 1,
    66, 13, 2, 3, 2, 1, 2, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 1, 121, 4, 15,
    109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107, 0, 3, 0, 2, 1, 119, 4,
    7, 105, 110, 115, 116, 97, 110, 116, 0, 3, 0, 4, 1, 64, 1, 4, 116, 104, 105, 115, 3, 0, 5, 4,
    3, 110, 111, 119, 0, 1, 6, 4, 10, 114, 101, 115, 111, 108, 117, 116, 105, 111, 110, 0, 1, 6, 1,
    64, 3, 4, 116, 104, 105, 115, 3, 4, 119, 104, 101, 110, 5, 8, 97, 98, 115, 111, 108, 117, 116,
    101, 127, 0, 1, 4, 9, 115, 117, 98, 115, 99, 114, 105, 98, 101, 0, 1, 7, 1, 64, 1, 4, 116, 104,
    105, 115, 3, 1, 0, 4, 20, 100, 114, 111, 112, 45, 109, 111, 110, 111, 116, 111, 110, 105, 99,
    45, 99, 108, 111, 99, 107, 0, 1, 8, 3, 15, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99,
    108, 111, 99, 107, 44, 112, 97, 116, 104, 58, 47, 99, 108, 111, 99, 107, 115, 47, 109, 111,
    110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107, 47, 109, 111, 110, 111, 116, 111,
    110, 105, 99, 45, 99, 108, 111, 99, 107, 5, 3, 2, 3, 0, 0, 10, 119, 97, 108, 108, 45, 99, 108,
    111, 99, 107, 1, 66, 4, 2, 3, 2, 1, 4, 4, 10, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 0,
    3, 0, 0, 1, 64, 0, 0, 1, 4, 19, 105, 110, 115, 116, 97, 110, 99, 101, 45, 119, 97, 108, 108,
    45, 99, 108, 111, 99, 107, 0, 1, 2, 3, 19, 105, 110, 115, 116, 97, 110, 99, 101, 45, 119, 97,
    108, 108, 45, 99, 108, 111, 99, 107, 52, 112, 97, 116, 104, 58, 47, 99, 108, 111, 99, 107, 115,
    47, 105, 110, 115, 116, 97, 110, 99, 101, 45, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 47,
    105, 110, 115, 116, 97, 110, 99, 101, 45, 119, 97, 108, 108, 45, 99, 108, 111, 99, 107, 5, 5,
    2, 3, 0, 2, 15, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107, 1, 66,
    4, 2, 3, 2, 1, 6, 4, 15, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107,
    0, 3, 0, 0, 1, 64, 0, 0, 1, 4, 24, 105, 110, 115, 116, 97, 110, 99, 101, 45, 109, 111, 110,
    111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107, 0, 1, 2, 3, 24, 105, 110, 115, 116, 97,
    110, 99, 101, 45, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107, 62,
    112, 97, 116, 104, 58, 47, 99, 108, 111, 99, 107, 115, 47, 105, 110, 115, 116, 97, 110, 99,
    101, 45, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107, 47, 105, 110,
    115, 116, 97, 110, 99, 101, 45, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111,
    99, 107, 5, 7, 2, 3, 0, 0, 8, 100, 97, 116, 101, 116, 105, 109, 101, 1, 66, 12, 2, 3, 2, 1, 8,
    4, 8, 100, 97, 116, 101, 116, 105, 109, 101, 0, 3, 0, 0, 1, 114, 3, 10, 117, 116, 99, 45, 111,
    102, 102, 115, 101, 116, 122, 4, 110, 97, 109, 101, 115, 23, 105, 110, 45, 100, 97, 121, 108,
    105, 103, 104, 116, 45, 115, 97, 118, 105, 110, 103, 45, 116, 105, 109, 101, 127, 4, 16, 116,
    105, 109, 101, 122, 111, 110, 101, 45, 100, 105, 115, 112, 108, 97, 121, 0, 3, 0, 2, 1, 121, 4,
    8, 116, 105, 109, 101, 122, 111, 110, 101, 0, 3, 0, 4, 1, 64, 2, 4, 116, 104, 105, 115, 5, 4,
    119, 104, 101, 110, 1, 0, 3, 4, 7, 100, 105, 115, 112, 108, 97, 121, 0, 1, 6, 1, 64, 2, 4, 116,
    104, 105, 115, 5, 4, 119, 104, 101, 110, 1, 0, 122, 4, 10, 117, 116, 99, 45, 111, 102, 102,
    115, 101, 116, 0, 1, 7, 1, 64, 1, 4, 116, 104, 105, 115, 5, 1, 0, 4, 13, 100, 114, 111, 112,
    45, 116, 105, 109, 101, 122, 111, 110, 101, 0, 1, 8, 3, 8, 116, 105, 109, 101, 122, 111, 110,
    101, 30, 112, 97, 116, 104, 58, 47, 99, 108, 111, 99, 107, 115, 47, 116, 105, 109, 101, 122,
    111, 110, 101, 47, 116, 105, 109, 101, 122, 111, 110, 101, 5, 9, 1, 66, 39, 2, 3, 2, 1, 2, 4,
    8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 0, 1, 114, 0, 4, 12, 115, 116, 114, 101, 97,
    109, 45, 101, 114, 114, 111, 114, 0, 3, 0, 2, 1, 121, 4, 13, 111, 117, 116, 112, 117, 116, 45,
    115, 116, 114, 101, 97, 109, 0, 3, 0, 4, 1, 121, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116,
    114, 101, 97, 109, 0, 3, 0, 6, 1, 112, 125, 1, 111, 2, 8, 127, 1, 106, 1, 9, 1, 3, 1, 64, 2, 4,
    116, 104, 105, 115, 7, 3, 108, 101, 110, 119, 0, 10, 4, 4, 114, 101, 97, 100, 0, 1, 11, 4, 13,
    98, 108, 111, 99, 107, 105, 110, 103, 45, 114, 101, 97, 100, 0, 1, 11, 1, 111, 2, 119, 127, 1,
    106, 1, 12, 1, 3, 1, 64, 2, 4, 116, 104, 105, 115, 7, 3, 108, 101, 110, 119, 0, 13, 4, 4, 115,
    107, 105, 112, 0, 1, 14, 4, 13, 98, 108, 111, 99, 107, 105, 110, 103, 45, 115, 107, 105, 112,
    0, 1, 14, 1, 64, 1, 4, 116, 104, 105, 115, 7, 0, 1, 4, 25, 115, 117, 98, 115, 99, 114, 105, 98,
    101, 45, 116, 111, 45, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 1, 15, 1,
    64, 1, 4, 116, 104, 105, 115, 7, 1, 0, 4, 17, 100, 114, 111, 112, 45, 105, 110, 112, 117, 116,
    45, 115, 116, 114, 101, 97, 109, 0, 1, 16, 1, 106, 1, 119, 1, 3, 1, 64, 2, 4, 116, 104, 105,
    115, 5, 3, 98, 117, 102, 8, 0, 17, 4, 5, 119, 114, 105, 116, 101, 0, 1, 18, 4, 14, 98, 108,
    111, 99, 107, 105, 110, 103, 45, 119, 114, 105, 116, 101, 0, 1, 18, 1, 64, 2, 4, 116, 104, 105,
    115, 5, 3, 108, 101, 110, 119, 0, 17, 4, 12, 119, 114, 105, 116, 101, 45, 122, 101, 114, 111,
    101, 115, 0, 1, 19, 4, 21, 98, 108, 111, 99, 107, 105, 110, 103, 45, 119, 114, 105, 116, 101,
    45, 122, 101, 114, 111, 101, 115, 0, 1, 19, 1, 64, 3, 4, 116, 104, 105, 115, 5, 3, 115, 114,
    99, 7, 3, 108, 101, 110, 119, 0, 13, 4, 6, 115, 112, 108, 105, 99, 101, 0, 1, 20, 4, 15, 98,
    108, 111, 99, 107, 105, 110, 103, 45, 115, 112, 108, 105, 99, 101, 0, 1, 20, 1, 64, 2, 4, 116,
    104, 105, 115, 5, 3, 115, 114, 99, 7, 0, 17, 4, 7, 102, 111, 114, 119, 97, 114, 100, 0, 1, 21,
    1, 64, 1, 4, 116, 104, 105, 115, 5, 0, 1, 4, 26, 115, 117, 98, 115, 99, 114, 105, 98, 101, 45,
    116, 111, 45, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 1, 22, 1, 64,
    1, 4, 116, 104, 105, 115, 5, 1, 0, 4, 18, 100, 114, 111, 112, 45, 111, 117, 116, 112, 117, 116,
    45, 115, 116, 114, 101, 97, 109, 0, 1, 23, 3, 7, 115, 116, 114, 101, 97, 109, 115, 24, 112, 97,
    116, 104, 58, 47, 105, 111, 47, 115, 116, 114, 101, 97, 109, 115, 47, 115, 116, 114, 101, 97,
    109, 115, 5, 10, 2, 3, 0, 6, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 2,
    3, 0, 6, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 1, 66, 113, 2, 3,
    2, 1, 11, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 0, 2, 3, 2,
    1, 12, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 2, 2, 3,
    2, 1, 8, 4, 8, 100, 97, 116, 101, 116, 105, 109, 101, 0, 3, 0, 4, 1, 110, 1, 14, 115, 121, 109,
    108, 105, 110, 107, 45, 102, 111, 108, 108, 111, 119, 4, 10, 112, 97, 116, 104, 45, 102, 108,
    97, 103, 115, 0, 3, 0, 6, 1, 110, 4, 6, 99, 114, 101, 97, 116, 101, 9, 100, 105, 114, 101, 99,
    116, 111, 114, 121, 9, 101, 120, 99, 108, 117, 115, 105, 118, 101, 8, 116, 114, 117, 110, 99,
    97, 116, 101, 4, 10, 111, 112, 101, 110, 45, 102, 108, 97, 103, 115, 0, 3, 0, 8, 1, 110, 3, 8,
    114, 101, 97, 100, 97, 98, 108, 101, 9, 119, 114, 105, 116, 101, 97, 98, 108, 101, 10, 101,
    120, 101, 99, 117, 116, 97, 98, 108, 101, 4, 5, 109, 111, 100, 101, 115, 0, 3, 0, 10, 1, 119,
    4, 10, 108, 105, 110, 107, 45, 99, 111, 117, 110, 116, 0, 3, 0, 12, 1, 119, 4, 5, 105, 110,
    111, 100, 101, 0, 3, 0, 14, 1, 119, 4, 8, 102, 105, 108, 101, 115, 105, 122, 101, 0, 3, 0, 16,
    1, 109, 37, 6, 97, 99, 99, 101, 115, 115, 11, 119, 111, 117, 108, 100, 45, 98, 108, 111, 99,
    107, 7, 97, 108, 114, 101, 97, 100, 121, 14, 98, 97, 100, 45, 100, 101, 115, 99, 114, 105, 112,
    116, 111, 114, 4, 98, 117, 115, 121, 8, 100, 101, 97, 100, 108, 111, 99, 107, 5, 113, 117, 111,
    116, 97, 5, 101, 120, 105, 115, 116, 14, 102, 105, 108, 101, 45, 116, 111, 111, 45, 108, 97,
    114, 103, 101, 21, 105, 108, 108, 101, 103, 97, 108, 45, 98, 121, 116, 101, 45, 115, 101, 113,
    117, 101, 110, 99, 101, 11, 105, 110, 45, 112, 114, 111, 103, 114, 101, 115, 115, 11, 105, 110,
    116, 101, 114, 114, 117, 112, 116, 101, 100, 7, 105, 110, 118, 97, 108, 105, 100, 2, 105, 111,
    12, 105, 115, 45, 100, 105, 114, 101, 99, 116, 111, 114, 121, 4, 108, 111, 111, 112, 14, 116,
    111, 111, 45, 109, 97, 110, 121, 45, 108, 105, 110, 107, 115, 12, 109, 101, 115, 115, 97, 103,
    101, 45, 115, 105, 122, 101, 13, 110, 97, 109, 101, 45, 116, 111, 111, 45, 108, 111, 110, 103,
    9, 110, 111, 45, 100, 101, 118, 105, 99, 101, 8, 110, 111, 45, 101, 110, 116, 114, 121, 7, 110,
    111, 45, 108, 111, 99, 107, 19, 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116, 45,
    109, 101, 109, 111, 114, 121, 18, 105, 110, 115, 117, 102, 102, 105, 99, 105, 101, 110, 116,
    45, 115, 112, 97, 99, 101, 13, 110, 111, 116, 45, 100, 105, 114, 101, 99, 116, 111, 114, 121,
    9, 110, 111, 116, 45, 101, 109, 112, 116, 121, 15, 110, 111, 116, 45, 114, 101, 99, 111, 118,
    101, 114, 97, 98, 108, 101, 11, 117, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 6, 110,
    111, 45, 116, 116, 121, 14, 110, 111, 45, 115, 117, 99, 104, 45, 100, 101, 118, 105, 99, 101,
    8, 111, 118, 101, 114, 102, 108, 111, 119, 13, 110, 111, 116, 45, 112, 101, 114, 109, 105, 116,
    116, 101, 100, 4, 112, 105, 112, 101, 9, 114, 101, 97, 100, 45, 111, 110, 108, 121, 12, 105,
    110, 118, 97, 108, 105, 100, 45, 115, 101, 101, 107, 14, 116, 101, 120, 116, 45, 102, 105, 108,
    101, 45, 98, 117, 115, 121, 12, 99, 114, 111, 115, 115, 45, 100, 101, 118, 105, 99, 101, 4, 10,
    101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 0, 3, 0, 18, 1, 121, 4, 22, 100, 105, 114, 101,
    99, 116, 111, 114, 121, 45, 101, 110, 116, 114, 121, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0,
    20, 1, 119, 4, 6, 100, 101, 118, 105, 99, 101, 0, 3, 0, 22, 1, 109, 8, 7, 117, 110, 107, 110,
    111, 119, 110, 12, 98, 108, 111, 99, 107, 45, 100, 101, 118, 105, 99, 101, 16, 99, 104, 97,
    114, 97, 99, 116, 101, 114, 45, 100, 101, 118, 105, 99, 101, 9, 100, 105, 114, 101, 99, 116,
    111, 114, 121, 4, 102, 105, 102, 111, 13, 115, 121, 109, 98, 111, 108, 105, 99, 45, 108, 105,
    110, 107, 12, 114, 101, 103, 117, 108, 97, 114, 45, 102, 105, 108, 101, 6, 115, 111, 99, 107,
    101, 116, 4, 15, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 45, 116, 121, 112, 101, 0, 3,
    0, 24, 1, 107, 15, 1, 114, 3, 5, 105, 110, 111, 100, 101, 26, 4, 116, 121, 112, 101, 25, 4,
    110, 97, 109, 101, 115, 4, 15, 100, 105, 114, 101, 99, 116, 111, 114, 121, 45, 101, 110, 116,
    114, 121, 0, 3, 0, 27, 1, 110, 7, 4, 114, 101, 97, 100, 5, 119, 114, 105, 116, 101, 12, 110,
    111, 110, 45, 98, 108, 111, 99, 107, 105, 110, 103, 19, 102, 105, 108, 101, 45, 105, 110, 116,
    101, 103, 114, 105, 116, 121, 45, 115, 121, 110, 99, 19, 100, 97, 116, 97, 45, 105, 110, 116,
    101, 103, 114, 105, 116, 121, 45, 115, 121, 110, 99, 20, 114, 101, 113, 117, 101, 115, 116,
    101, 100, 45, 119, 114, 105, 116, 101, 45, 115, 121, 110, 99, 16, 109, 117, 116, 97, 116, 101,
    45, 100, 105, 114, 101, 99, 116, 111, 114, 121, 4, 16, 100, 101, 115, 99, 114, 105, 112, 116,
    111, 114, 45, 102, 108, 97, 103, 115, 0, 3, 0, 29, 1, 121, 4, 10, 100, 101, 115, 99, 114, 105,
    112, 116, 111, 114, 0, 3, 0, 31, 1, 113, 3, 9, 110, 111, 45, 99, 104, 97, 110, 103, 101, 0, 0,
    3, 110, 111, 119, 0, 0, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112, 1, 5, 0, 4, 13, 110,
    101, 119, 45, 116, 105, 109, 101, 115, 116, 97, 109, 112, 0, 3, 0, 33, 1, 114, 8, 6, 100, 101,
    118, 105, 99, 101, 23, 5, 105, 110, 111, 100, 101, 15, 4, 116, 121, 112, 101, 25, 10, 108, 105,
    110, 107, 45, 99, 111, 117, 110, 116, 13, 4, 115, 105, 122, 101, 17, 21, 100, 97, 116, 97, 45,
    97, 99, 99, 101, 115, 115, 45, 116, 105, 109, 101, 115, 116, 97, 109, 112, 5, 27, 100, 97, 116,
    97, 45, 109, 111, 100, 105, 102, 105, 99, 97, 116, 105, 111, 110, 45, 116, 105, 109, 101, 115,
    116, 97, 109, 112, 5, 23, 115, 116, 97, 116, 117, 115, 45, 99, 104, 97, 110, 103, 101, 45, 116,
    105, 109, 101, 115, 116, 97, 109, 112, 5, 4, 15, 100, 101, 115, 99, 114, 105, 112, 116, 111,
    114, 45, 115, 116, 97, 116, 0, 3, 0, 35, 1, 109, 6, 6, 110, 111, 114, 109, 97, 108, 10, 115,
    101, 113, 117, 101, 110, 116, 105, 97, 108, 6, 114, 97, 110, 100, 111, 109, 9, 119, 105, 108,
    108, 45, 110, 101, 101, 100, 9, 100, 111, 110, 116, 45, 110, 101, 101, 100, 8, 110, 111, 45,
    114, 101, 117, 115, 101, 4, 6, 97, 100, 118, 105, 99, 101, 0, 3, 0, 37, 1, 64, 2, 4, 116, 104,
    105, 115, 32, 6, 111, 102, 102, 115, 101, 116, 17, 0, 1, 4, 15, 114, 101, 97, 100, 45, 118,
    105, 97, 45, 115, 116, 114, 101, 97, 109, 0, 1, 39, 1, 64, 2, 4, 116, 104, 105, 115, 32, 6,
    111, 102, 102, 115, 101, 116, 17, 0, 3, 4, 16, 119, 114, 105, 116, 101, 45, 118, 105, 97, 45,
    115, 116, 114, 101, 97, 109, 0, 1, 40, 1, 64, 1, 4, 116, 104, 105, 115, 32, 0, 3, 4, 17, 97,
    112, 112, 101, 110, 100, 45, 118, 105, 97, 45, 115, 116, 114, 101, 97, 109, 0, 1, 41, 1, 106,
    0, 1, 19, 1, 64, 4, 4, 116, 104, 105, 115, 32, 6, 111, 102, 102, 115, 101, 116, 17, 6, 108,
    101, 110, 103, 116, 104, 17, 6, 97, 100, 118, 105, 99, 101, 38, 0, 42, 4, 6, 97, 100, 118, 105,
    115, 101, 0, 1, 43, 1, 64, 1, 4, 116, 104, 105, 115, 32, 0, 42, 4, 9, 115, 121, 110, 99, 45,
    100, 97, 116, 97, 0, 1, 44, 1, 106, 1, 30, 1, 19, 1, 64, 1, 4, 116, 104, 105, 115, 32, 0, 45,
    4, 9, 103, 101, 116, 45, 102, 108, 97, 103, 115, 0, 1, 46, 1, 106, 1, 25, 1, 19, 1, 64, 1, 4,
    116, 104, 105, 115, 32, 0, 47, 4, 8, 103, 101, 116, 45, 116, 121, 112, 101, 0, 1, 48, 1, 64, 2,
    4, 116, 104, 105, 115, 32, 5, 102, 108, 97, 103, 115, 30, 0, 42, 4, 9, 115, 101, 116, 45, 102,
    108, 97, 103, 115, 0, 1, 49, 1, 64, 2, 4, 116, 104, 105, 115, 32, 4, 115, 105, 122, 101, 17, 0,
    42, 4, 8, 115, 101, 116, 45, 115, 105, 122, 101, 0, 1, 50, 1, 64, 3, 4, 116, 104, 105, 115, 32,
    21, 100, 97, 116, 97, 45, 97, 99, 99, 101, 115, 115, 45, 116, 105, 109, 101, 115, 116, 97, 109,
    112, 34, 27, 100, 97, 116, 97, 45, 109, 111, 100, 105, 102, 105, 99, 97, 116, 105, 111, 110,
    45, 116, 105, 109, 101, 115, 116, 97, 109, 112, 34, 0, 42, 4, 9, 115, 101, 116, 45, 116, 105,
    109, 101, 115, 0, 1, 51, 1, 112, 125, 1, 111, 2, 52, 127, 1, 106, 1, 53, 1, 19, 1, 64, 3, 4,
    116, 104, 105, 115, 32, 6, 108, 101, 110, 103, 116, 104, 17, 6, 111, 102, 102, 115, 101, 116,
    17, 0, 54, 4, 4, 114, 101, 97, 100, 0, 1, 55, 1, 106, 1, 17, 1, 19, 1, 64, 3, 4, 116, 104, 105,
    115, 32, 6, 98, 117, 102, 102, 101, 114, 52, 6, 111, 102, 102, 115, 101, 116, 17, 0, 56, 4, 5,
    119, 114, 105, 116, 101, 0, 1, 57, 1, 106, 1, 21, 1, 19, 1, 64, 1, 4, 116, 104, 105, 115, 32,
    0, 58, 4, 14, 114, 101, 97, 100, 45, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 1, 59, 4,
    4, 115, 121, 110, 99, 0, 1, 44, 1, 64, 2, 4, 116, 104, 105, 115, 32, 4, 112, 97, 116, 104, 115,
    0, 42, 4, 19, 99, 114, 101, 97, 116, 101, 45, 100, 105, 114, 101, 99, 116, 111, 114, 121, 45,
    97, 116, 0, 1, 60, 1, 106, 1, 36, 1, 19, 1, 64, 1, 4, 116, 104, 105, 115, 32, 0, 61, 4, 4, 115,
    116, 97, 116, 0, 1, 62, 1, 64, 3, 4, 116, 104, 105, 115, 32, 10, 112, 97, 116, 104, 45, 102,
    108, 97, 103, 115, 7, 4, 112, 97, 116, 104, 115, 0, 61, 4, 7, 115, 116, 97, 116, 45, 97, 116,
    0, 1, 63, 1, 64, 5, 4, 116, 104, 105, 115, 32, 10, 112, 97, 116, 104, 45, 102, 108, 97, 103,
    115, 7, 4, 112, 97, 116, 104, 115, 21, 100, 97, 116, 97, 45, 97, 99, 99, 101, 115, 115, 45,
    116, 105, 109, 101, 115, 116, 97, 109, 112, 34, 27, 100, 97, 116, 97, 45, 109, 111, 100, 105,
    102, 105, 99, 97, 116, 105, 111, 110, 45, 116, 105, 109, 101, 115, 116, 97, 109, 112, 34, 0,
    42, 4, 12, 115, 101, 116, 45, 116, 105, 109, 101, 115, 45, 97, 116, 0, 1, 64, 1, 64, 5, 4, 116,
    104, 105, 115, 32, 14, 111, 108, 100, 45, 112, 97, 116, 104, 45, 102, 108, 97, 103, 115, 7, 8,
    111, 108, 100, 45, 112, 97, 116, 104, 115, 14, 110, 101, 119, 45, 100, 101, 115, 99, 114, 105,
    112, 116, 111, 114, 32, 8, 110, 101, 119, 45, 112, 97, 116, 104, 115, 0, 42, 4, 7, 108, 105,
    110, 107, 45, 97, 116, 0, 1, 65, 1, 106, 1, 32, 1, 19, 1, 64, 6, 4, 116, 104, 105, 115, 32, 10,
    112, 97, 116, 104, 45, 102, 108, 97, 103, 115, 7, 4, 112, 97, 116, 104, 115, 10, 111, 112, 101,
    110, 45, 102, 108, 97, 103, 115, 9, 5, 102, 108, 97, 103, 115, 30, 5, 109, 111, 100, 101, 115,
    11, 0, 194, 0, 4, 7, 111, 112, 101, 110, 45, 97, 116, 0, 1, 67, 1, 106, 1, 115, 1, 19, 1, 64,
    2, 4, 116, 104, 105, 115, 32, 4, 112, 97, 116, 104, 115, 0, 196, 0, 4, 11, 114, 101, 97, 100,
    108, 105, 110, 107, 45, 97, 116, 0, 1, 69, 4, 19, 114, 101, 109, 111, 118, 101, 45, 100, 105,
    114, 101, 99, 116, 111, 114, 121, 45, 97, 116, 0, 1, 60, 1, 64, 4, 4, 116, 104, 105, 115, 32,
    8, 111, 108, 100, 45, 112, 97, 116, 104, 115, 14, 110, 101, 119, 45, 100, 101, 115, 99, 114,
    105, 112, 116, 111, 114, 32, 8, 110, 101, 119, 45, 112, 97, 116, 104, 115, 0, 42, 4, 9, 114,
    101, 110, 97, 109, 101, 45, 97, 116, 0, 1, 70, 1, 64, 3, 4, 116, 104, 105, 115, 32, 8, 111,
    108, 100, 45, 112, 97, 116, 104, 115, 8, 110, 101, 119, 45, 112, 97, 116, 104, 115, 0, 42, 4,
    10, 115, 121, 109, 108, 105, 110, 107, 45, 97, 116, 0, 1, 71, 4, 14, 117, 110, 108, 105, 110,
    107, 45, 102, 105, 108, 101, 45, 97, 116, 0, 1, 60, 1, 64, 4, 4, 116, 104, 105, 115, 32, 10,
    112, 97, 116, 104, 45, 102, 108, 97, 103, 115, 7, 4, 112, 97, 116, 104, 115, 5, 109, 111, 100,
    101, 115, 11, 0, 42, 4, 26, 99, 104, 97, 110, 103, 101, 45, 102, 105, 108, 101, 45, 112, 101,
    114, 109, 105, 115, 115, 105, 111, 110, 115, 45, 97, 116, 0, 1, 72, 4, 31, 99, 104, 97, 110,
    103, 101, 45, 100, 105, 114, 101, 99, 116, 111, 114, 121, 45, 112, 101, 114, 109, 105, 115,
    115, 105, 111, 110, 115, 45, 97, 116, 0, 1, 72, 4, 11, 108, 111, 99, 107, 45, 115, 104, 97,
    114, 101, 100, 0, 1, 44, 4, 14, 108, 111, 99, 107, 45, 101, 120, 99, 108, 117, 115, 105, 118,
    101, 0, 1, 44, 4, 15, 116, 114, 121, 45, 108, 111, 99, 107, 45, 115, 104, 97, 114, 101, 100, 0,
    1, 44, 4, 18, 116, 114, 121, 45, 108, 111, 99, 107, 45, 101, 120, 99, 108, 117, 115, 105, 118,
    101, 0, 1, 44, 4, 6, 117, 110, 108, 111, 99, 107, 0, 1, 44, 1, 64, 1, 4, 116, 104, 105, 115,
    32, 1, 0, 4, 15, 100, 114, 111, 112, 45, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 0, 1,
    73, 1, 107, 28, 1, 106, 1, 202, 0, 1, 19, 1, 64, 1, 4, 116, 104, 105, 115, 21, 0, 203, 0, 4,
    20, 114, 101, 97, 100, 45, 100, 105, 114, 101, 99, 116, 111, 114, 121, 45, 101, 110, 116, 114,
    121, 0, 1, 76, 1, 64, 1, 4, 116, 104, 105, 115, 21, 1, 0, 4, 27, 100, 114, 111, 112, 45, 100,
    105, 114, 101, 99, 116, 111, 114, 121, 45, 101, 110, 116, 114, 121, 45, 115, 116, 114, 101, 97,
    109, 0, 1, 77, 3, 10, 102, 105, 108, 101, 115, 121, 115, 116, 101, 109, 38, 112, 97, 116, 104,
    58, 47, 102, 105, 108, 101, 115, 121, 115, 116, 101, 109, 47, 102, 105, 108, 101, 115, 121,
    115, 116, 101, 109, 47, 102, 105, 108, 101, 115, 121, 115, 116, 101, 109, 5, 13, 1, 66, 20, 1,
    121, 4, 7, 110, 101, 116, 119, 111, 114, 107, 0, 3, 0, 0, 1, 111, 8, 123, 123, 123, 123, 123,
    123, 123, 123, 4, 12, 105, 112, 118, 54, 45, 97, 100, 100, 114, 101, 115, 115, 0, 3, 0, 2, 1,
    114, 4, 4, 112, 111, 114, 116, 123, 9, 102, 108, 111, 119, 45, 105, 110, 102, 111, 121, 7, 97,
    100, 100, 114, 101, 115, 115, 3, 8, 115, 99, 111, 112, 101, 45, 105, 100, 121, 4, 19, 105, 112,
    118, 54, 45, 115, 111, 99, 107, 101, 116, 45, 97, 100, 100, 114, 101, 115, 115, 0, 3, 0, 4, 1,
    111, 4, 125, 125, 125, 125, 4, 12, 105, 112, 118, 52, 45, 97, 100, 100, 114, 101, 115, 115, 0,
    3, 0, 6, 1, 114, 2, 4, 112, 111, 114, 116, 123, 7, 97, 100, 100, 114, 101, 115, 115, 7, 4, 19,
    105, 112, 118, 52, 45, 115, 111, 99, 107, 101, 116, 45, 97, 100, 100, 114, 101, 115, 115, 0, 3,
    0, 8, 1, 113, 2, 4, 105, 112, 118, 52, 1, 9, 0, 4, 105, 112, 118, 54, 1, 5, 0, 4, 17, 105, 112,
    45, 115, 111, 99, 107, 101, 116, 45, 97, 100, 100, 114, 101, 115, 115, 0, 3, 0, 10, 1, 109, 2,
    4, 105, 112, 118, 52, 4, 105, 112, 118, 54, 4, 17, 105, 112, 45, 97, 100, 100, 114, 101, 115,
    115, 45, 102, 97, 109, 105, 108, 121, 0, 3, 0, 12, 1, 113, 2, 4, 105, 112, 118, 52, 1, 7, 0, 4,
    105, 112, 118, 54, 1, 3, 0, 4, 10, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 0, 3, 0, 14,
    1, 109, 2, 7, 117, 110, 107, 110, 111, 119, 110, 5, 97, 103, 97, 105, 110, 4, 5, 101, 114, 114,
    111, 114, 0, 3, 0, 16, 1, 64, 1, 4, 116, 104, 105, 115, 1, 1, 0, 4, 12, 100, 114, 111, 112, 45,
    110, 101, 116, 119, 111, 114, 107, 0, 1, 18, 3, 7, 110, 101, 116, 119, 111, 114, 107, 29, 112,
    97, 116, 104, 58, 47, 115, 111, 99, 107, 101, 116, 115, 47, 110, 101, 116, 119, 111, 114, 107,
    47, 110, 101, 116, 119, 111, 114, 107, 5, 14, 2, 3, 0, 8, 7, 110, 101, 116, 119, 111, 114, 107,
    1, 66, 4, 2, 3, 2, 1, 15, 4, 7, 110, 101, 116, 119, 111, 114, 107, 0, 3, 0, 0, 1, 64, 0, 0, 1,
    4, 16, 105, 110, 115, 116, 97, 110, 99, 101, 45, 110, 101, 116, 119, 111, 114, 107, 0, 1, 2, 3,
    16, 105, 110, 115, 116, 97, 110, 99, 101, 45, 110, 101, 116, 119, 111, 114, 107, 47, 112, 97,
    116, 104, 58, 47, 115, 111, 99, 107, 101, 116, 115, 47, 105, 110, 115, 116, 97, 110, 99, 101,
    45, 110, 101, 116, 119, 111, 114, 107, 47, 105, 110, 115, 116, 97, 110, 99, 101, 45, 110, 101,
    116, 119, 111, 114, 107, 5, 16, 2, 3, 0, 8, 5, 101, 114, 114, 111, 114, 2, 3, 0, 8, 10, 105,
    112, 45, 97, 100, 100, 114, 101, 115, 115, 2, 3, 0, 8, 17, 105, 112, 45, 97, 100, 100, 114,
    101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 1, 66, 30, 2, 3, 2, 1, 2, 4, 8, 112, 111, 108,
    108, 97, 98, 108, 101, 0, 3, 0, 0, 2, 3, 2, 1, 15, 4, 7, 110, 101, 116, 119, 111, 114, 107, 0,
    3, 0, 2, 2, 3, 2, 1, 17, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 4, 2, 3, 2, 1, 18, 4, 10, 105,
    112, 45, 97, 100, 100, 114, 101, 115, 115, 0, 3, 0, 6, 2, 3, 2, 1, 19, 4, 17, 105, 112, 45, 97,
    100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 0, 3, 0, 8, 1, 121, 4, 22, 114,
    101, 115, 111, 108, 118, 101, 45, 97, 100, 100, 114, 101, 115, 115, 45, 115, 116, 114, 101, 97,
    109, 0, 3, 0, 10, 1, 107, 9, 1, 106, 1, 11, 1, 5, 1, 64, 4, 7, 110, 101, 116, 119, 111, 114,
    107, 3, 4, 110, 97, 109, 101, 115, 14, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105,
    108, 121, 12, 19, 105, 110, 99, 108, 117, 100, 101, 45, 117, 110, 97, 118, 97, 105, 108, 97,
    98, 108, 101, 127, 0, 13, 4, 17, 114, 101, 115, 111, 108, 118, 101, 45, 97, 100, 100, 114, 101,
    115, 115, 101, 115, 0, 1, 14, 1, 107, 7, 1, 106, 1, 15, 1, 5, 1, 64, 1, 4, 116, 104, 105, 115,
    11, 0, 16, 4, 20, 114, 101, 115, 111, 108, 118, 101, 45, 110, 101, 120, 116, 45, 97, 100, 100,
    114, 101, 115, 115, 0, 1, 17, 1, 64, 1, 4, 116, 104, 105, 115, 11, 1, 0, 4, 27, 100, 114, 111,
    112, 45, 114, 101, 115, 111, 108, 118, 101, 45, 97, 100, 100, 114, 101, 115, 115, 45, 115, 116,
    114, 101, 97, 109, 0, 1, 18, 1, 106, 1, 127, 1, 5, 1, 64, 1, 4, 116, 104, 105, 115, 11, 0, 19,
    4, 12, 110, 111, 110, 45, 98, 108, 111, 99, 107, 105, 110, 103, 0, 1, 20, 1, 106, 0, 1, 5, 1,
    64, 2, 4, 116, 104, 105, 115, 11, 5, 118, 97, 108, 117, 101, 127, 0, 21, 4, 16, 115, 101, 116,
    45, 110, 111, 110, 45, 98, 108, 111, 99, 107, 105, 110, 103, 0, 1, 22, 1, 64, 1, 4, 116, 104,
    105, 115, 11, 0, 1, 4, 9, 115, 117, 98, 115, 99, 114, 105, 98, 101, 0, 1, 23, 3, 14, 105, 112,
    45, 110, 97, 109, 101, 45, 108, 111, 111, 107, 117, 112, 43, 112, 97, 116, 104, 58, 47, 115,
    111, 99, 107, 101, 116, 115, 47, 105, 112, 45, 110, 97, 109, 101, 45, 108, 111, 111, 107, 117,
    112, 47, 105, 112, 45, 110, 97, 109, 101, 45, 108, 111, 111, 107, 117, 112, 5, 20, 2, 3, 0, 8,
    17, 105, 112, 45, 115, 111, 99, 107, 101, 116, 45, 97, 100, 100, 114, 101, 115, 115, 1, 66, 68,
    2, 3, 2, 1, 11, 4, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 0, 2,
    3, 2, 1, 12, 4, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 2,
    2, 3, 2, 1, 2, 4, 8, 112, 111, 108, 108, 97, 98, 108, 101, 0, 3, 0, 4, 2, 3, 2, 1, 15, 4, 7,
    110, 101, 116, 119, 111, 114, 107, 0, 3, 0, 6, 2, 3, 2, 1, 17, 4, 5, 101, 114, 114, 111, 114,
    0, 3, 0, 8, 2, 3, 2, 1, 21, 4, 17, 105, 112, 45, 115, 111, 99, 107, 101, 116, 45, 97, 100, 100,
    114, 101, 115, 115, 0, 3, 0, 10, 2, 3, 2, 1, 19, 4, 17, 105, 112, 45, 97, 100, 100, 114, 101,
    115, 115, 45, 102, 97, 109, 105, 108, 121, 0, 3, 0, 12, 1, 121, 4, 10, 116, 99, 112, 45, 115,
    111, 99, 107, 101, 116, 0, 3, 0, 14, 1, 109, 3, 7, 114, 101, 99, 101, 105, 118, 101, 4, 115,
    101, 110, 100, 4, 98, 111, 116, 104, 4, 13, 115, 104, 117, 116, 100, 111, 119, 110, 45, 116,
    121, 112, 101, 0, 3, 0, 16, 1, 106, 0, 1, 9, 1, 64, 3, 4, 116, 104, 105, 115, 15, 7, 110, 101,
    116, 119, 111, 114, 107, 7, 13, 108, 111, 99, 97, 108, 45, 97, 100, 100, 114, 101, 115, 115,
    11, 0, 18, 4, 4, 98, 105, 110, 100, 0, 1, 19, 1, 111, 2, 1, 3, 1, 106, 1, 20, 1, 9, 1, 64, 3,
    4, 116, 104, 105, 115, 15, 7, 110, 101, 116, 119, 111, 114, 107, 7, 14, 114, 101, 109, 111,
    116, 101, 45, 97, 100, 100, 114, 101, 115, 115, 11, 0, 21, 4, 7, 99, 111, 110, 110, 101, 99,
    116, 0, 1, 22, 1, 64, 2, 4, 116, 104, 105, 115, 15, 7, 110, 101, 116, 119, 111, 114, 107, 7, 0,
    18, 4, 6, 108, 105, 115, 116, 101, 110, 0, 1, 23, 1, 111, 3, 15, 1, 3, 1, 106, 1, 24, 1, 9, 1,
    64, 1, 4, 116, 104, 105, 115, 15, 0, 25, 4, 6, 97, 99, 99, 101, 112, 116, 0, 1, 26, 1, 106, 1,
    11, 1, 9, 1, 64, 1, 4, 116, 104, 105, 115, 15, 0, 27, 4, 13, 108, 111, 99, 97, 108, 45, 97,
    100, 100, 114, 101, 115, 115, 0, 1, 28, 4, 14, 114, 101, 109, 111, 116, 101, 45, 97, 100, 100,
    114, 101, 115, 115, 0, 1, 28, 1, 106, 1, 13, 1, 9, 1, 64, 1, 4, 116, 104, 105, 115, 15, 0, 29,
    4, 14, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 0, 1, 30, 1, 106, 1,
    127, 1, 9, 1, 64, 1, 4, 116, 104, 105, 115, 15, 0, 31, 4, 9, 105, 112, 118, 54, 45, 111, 110,
    108, 121, 0, 1, 32, 1, 64, 2, 4, 116, 104, 105, 115, 15, 5, 118, 97, 108, 117, 101, 127, 0, 18,
    4, 13, 115, 101, 116, 45, 105, 112, 118, 54, 45, 111, 110, 108, 121, 0, 1, 33, 1, 64, 2, 4,
    116, 104, 105, 115, 15, 5, 118, 97, 108, 117, 101, 119, 0, 18, 4, 23, 115, 101, 116, 45, 108,
    105, 115, 116, 101, 110, 45, 98, 97, 99, 107, 108, 111, 103, 45, 115, 105, 122, 101, 0, 1, 34,
    4, 10, 107, 101, 101, 112, 45, 97, 108, 105, 118, 101, 0, 1, 32, 4, 14, 115, 101, 116, 45, 107,
    101, 101, 112, 45, 97, 108, 105, 118, 101, 0, 1, 33, 4, 8, 110, 111, 45, 100, 101, 108, 97,
    121, 0, 1, 32, 4, 12, 115, 101, 116, 45, 110, 111, 45, 100, 101, 108, 97, 121, 0, 1, 33, 1,
    106, 1, 125, 1, 9, 1, 64, 1, 4, 116, 104, 105, 115, 15, 0, 35, 4, 17, 117, 110, 105, 99, 97,
    115, 116, 45, 104, 111, 112, 45, 108, 105, 109, 105, 116, 0, 1, 36, 1, 64, 2, 4, 116, 104, 105,
    115, 15, 5, 118, 97, 108, 117, 101, 125, 0, 18, 4, 21, 115, 101, 116, 45, 117, 110, 105, 99,
    97, 115, 116, 45, 104, 111, 112, 45, 108, 105, 109, 105, 116, 0, 1, 37, 1, 106, 1, 119, 1, 9,
    1, 64, 1, 4, 116, 104, 105, 115, 15, 0, 38, 4, 19, 114, 101, 99, 101, 105, 118, 101, 45, 98,
    117, 102, 102, 101, 114, 45, 115, 105, 122, 101, 0, 1, 39, 4, 23, 115, 101, 116, 45, 114, 101,
    99, 101, 105, 118, 101, 45, 98, 117, 102, 102, 101, 114, 45, 115, 105, 122, 101, 0, 1, 34, 4,
    16, 115, 101, 110, 100, 45, 98, 117, 102, 102, 101, 114, 45, 115, 105, 122, 101, 0, 1, 39, 4,
    20, 115, 101, 116, 45, 115, 101, 110, 100, 45, 98, 117, 102, 102, 101, 114, 45, 115, 105, 122,
    101, 0, 1, 34, 4, 12, 110, 111, 110, 45, 98, 108, 111, 99, 107, 105, 110, 103, 0, 1, 32, 4, 16,
    115, 101, 116, 45, 110, 111, 110, 45, 98, 108, 111, 99, 107, 105, 110, 103, 0, 1, 33, 1, 64, 1,
    4, 116, 104, 105, 115, 15, 0, 5, 4, 9, 115, 117, 98, 115, 99, 114, 105, 98, 101, 0, 1, 40, 1,
    64, 2, 4, 116, 104, 105, 115, 15, 13, 115, 104, 117, 116, 100, 111, 119, 110, 45, 116, 121,
    112, 101, 17, 0, 18, 4, 8, 115, 104, 117, 116, 100, 111, 119, 110, 0, 1, 41, 1, 64, 1, 4, 116,
    104, 105, 115, 15, 1, 0, 4, 15, 100, 114, 111, 112, 45, 116, 99, 112, 45, 115, 111, 99, 107,
    101, 116, 0, 1, 42, 3, 3, 116, 99, 112, 21, 112, 97, 116, 104, 58, 47, 115, 111, 99, 107, 101,
    116, 115, 47, 116, 99, 112, 47, 116, 99, 112, 5, 22, 2, 3, 0, 11, 10, 116, 99, 112, 45, 115,
    111, 99, 107, 101, 116, 1, 66, 11, 2, 3, 2, 1, 15, 4, 7, 110, 101, 116, 119, 111, 114, 107, 0,
    3, 0, 0, 2, 3, 2, 1, 17, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 2, 2, 3, 2, 1, 19, 4, 17, 105,
    112, 45, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 0, 3, 0, 4, 2, 3,
    2, 1, 23, 4, 10, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 0, 3, 0, 6, 1, 106, 1, 7, 1, 3,
    1, 64, 1, 14, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 5, 0, 8, 4,
    17, 99, 114, 101, 97, 116, 101, 45, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 0, 1, 9, 3,
    17, 116, 99, 112, 45, 99, 114, 101, 97, 116, 101, 45, 115, 111, 99, 107, 101, 116, 49, 112, 97,
    116, 104, 58, 47, 115, 111, 99, 107, 101, 116, 115, 47, 116, 99, 112, 45, 99, 114, 101, 97,
    116, 101, 45, 115, 111, 99, 107, 101, 116, 47, 116, 99, 112, 45, 99, 114, 101, 97, 116, 101,
    45, 115, 111, 99, 107, 101, 116, 5, 24, 1, 66, 55, 2, 3, 2, 1, 2, 4, 8, 112, 111, 108, 108, 97,
    98, 108, 101, 0, 3, 0, 0, 2, 3, 2, 1, 15, 4, 7, 110, 101, 116, 119, 111, 114, 107, 0, 3, 0, 2,
    2, 3, 2, 1, 17, 4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 4, 2, 3, 2, 1, 21, 4, 17, 105, 112, 45,
    115, 111, 99, 107, 101, 116, 45, 97, 100, 100, 114, 101, 115, 115, 0, 3, 0, 6, 2, 3, 2, 1, 19,
    4, 17, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 0, 3,
    0, 8, 1, 121, 4, 10, 117, 100, 112, 45, 115, 111, 99, 107, 101, 116, 0, 3, 0, 10, 1, 112, 125,
    1, 114, 2, 4, 100, 97, 116, 97, 12, 14, 114, 101, 109, 111, 116, 101, 45, 97, 100, 100, 114,
    101, 115, 115, 7, 4, 8, 100, 97, 116, 97, 103, 114, 97, 109, 0, 3, 0, 13, 1, 106, 0, 1, 5, 1,
    64, 3, 4, 116, 104, 105, 115, 11, 7, 110, 101, 116, 119, 111, 114, 107, 3, 13, 108, 111, 99,
    97, 108, 45, 97, 100, 100, 114, 101, 115, 115, 7, 0, 15, 4, 4, 98, 105, 110, 100, 0, 1, 16, 1,
    64, 3, 4, 116, 104, 105, 115, 11, 7, 110, 101, 116, 119, 111, 114, 107, 3, 14, 114, 101, 109,
    111, 116, 101, 45, 97, 100, 100, 114, 101, 115, 115, 7, 0, 15, 4, 7, 99, 111, 110, 110, 101,
    99, 116, 0, 1, 17, 1, 106, 1, 14, 1, 5, 1, 64, 1, 4, 116, 104, 105, 115, 11, 0, 18, 4, 7, 114,
    101, 99, 101, 105, 118, 101, 0, 1, 19, 1, 64, 2, 4, 116, 104, 105, 115, 11, 8, 100, 97, 116,
    97, 103, 114, 97, 109, 14, 0, 15, 4, 4, 115, 101, 110, 100, 0, 1, 20, 1, 106, 1, 7, 1, 5, 1,
    64, 1, 4, 116, 104, 105, 115, 11, 0, 21, 4, 13, 108, 111, 99, 97, 108, 45, 97, 100, 100, 114,
    101, 115, 115, 0, 1, 22, 4, 14, 114, 101, 109, 111, 116, 101, 45, 97, 100, 100, 114, 101, 115,
    115, 0, 1, 22, 1, 106, 1, 9, 1, 5, 1, 64, 1, 4, 116, 104, 105, 115, 11, 0, 23, 4, 14, 97, 100,
    100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 0, 1, 24, 1, 106, 1, 127, 1, 5, 1,
    64, 1, 4, 116, 104, 105, 115, 11, 0, 25, 4, 9, 105, 112, 118, 54, 45, 111, 110, 108, 121, 0, 1,
    26, 1, 64, 2, 4, 116, 104, 105, 115, 11, 5, 118, 97, 108, 117, 101, 127, 0, 15, 4, 13, 115,
    101, 116, 45, 105, 112, 118, 54, 45, 111, 110, 108, 121, 0, 1, 27, 1, 106, 1, 125, 1, 5, 1, 64,
    1, 4, 116, 104, 105, 115, 11, 0, 28, 4, 17, 117, 110, 105, 99, 97, 115, 116, 45, 104, 111, 112,
    45, 108, 105, 109, 105, 116, 0, 1, 29, 1, 64, 2, 4, 116, 104, 105, 115, 11, 5, 118, 97, 108,
    117, 101, 125, 0, 15, 4, 21, 115, 101, 116, 45, 117, 110, 105, 99, 97, 115, 116, 45, 104, 111,
    112, 45, 108, 105, 109, 105, 116, 0, 1, 30, 1, 106, 1, 119, 1, 5, 1, 64, 1, 4, 116, 104, 105,
    115, 11, 0, 31, 4, 19, 114, 101, 99, 101, 105, 118, 101, 45, 98, 117, 102, 102, 101, 114, 45,
    115, 105, 122, 101, 0, 1, 32, 1, 64, 2, 4, 116, 104, 105, 115, 11, 5, 118, 97, 108, 117, 101,
    119, 0, 15, 4, 23, 115, 101, 116, 45, 114, 101, 99, 101, 105, 118, 101, 45, 98, 117, 102, 102,
    101, 114, 45, 115, 105, 122, 101, 0, 1, 33, 4, 16, 115, 101, 110, 100, 45, 98, 117, 102, 102,
    101, 114, 45, 115, 105, 122, 101, 0, 1, 32, 4, 20, 115, 101, 116, 45, 115, 101, 110, 100, 45,
    98, 117, 102, 102, 101, 114, 45, 115, 105, 122, 101, 0, 1, 33, 4, 12, 110, 111, 110, 45, 98,
    108, 111, 99, 107, 105, 110, 103, 0, 1, 26, 4, 16, 115, 101, 116, 45, 110, 111, 110, 45, 98,
    108, 111, 99, 107, 105, 110, 103, 0, 1, 27, 1, 64, 1, 4, 116, 104, 105, 115, 11, 0, 1, 4, 9,
    115, 117, 98, 115, 99, 114, 105, 98, 101, 0, 1, 34, 1, 64, 1, 4, 116, 104, 105, 115, 11, 1, 0,
    4, 15, 100, 114, 111, 112, 45, 117, 100, 112, 45, 115, 111, 99, 107, 101, 116, 0, 1, 35, 3, 3,
    117, 100, 112, 21, 112, 97, 116, 104, 58, 47, 115, 111, 99, 107, 101, 116, 115, 47, 117, 100,
    112, 47, 117, 100, 112, 5, 25, 2, 3, 0, 13, 10, 117, 100, 112, 45, 115, 111, 99, 107, 101, 116,
    1, 66, 11, 2, 3, 2, 1, 15, 4, 7, 110, 101, 116, 119, 111, 114, 107, 0, 3, 0, 0, 2, 3, 2, 1, 17,
    4, 5, 101, 114, 114, 111, 114, 0, 3, 0, 2, 2, 3, 2, 1, 19, 4, 17, 105, 112, 45, 97, 100, 100,
    114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 0, 3, 0, 4, 2, 3, 2, 1, 26, 4, 10, 117,
    100, 112, 45, 115, 111, 99, 107, 101, 116, 0, 3, 0, 6, 1, 106, 1, 7, 1, 3, 1, 64, 1, 14, 97,
    100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 5, 0, 8, 4, 17, 99, 114, 101,
    97, 116, 101, 45, 117, 100, 112, 45, 115, 111, 99, 107, 101, 116, 0, 1, 9, 3, 17, 117, 100,
    112, 45, 99, 114, 101, 97, 116, 101, 45, 115, 111, 99, 107, 101, 116, 49, 112, 97, 116, 104,
    58, 47, 115, 111, 99, 107, 101, 116, 115, 47, 117, 100, 112, 45, 99, 114, 101, 97, 116, 101,
    45, 115, 111, 99, 107, 101, 116, 47, 117, 100, 112, 45, 99, 114, 101, 97, 116, 101, 45, 115,
    111, 99, 107, 101, 116, 5, 27, 1, 66, 8, 1, 112, 125, 1, 64, 1, 3, 108, 101, 110, 119, 0, 0, 4,
    16, 103, 101, 116, 45, 114, 97, 110, 100, 111, 109, 45, 98, 121, 116, 101, 115, 0, 1, 1, 1, 64,
    0, 0, 119, 4, 14, 103, 101, 116, 45, 114, 97, 110, 100, 111, 109, 45, 117, 54, 52, 0, 1, 2, 1,
    111, 2, 119, 119, 1, 64, 0, 0, 3, 4, 15, 105, 110, 115, 101, 99, 117, 114, 101, 45, 114, 97,
    110, 100, 111, 109, 0, 1, 4, 3, 6, 114, 97, 110, 100, 111, 109, 26, 112, 97, 116, 104, 58, 47,
    114, 97, 110, 100, 111, 109, 47, 114, 97, 110, 100, 111, 109, 47, 114, 97, 110, 100, 111, 109,
    5, 28, 1, 66, 4, 1, 111, 2, 115, 115, 1, 112, 0, 1, 64, 0, 0, 1, 4, 15, 103, 101, 116, 45, 101,
    110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 0, 1, 2, 3, 11, 101, 110, 118, 105, 114, 111,
    110, 109, 101, 110, 116, 28, 112, 107, 103, 58, 47, 101, 110, 118, 105, 114, 111, 110, 109,
    101, 110, 116, 47, 101, 110, 118, 105, 114, 111, 110, 109, 101, 110, 116, 5, 29, 2, 3, 0, 7,
    10, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 1, 66, 14, 2, 3, 2, 1, 30, 4, 10, 100,
    101, 115, 99, 114, 105, 112, 116, 111, 114, 0, 3, 0, 0, 2, 3, 2, 1, 11, 4, 12, 105, 110, 112,
    117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 2, 2, 3, 2, 1, 12, 4, 13, 111, 117, 116,
    112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 0, 3, 0, 4, 1, 114, 3, 5, 115, 116, 100, 105,
    110, 3, 6, 115, 116, 100, 111, 117, 116, 5, 6, 115, 116, 100, 101, 114, 114, 5, 4, 14, 115,
    116, 100, 105, 111, 45, 112, 114, 101, 111, 112, 101, 110, 115, 0, 3, 0, 6, 1, 64, 0, 0, 7, 4,
    9, 103, 101, 116, 45, 115, 116, 100, 105, 111, 0, 1, 8, 1, 111, 2, 1, 115, 1, 112, 9, 1, 64, 0,
    0, 10, 4, 15, 103, 101, 116, 45, 100, 105, 114, 101, 99, 116, 111, 114, 105, 101, 115, 0, 1,
    11, 3, 8, 112, 114, 101, 111, 112, 101, 110, 115, 22, 112, 107, 103, 58, 47, 112, 114, 101,
    111, 112, 101, 110, 115, 47, 112, 114, 101, 111, 112, 101, 110, 115, 5, 31, 1, 66, 3, 1, 106,
    0, 0, 1, 64, 1, 6, 115, 116, 97, 116, 117, 115, 0, 1, 0, 4, 4, 101, 120, 105, 116, 0, 1, 1, 3,
    4, 101, 120, 105, 116, 19, 112, 107, 103, 58, 47, 101, 120, 105, 116, 47, 119, 97, 115, 105,
    45, 101, 120, 105, 116, 5, 32, 1, 112, 115, 1, 106, 0, 0, 1, 64, 1, 4, 97, 114, 103, 115, 33,
    0, 34, 4, 4, 109, 97, 105, 110, 0, 1, 35, 4, 7, 99, 111, 109, 109, 97, 110, 100, 20, 112, 107,
    103, 58, 47, 99, 111, 109, 109, 97, 110, 100, 47, 99, 111, 109, 109, 97, 110, 100, 4, 0, 0, 68,
    9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101,
    100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 5, 48,
    46, 55, 46, 52, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115,
    116, 5, 48, 46, 52, 46, 48, 11, 25, 1, 7, 99, 111, 109, 109, 97, 110, 100, 12, 112, 107, 103,
    58, 47, 99, 111, 109, 109, 97, 110, 100, 3, 10, 0,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
