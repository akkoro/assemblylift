// Generated by `wit-bindgen` 0.15.0. DO NOT EDIT!
pub mod akkoro {
    pub mod assemblylift {

        #[allow(clippy::all)]
        pub mod asml_io {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
            pub type Ioid = u32;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum IoError {
                CoordsNotFound,
                InvalidCoords,
                InvalidIoid,
            }
            impl IoError {
                pub fn name(&self) -> &'static str {
                    match self {
                        IoError::CoordsNotFound => "coords-not-found",
                        IoError::InvalidCoords => "invalid-coords",
                        IoError::InvalidIoid => "invalid-ioid",
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                        IoError::CoordsNotFound => "",
                        IoError::InvalidCoords => "",
                        IoError::InvalidIoid => "",
                    }
                }
            }
            impl ::core::fmt::Debug for IoError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("IoError")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for IoError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), *self as i32)
                }
            }

            impl std::error::Error for IoError {}

            impl IoError {
                pub(crate) unsafe fn _lift(val: u8) -> IoError {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => IoError::CoordsNotFound,
                        1 => IoError::InvalidCoords,
                        2 => IoError::InvalidIoid,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum PollError {
                NotReady,
                InvalidIoid,
            }
            impl PollError {
                pub fn name(&self) -> &'static str {
                    match self {
                        PollError::NotReady => "not-ready",
                        PollError::InvalidIoid => "invalid-ioid",
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                        PollError::NotReady => "",
                        PollError::InvalidIoid => "",
                    }
                }
            }
            impl ::core::fmt::Debug for PollError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("PollError")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for PollError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), *self as i32)
                }
            }

            impl std::error::Error for PollError {}

            impl PollError {
                pub(crate) unsafe fn _lift(val: u8) -> PollError {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => PollError::NotReady,
                        1 => PollError::InvalidIoid,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            pub fn invoke(path: &str, input: &str) -> Result<Ioid, IoError> {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([u8; 8]);
                    let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                    let vec0 = path;
                    let ptr0 = vec0.as_ptr() as i32;
                    let len0 = vec0.len() as i32;
                    let vec1 = input;
                    let ptr1 = vec1.as_ptr() as i32;
                    let len1 = vec1.len() as i32;
                    let ptr2 = ret_area.as_mut_ptr() as i32;
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "akkoro:assemblylift/asml-io")]
                    extern "C" {
                        #[link_name = "invoke"]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32) {
                        unreachable!()
                    }
                    wit_import(ptr0, len0, ptr1, len1, ptr2);
                    let l3 = i32::from(*((ptr2 + 0) as *const u8));
                    match l3 {
                        0 => {
                            let e = {
                                let l4 = *((ptr2 + 4) as *const i32);

                                l4 as u32
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = i32::from(*((ptr2 + 4) as *const u8));

                                IoError::_lift(l5 as u8)
                            };
                            Err(e)
                        }
                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn poll(ioid: Ioid) -> Result<wit_bindgen::rt::vec::Vec<u8>, PollError> {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([u8; 12]);
                    let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                    let ptr0 = ret_area.as_mut_ptr() as i32;
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "akkoro:assemblylift/asml-io")]
                    extern "C" {
                        #[link_name = "poll"]
                        fn wit_import(_: i32, _: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i32) {
                        unreachable!()
                    }
                    wit_import(wit_bindgen::rt::as_i32(ioid), ptr0);
                    let l1 = i32::from(*((ptr0 + 0) as *const u8));
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *((ptr0 + 4) as *const i32);
                                let l3 = *((ptr0 + 8) as *const i32);
                                let len4 = l3 as usize;

                                Vec::from_raw_parts(l2 as *mut _, len4, len4)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = i32::from(*((ptr0 + 4) as *const u8));

                                PollError::_lift(l5 as u8)
                            };
                            Err(e)
                        }
                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                    }
                }
            }
        }

        #[allow(clippy::all)]
        pub mod asml_rt {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
            pub type Bytes = wit_bindgen::rt::vec::Vec<u8>;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum LogLevel {
                Debug,
                Trace,
                Info,
                Warn,
                Error,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Trace => f.debug_tuple("LogLevel::Trace").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Warn => f.debug_tuple("LogLevel::Warn").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                    }
                }
            }

            impl LogLevel {
                pub(crate) unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => LogLevel::Debug,
                        1 => LogLevel::Trace,
                        2 => LogLevel::Info,
                        3 => LogLevel::Warn,
                        4 => LogLevel::Error,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            pub fn success(response: &Bytes) {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                unsafe {
                    let vec0 = response;
                    let ptr0 = vec0.as_ptr() as i32;
                    let len0 = vec0.len() as i32;

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "akkoro:assemblylift/asml-rt")]
                    extern "C" {
                        #[link_name = "success"]
                        fn wit_import(_: i32, _: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i32) {
                        unreachable!()
                    }
                    wit_import(ptr0, len0);
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn failure(response: &Bytes) {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                unsafe {
                    let vec0 = response;
                    let ptr0 = vec0.as_ptr() as i32;
                    let len0 = vec0.len() as i32;

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "akkoro:assemblylift/asml-rt")]
                    extern "C" {
                        #[link_name = "failure"]
                        fn wit_import(_: i32, _: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i32) {
                        unreachable!()
                    }
                    wit_import(ptr0, len0);
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn log(level: LogLevel, context: &str, message: &str) {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                unsafe {
                    let vec0 = context;
                    let ptr0 = vec0.as_ptr() as i32;
                    let len0 = vec0.len() as i32;
                    let vec1 = message;
                    let ptr1 = vec1.as_ptr() as i32;
                    let len1 = vec1.len() as i32;

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "akkoro:assemblylift/asml-rt")]
                    extern "C" {
                        #[link_name = "log"]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32) {
                        unreachable!()
                    }
                    wit_import(level.clone() as i32, ptr0, len0, ptr1, len1);
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_input() -> wit_bindgen::rt::vec::Vec<u8> {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([u8; 8]);
                    let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                    let ptr0 = ret_area.as_mut_ptr() as i32;
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "akkoro:assemblylift/asml-rt")]
                    extern "C" {
                        #[link_name = "get-input"]
                        fn wit_import(_: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *((ptr0 + 0) as *const i32);
                    let l2 = *((ptr0 + 4) as *const i32);
                    let len3 = l2 as usize;
                    Vec::from_raw_parts(l1 as *mut _, len3, len3)
                }
            }
        }
    }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:assemblylift"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1039] = [
    3, 0, 12, 97, 115, 115, 101, 109, 98, 108, 121, 108, 105, 102, 116, 0, 97, 115, 109, 13, 0, 1,
    0, 7, 218, 1, 1, 65, 2, 1, 66, 13, 1, 121, 4, 0, 4, 105, 111, 105, 100, 3, 0, 0, 1, 109, 3, 16,
    99, 111, 111, 114, 100, 115, 45, 110, 111, 116, 45, 102, 111, 117, 110, 100, 14, 105, 110, 118,
    97, 108, 105, 100, 45, 99, 111, 111, 114, 100, 115, 12, 105, 110, 118, 97, 108, 105, 100, 45,
    105, 111, 105, 100, 4, 0, 8, 105, 111, 45, 101, 114, 114, 111, 114, 3, 0, 2, 1, 109, 2, 9, 110,
    111, 116, 45, 114, 101, 97, 100, 121, 12, 105, 110, 118, 97, 108, 105, 100, 45, 105, 111, 105,
    100, 4, 0, 10, 112, 111, 108, 108, 45, 101, 114, 114, 111, 114, 3, 0, 4, 1, 106, 1, 1, 1, 3, 1,
    64, 2, 4, 112, 97, 116, 104, 115, 5, 105, 110, 112, 117, 116, 115, 0, 6, 4, 0, 6, 105, 110,
    118, 111, 107, 101, 1, 7, 1, 112, 125, 1, 106, 1, 8, 1, 5, 1, 64, 1, 4, 105, 111, 105, 100, 1,
    0, 9, 4, 0, 4, 112, 111, 108, 108, 1, 10, 4, 1, 27, 97, 107, 107, 111, 114, 111, 58, 97, 115,
    115, 101, 109, 98, 108, 121, 108, 105, 102, 116, 47, 97, 115, 109, 108, 45, 105, 111, 5, 0, 11,
    13, 1, 0, 7, 97, 115, 109, 108, 45, 105, 111, 3, 0, 0, 7, 197, 1, 1, 65, 2, 1, 66, 12, 1, 112,
    125, 4, 0, 5, 98, 121, 116, 101, 115, 3, 0, 0, 1, 109, 5, 5, 100, 101, 98, 117, 103, 5, 116,
    114, 97, 99, 101, 4, 105, 110, 102, 111, 4, 119, 97, 114, 110, 5, 101, 114, 114, 111, 114, 4,
    0, 9, 108, 111, 103, 45, 108, 101, 118, 101, 108, 3, 0, 2, 1, 64, 1, 8, 114, 101, 115, 112,
    111, 110, 115, 101, 1, 1, 0, 4, 0, 7, 115, 117, 99, 99, 101, 115, 115, 1, 4, 4, 0, 7, 102, 97,
    105, 108, 117, 114, 101, 1, 4, 1, 64, 3, 5, 108, 101, 118, 101, 108, 3, 7, 99, 111, 110, 116,
    101, 120, 116, 115, 7, 109, 101, 115, 115, 97, 103, 101, 115, 1, 0, 4, 0, 3, 108, 111, 103, 1,
    5, 1, 112, 125, 1, 64, 0, 0, 6, 4, 0, 9, 103, 101, 116, 45, 105, 110, 112, 117, 116, 1, 7, 4,
    1, 27, 97, 107, 107, 111, 114, 111, 58, 97, 115, 115, 101, 109, 98, 108, 121, 108, 105, 102,
    116, 47, 97, 115, 109, 108, 45, 114, 116, 5, 0, 11, 13, 1, 0, 7, 97, 115, 109, 108, 45, 114,
    116, 3, 2, 0, 7, 196, 3, 1, 65, 2, 1, 65, 4, 1, 66, 13, 1, 121, 4, 0, 4, 105, 111, 105, 100, 3,
    0, 0, 1, 109, 3, 16, 99, 111, 111, 114, 100, 115, 45, 110, 111, 116, 45, 102, 111, 117, 110,
    100, 14, 105, 110, 118, 97, 108, 105, 100, 45, 99, 111, 111, 114, 100, 115, 12, 105, 110, 118,
    97, 108, 105, 100, 45, 105, 111, 105, 100, 4, 0, 8, 105, 111, 45, 101, 114, 114, 111, 114, 3,
    0, 2, 1, 109, 2, 9, 110, 111, 116, 45, 114, 101, 97, 100, 121, 12, 105, 110, 118, 97, 108, 105,
    100, 45, 105, 111, 105, 100, 4, 0, 10, 112, 111, 108, 108, 45, 101, 114, 114, 111, 114, 3, 0,
    4, 1, 106, 1, 1, 1, 3, 1, 64, 2, 4, 112, 97, 116, 104, 115, 5, 105, 110, 112, 117, 116, 115, 0,
    6, 4, 0, 6, 105, 110, 118, 111, 107, 101, 1, 7, 1, 112, 125, 1, 106, 1, 8, 1, 5, 1, 64, 1, 4,
    105, 111, 105, 100, 1, 0, 9, 4, 0, 4, 112, 111, 108, 108, 1, 10, 3, 1, 27, 97, 107, 107, 111,
    114, 111, 58, 97, 115, 115, 101, 109, 98, 108, 121, 108, 105, 102, 116, 47, 97, 115, 109, 108,
    45, 105, 111, 5, 0, 1, 66, 12, 1, 112, 125, 4, 0, 5, 98, 121, 116, 101, 115, 3, 0, 0, 1, 109,
    5, 5, 100, 101, 98, 117, 103, 5, 116, 114, 97, 99, 101, 4, 105, 110, 102, 111, 4, 119, 97, 114,
    110, 5, 101, 114, 114, 111, 114, 4, 0, 9, 108, 111, 103, 45, 108, 101, 118, 101, 108, 3, 0, 2,
    1, 64, 1, 8, 114, 101, 115, 112, 111, 110, 115, 101, 1, 1, 0, 4, 0, 7, 115, 117, 99, 99, 101,
    115, 115, 1, 4, 4, 0, 7, 102, 97, 105, 108, 117, 114, 101, 1, 4, 1, 64, 3, 5, 108, 101, 118,
    101, 108, 3, 7, 99, 111, 110, 116, 101, 120, 116, 115, 7, 109, 101, 115, 115, 97, 103, 101,
    115, 1, 0, 4, 0, 3, 108, 111, 103, 1, 5, 1, 112, 125, 1, 64, 0, 0, 6, 4, 0, 9, 103, 101, 116,
    45, 105, 110, 112, 117, 116, 1, 7, 3, 1, 27, 97, 107, 107, 111, 114, 111, 58, 97, 115, 115,
    101, 109, 98, 108, 121, 108, 105, 102, 116, 47, 97, 115, 109, 108, 45, 114, 116, 5, 1, 4, 1,
    32, 97, 107, 107, 111, 114, 111, 58, 97, 115, 115, 101, 109, 98, 108, 121, 108, 105, 102, 116,
    47, 97, 115, 115, 101, 109, 98, 108, 121, 108, 105, 102, 116, 4, 0, 11, 18, 1, 0, 12, 97, 115,
    115, 101, 109, 98, 108, 121, 108, 105, 102, 116, 3, 4, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103,
    101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115,
    1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99,
    111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98,
    105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 53, 46, 48,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
