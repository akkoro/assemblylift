// Generated by `wit-bindgen` 0.15.0. DO NOT EDIT!
pub mod akkoro {
    pub mod jwt {

        #[allow(clippy::all)]
        pub mod decoder {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum JwtError {
                InvalidToken,
                InvalidJwks,
            }
            impl JwtError {
                pub fn name(&self) -> &'static str {
                    match self {
                        JwtError::InvalidToken => "invalid-token",
                        JwtError::InvalidJwks => "invalid-jwks",
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                        JwtError::InvalidToken => "",
                        JwtError::InvalidJwks => "",
                    }
                }
            }
            impl ::core::fmt::Debug for JwtError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("JwtError")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for JwtError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), *self as i32)
                }
            }

            impl std::error::Error for JwtError {}

            impl JwtError {
                pub(crate) unsafe fn _lift(val: u8) -> JwtError {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => JwtError::InvalidToken,
                        1 => JwtError::InvalidJwks,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct ValidationParams {
                pub iss: wit_bindgen::rt::string::String,
                pub aud: wit_bindgen::rt::string::String,
            }
            impl ::core::fmt::Debug for ValidationParams {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ValidationParams")
                        .field("iss", &self.iss)
                        .field("aud", &self.aud)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct VerifyResult {
                pub valid: bool,
            }
            impl ::core::fmt::Debug for VerifyResult {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("VerifyResult")
                        .field("valid", &self.valid)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn decode_verify(
                token: &str,
                jwks: &str,
                params: &ValidationParams,
            ) -> Result<VerifyResult, JwtError> {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                unsafe {
                    #[repr(align(1))]
                    struct RetArea([u8; 2]);
                    let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                    let vec0 = token;
                    let ptr0 = vec0.as_ptr() as i32;
                    let len0 = vec0.len() as i32;
                    let vec1 = jwks;
                    let ptr1 = vec1.as_ptr() as i32;
                    let len1 = vec1.len() as i32;
                    let ValidationParams {
                        iss: iss2,
                        aud: aud2,
                    } = params;
                    let vec3 = iss2;
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    let vec4 = aud2;
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    let ptr5 = ret_area.as_mut_ptr() as i32;
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "akkoro:jwt/decoder")]
                    extern "C" {
                        #[link_name = "decode-verify"]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: i32,
                    ) {
                        unreachable!()
                    }
                    wit_import(ptr0, len0, ptr1, len1, ptr3, len3, ptr4, len4, ptr5);
                    let l6 = i32::from(*((ptr5 + 0) as *const u8));
                    match l6 {
                        0 => {
                            let e = {
                                let l7 = i32::from(*((ptr5 + 1) as *const u8));

                                VerifyResult {
                                    valid: wit_bindgen::rt::bool_lift(l7 as u8),
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l8 = i32::from(*((ptr5 + 1) as *const u8));

                                JwtError::_lift(l8 as u8)
                            };
                            Err(e)
                        }
                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:jwt"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 536] = [
    3, 0, 3, 106, 119, 116, 0, 97, 115, 109, 13, 0, 1, 0, 7, 189, 1, 1, 65, 2, 1, 66, 9, 1, 109, 2,
    13, 105, 110, 118, 97, 108, 105, 100, 45, 116, 111, 107, 101, 110, 12, 105, 110, 118, 97, 108,
    105, 100, 45, 106, 119, 107, 115, 4, 0, 9, 106, 119, 116, 45, 101, 114, 114, 111, 114, 3, 0, 0,
    1, 114, 2, 3, 105, 115, 115, 115, 3, 97, 117, 100, 115, 4, 0, 17, 118, 97, 108, 105, 100, 97,
    116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 3, 0, 2, 1, 114, 1, 5, 118, 97, 108, 105,
    100, 127, 4, 0, 13, 118, 101, 114, 105, 102, 121, 45, 114, 101, 115, 117, 108, 116, 3, 0, 4, 1,
    106, 1, 5, 1, 1, 1, 64, 3, 5, 116, 111, 107, 101, 110, 115, 4, 106, 119, 107, 115, 115, 6, 112,
    97, 114, 97, 109, 115, 3, 0, 6, 4, 0, 13, 100, 101, 99, 111, 100, 101, 45, 118, 101, 114, 105,
    102, 121, 1, 7, 4, 1, 18, 97, 107, 107, 111, 114, 111, 58, 106, 119, 116, 47, 100, 101, 99,
    111, 100, 101, 114, 5, 0, 11, 13, 1, 0, 7, 100, 101, 99, 111, 100, 101, 114, 3, 0, 0, 7, 211,
    1, 1, 65, 2, 1, 65, 2, 1, 66, 9, 1, 109, 2, 13, 105, 110, 118, 97, 108, 105, 100, 45, 116, 111,
    107, 101, 110, 12, 105, 110, 118, 97, 108, 105, 100, 45, 106, 119, 107, 115, 4, 0, 9, 106, 119,
    116, 45, 101, 114, 114, 111, 114, 3, 0, 0, 1, 114, 2, 3, 105, 115, 115, 115, 3, 97, 117, 100,
    115, 4, 0, 17, 118, 97, 108, 105, 100, 97, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115,
    3, 0, 2, 1, 114, 1, 5, 118, 97, 108, 105, 100, 127, 4, 0, 13, 118, 101, 114, 105, 102, 121, 45,
    114, 101, 115, 117, 108, 116, 3, 0, 4, 1, 106, 1, 5, 1, 1, 1, 64, 3, 5, 116, 111, 107, 101,
    110, 115, 4, 106, 119, 107, 115, 115, 6, 112, 97, 114, 97, 109, 115, 3, 0, 6, 4, 0, 13, 100,
    101, 99, 111, 100, 101, 45, 118, 101, 114, 105, 102, 121, 1, 7, 3, 1, 18, 97, 107, 107, 111,
    114, 111, 58, 106, 119, 116, 47, 100, 101, 99, 111, 100, 101, 114, 5, 0, 4, 1, 14, 97, 107,
    107, 111, 114, 111, 58, 106, 119, 116, 47, 106, 119, 116, 4, 0, 11, 9, 1, 0, 3, 106, 119, 116,
    3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70,
    9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101,
    100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48,
    46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115,
    116, 6, 48, 46, 49, 53, 46, 48,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
