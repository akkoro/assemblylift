name: Release Build

on:
  push:
    branches: [ mainline, v0.4.0-beta ]

jobs:

  build-lambda-default:
    name: 'AWS Lambda Default Runtime'
    runs-on: ubuntu-latest
    steps:
    - name: 'Configure AWS Credentials'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: 'Checkout'
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: 'Build Image'
      run: docker build -t assemblylift/asml-lambda-default . --file docker/asml-lambda-default
    - name: 'Copy Artifacts'
      run: docker run --rm --entrypoint cat assemblylift/asml-lambda-default /usr/src/assemblylift/target/release/bootstrap > $HOME/bootstrap && chmod 777 $HOME/bootstrap && cd $HOME && zip bootstrap.zip bootstrap
    - name: 'Get Version'
      run: echo "ASML_VERSION=$(docker run --rm assemblylift/asml-lambda-default)" >> $GITHUB_ENV 
    - name: 'Upload to S3 @ akkoro-public'
      run: aws s3 cp $HOME/bootstrap.zip s3://public.assemblylift.akkoro.io/runtime/$ASML_VERSION/aws-lambda/bootstrap.zip --acl public-read

#  build-lambda-alpine:
#    name: 'AWS Lambda Alpine Image'
#    runs-on: ubuntu-latest
#    steps:
#    - name: Configure AWS Credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: us-east-1
#    - name: 'Checkout'
#      uses: actions/checkout@v2
#    - name: 'Get Version'
#      run: echo "ASML_VERSION=$(cat ./cli/Cargo.toml | grep version -m 1 | awk '{print $3}' | sed 's/\"//g')" >> $GITHUB_ENV
#    - name: 'Build Image'
#      run: docker build -t assemblylift/asml-lambda-alpine . --file docker/asml-lambda-alpine
#    - name: 'Add ECR Tag'
#      run: docker tag assemblylift/asml-lambda-alpine public.ecr.aws/akkoro/assemblylift/asml-lambda-alpine:latest && docker tag public.ecr.aws/akkoro/assemblylift/asml-lambda-alpine:latest public.ecr.aws/akkoro/assemblylift/asml-lambda-alpine:$ASML_VERSION
#    - name: 'ECR Login'
#      run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/akkoro
#    - name: 'Push to ECR @ akkoro-public'
#      run: docker push --all-tags public.ecr.aws/akkoro/assemblylift/asml-lambda-alpine
#    - name: 'Export Image'
#      run: docker save assemblylift/asml-lambda-alpine:latest > $HOME/aws-lambda-alpine.tar
#    - name: 'Upload image to S3 @ akkoro-public'
#      run: aws s3 cp $HOME/aws-lambda-alpine.tar s3://public.assemblylift.akkoro.io/runtime/$ASML_VERSION/aws-lambda-alpine/image.tar --acl public-read

#  build-openfaas-alpine:
#    name: 'OpenFaas Alpine Image'
#    runs-on: ubuntu-latest
#    steps:
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#      - name: 'Checkout'
#        uses: actions/checkout@v2
#      - name: 'Get Version'
#        run: echo "ASML_VERSION=$(cat ./cli/Cargo.toml | grep version -m 1 | awk '{print $3}' | sed 's/\"//g')" >> $GITHUB_ENV
#      - name: 'Build Image'
#        run: docker build -t assemblylift/openfaas-alpine . --file docker/asml-openfaas-alpine
#      - name: 'Add ECR Tag'
#        run: docker tag assemblylift/openfaas-alpine public.ecr.aws/akkoro/assemblylift/openfaas-alpine:latest && docker tag public.ecr.aws/akkoro/assemblylift/openfaas-alpine:latest public.ecr.aws/akkoro/assemblylift/openfaas-alpine:$ASML_VERSION
#      - name: 'ECR Login'
#        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/akkoro
#      - name: 'Push to ECR @ akkoro-public'
#        run: docker push --all-tags public.ecr.aws/akkoro/assemblylift/openfaas-alpine
##      - name: 'Export Image'
##        run: docker save assemblylift/openfaas-alpine:latest > $HOME/aws-openfaas-alpine.tar
##      - name: 'Upload image to S3 @ akkoro-public'
##        run: aws s3 cp $HOME/aws-openfaas-alpine.tar s3://public.assemblylift.akkoro.io/runtime/$ASML_VERSION/aws-openfaas-alpine/image.tar --acl public-read

  build-hyper:
    name: 'Hyper Image'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: 'Get Version'
        run: echo "ASML_VERSION=$(cat ./cli/Cargo.toml | grep version -m 1 | awk '{print $3}' | sed 's/\"//g')" >> $GITHUB_ENV
      - name: 'Build Image'
        run: docker build -t assemblylift/hyper-alpine . --file docker/asml-hyper-alpine
      - name: 'Add ECR Tag'
        run: docker tag assemblylift/hyper-alpine public.ecr.aws/akkoro/assemblylift/hyper-alpine:latest && docker tag public.ecr.aws/akkoro/assemblylift/hyper-alpine:latest public.ecr.aws/akkoro/assemblylift/hyper-alpine:$ASML_VERSION
      - name: 'ECR Login'
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/akkoro
      - name: 'Push to ECR @ akkoro-public'
        run: docker push --all-tags public.ecr.aws/akkoro/assemblylift/hyper-alpine

  build-asml-darwin:
    name: asml - Darwin
    runs-on: macos-11
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install latest stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build & install capnp
        run: curl -O https://capnproto.org/capnproto-c++-0.10.3.tar.gz && tar zxf capnproto-c++-0.10.3.tar.gz && cd capnproto-c++-0.10.3 && ./configure && make -j6 check && make install
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: false
          args: --release --manifest-path ./cli/Cargo.toml
      - name: 'Get Version'
        run: echo "ASML_VERSION=$(cat ./cli/Cargo.toml | grep version -m 1 | awk '{print $3}' | sed 's/\"//g')" >> $GITHUB_ENV
      - name: 'Upload to S3 @ akkoro-public'
        run: aws s3 cp ./target/release/asml s3://public.assemblylift.akkoro.io/cli/$ASML_VERSION/x86_64-apple-darwin/asml --acl public-read

  build-asml-linux-gnu-ubuntu20:
    name: asml - Ubuntu 20.04
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install latest stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build & install capnp
        run: curl -O https://capnproto.org/capnproto-c++-0.10.3.tar.gz && tar zxf capnproto-c++-0.10.3.tar.gz && cd capnproto-c++-0.10.3 && ./configure && make -j6 check && sudo make install
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: false
          args: --release --manifest-path ./cli/Cargo.toml
      - name: 'Get Version'
        run: echo "ASML_VERSION=$(cat ./cli/Cargo.toml | grep version -m 1 | awk '{print $3}' | sed 's/\"//g')" >> $GITHUB_ENV
      - name: 'Upload to S3 @ akkoro-public'
        run: aws s3 cp ./target/release/asml s3://public.assemblylift.akkoro.io/cli/$ASML_VERSION/x86_64-linux-gnu/ubuntu-20.04/asml --acl public-read

  build-asml-linux-gnu-ubuntu22:
    name: asml - Ubuntu 22.04
    runs-on: ubuntu-22.04
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install latest stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build & install capnp
        uses: daaku/gh-action-apt-install@v4
        with:
          packages: capnproto
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: false
          args: --release --manifest-path ./cli/Cargo.toml
      - name: 'Get Version'
        run: echo "ASML_VERSION=$(cat ./cli/Cargo.toml | grep version -m 1 | awk '{print $3}' | sed 's/\"//g')" >> $GITHUB_ENV
      - name: 'Upload to S3 @ akkoro-public'
        run: aws s3 cp ./target/release/asml s3://public.assemblylift.akkoro.io/cli/$ASML_VERSION/x86_64-linux-gnu/ubuntu-22.04/asml --acl public-read

  build-builtin-function-verify-macaroon:
    name: Builtin Function verify-macaroon
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v2
      - name: Install latest stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-wasi
          override: true
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: false
          args: --release --target wasm32-wasi --manifest-path ./builtin/functions/verify-macaroon/Cargo.toml
      - name: 'Get Version'
        run: echo "ASML_VERSION=$(cat ./cli/Cargo.toml | grep version -m 1 | awk '{print $3}' | sed 's/\"//g')" >> $GITHUB_ENV
      - name: 'Upload to S3 @ akkoro-public'
        run: aws s3 cp ./target/wasm32-wasi/release/assemblylift-builtins-verify-macaroon.wasm s3://public.assemblylift.akkoro.io/builtins/$ASML_VERSION/functions/assemblylift-builtins-verify-macaroon.wasm --acl public-read
